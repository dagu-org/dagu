# Example DAG with registry authentication

# Option 1: Using structured format (explicit per-registry configuration)
name: registry-auth-structured
registryAuths:
  # Docker Hub - with username/password
  docker.io:
    username: ${DOCKER_USERNAME}
    password: ${DOCKER_PASSWORD}
  
  # GitHub Container Registry - with username/password
  ghcr.io:
    username: ${GITHUB_USERNAME}
    password: ${GITHUB_TOKEN}
  
  # AWS ECR - with JSON string per registry
  123456789012.dkr.ecr.us-east-1.amazonaws.com: ${ECR_AUTH_JSON}
  
  # Google Container Registry - with pre-encoded auth
  gcr.io:
    auth: ${GCR_AUTH_BASE64}  # base64(username:password)

container:
  image: ghcr.io/myorg/private-app:latest

steps:
  - name: process
    command: python process.py

---

# Option 2: Using DOCKER_AUTH_CONFIG format (standard Docker JSON)
name: registry-auth-json

# Pass entire Docker auth config as JSON string
registryAuths: ${DOCKER_AUTH_CONFIG}

container:
  image: docker.io/myorg/private-app:latest

steps:
  - name: process
    command: python process.py

# Set DOCKER_AUTH_CONFIG like this:
# export DOCKER_AUTH_CONFIG='{
#   "auths": {
#     "docker.io": {
#       "auth": "base64(username:password)"
#     },
#     "ghcr.io": {
#       "auth": "base64(username:token)"
#     }
#   }
# }'

---

# Option 3: Mixed approach
name: registry-auth-mixed

registryAuths:
  # Some registries with explicit config
  ghcr.io:
    username: github_user
    password: ${GITHUB_TOKEN}
  
  # Other registries with JSON string
  gcr.io: '{"username": "_json_key", "password": "${GCP_SERVICE_KEY}"}'
  
  # Pre-encoded auth
  docker.io:
    auth: ${DOCKER_AUTH_BASE64}

container:
  image: ghcr.io/myorg/app:latest

steps:
  - name: run
    command: ./app