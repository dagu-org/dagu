// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusHealthy   HealthResponseStatus = "healthy"
	HealthResponseStatusUnhealthy HealthResponseStatus = "unhealthy"
)

// Defines values for PostDAGActionRequestAction.
const (
	PostDAGActionRequestActionMarkFailed  PostDAGActionRequestAction = "mark-failed"
	PostDAGActionRequestActionMarkSuccess PostDAGActionRequestAction = "mark-success"
	PostDAGActionRequestActionRename      PostDAGActionRequestAction = "rename"
	PostDAGActionRequestActionRetry       PostDAGActionRequestAction = "retry"
	PostDAGActionRequestActionSave        PostDAGActionRequestAction = "save"
	PostDAGActionRequestActionStart       PostDAGActionRequestAction = "start"
	PostDAGActionRequestActionStop        PostDAGActionRequestAction = "stop"
	PostDAGActionRequestActionSuspend     PostDAGActionRequestAction = "suspend"
)

// CreateDAGRequest Request body for creating a DAG
type CreateDAGRequest struct {
	// Action Action to perform upon creation (if any)
	Action string `json:"action"`

	// Value Associated value for the action
	Value string `json:"value"`
}

// CreateDAGResponse Response object for creating a DAG
type CreateDAGResponse struct {
	// DagID ID of the newly created DAG
	DagID string `json:"DagID"`
}

// DAG Core DAG configuration containing workflow definition and metadata
type DAG struct {
	// DefaultParams Default parameter values in JSON format if not specified at runtime
	DefaultParams string `json:"DefaultParams"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description string `json:"Description"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group string `json:"Group"`

	// Name Unique identifier for the DAG within its group
	Name string `json:"Name"`

	// Params List of parameter names that can be passed to the DAG at runtime
	Params []string `json:"Params"`

	// Schedule List of scheduling expressions defining when the DAG should run
	Schedule []Schedule `json:"Schedule"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags []string `json:"Tags"`
}

// DAGDetails Detailed DAG configuration information
type DAGDetails struct {
	// DefaultParams Default parameter values in JSON format if not specified at runtime
	DefaultParams string `json:"DefaultParams"`

	// Delay Time in seconds to wait before starting the DAG
	Delay int `json:"Delay"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description string `json:"Description"`

	// Env List of environment variables to set before executing
	Env []string `json:"Env"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group string `json:"Group"`

	// HandlerOn Configuration for event handlers in a DAG
	HandlerOn HandlerOn `json:"HandlerOn"`

	// HistRetentionDays Number of days to retain historical logs
	HistRetentionDays int `json:"HistRetentionDays"`

	// Location Path to the DAG file
	Location string `json:"Location"`

	// LogDir Directory path for storing log files
	LogDir string `json:"LogDir"`

	// MaxActiveRuns Maximum number of concurrent steps to run
	MaxActiveRuns int `json:"MaxActiveRuns"`

	// Name Unique identifier for the DAG within its group
	Name string `json:"Name"`

	// Params List of parameter names that can be passed to the DAG at runtime
	Params []string `json:"Params"`

	// Preconditions Conditions that must be met before the DAG can start
	Preconditions []Precondition `json:"Preconditions"`

	// Schedule List of scheduling expressions defining when the DAG should run
	Schedule []Schedule `json:"Schedule"`

	// Steps List of steps to execute in the DAG
	Steps []Step `json:"Steps"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags []string `json:"Tags"`
}

// DAGLogData Aggregated log data for a DAG
type DAGLogData struct {
	// GridData Grid data for visualization
	GridData []DAGLogGridItem `json:"GridData"`

	// Logs Log data
	Logs []DAGLogStatusFile `json:"Logs"`
}

// DAGLogGridItem Grid item for log visualization
type DAGLogGridItem struct {
	// Name Name of the data point
	Name string `json:"Name"`

	// Vals Values for the data point
	Vals []int `json:"Vals"`
}

// DAGLogStatusFile Log status file information
type DAGLogStatusFile struct {
	// File Path to the log file
	File string `json:"File"`

	// Status Detailed status of a DAG run including child nodes
	Status DAGStatusDetails `json:"Status"`
}

// DAGStatus Current status of a DAG run
type DAGStatus struct {
	// FinishedAt RFC 3339 timestamp when the DAG run finished
	FinishedAt string `json:"FinishedAt"`

	// Log Path to the log file
	Log string `json:"Log"`

	// Name Name of the DAG being executed
	Name string `json:"Name"`

	// Params Runtime parameters passed to the DAG in JSON format
	Params string `json:"Params"`

	// Pid Process ID of the DAG run
	Pid int `json:"Pid"`

	// RequestId Unique identifier for the DAG run request
	RequestId string `json:"RequestId"`

	// StartedAt RFC 3339 timestamp when the DAG run started
	StartedAt string `json:"StartedAt"`

	// Status Numeric status code indicating current run state
	Status int `json:"Status"`

	// StatusText Human-readable status description
	StatusText string `json:"StatusText"`
}

// DAGStatusDetails Detailed status of a DAG run including child nodes
type DAGStatusDetails struct {
	// FinishedAt RFC3339 timestamp when the DAG run finished
	FinishedAt string `json:"FinishedAt"`

	// Log Path to the log file
	Log string `json:"Log"`

	// Name Name of the DAG
	Name string `json:"Name"`

	// Nodes Status of individual steps within the DAG
	Nodes []Node `json:"Nodes"`

	// OnCancel Status of an individual step within a DAG run
	OnCancel Node `json:"OnCancel"`

	// OnExit Status of an individual step within a DAG run
	OnExit Node `json:"OnExit"`

	// OnFailure Status of an individual step within a DAG run
	OnFailure Node `json:"OnFailure"`

	// OnSuccess Status of an individual step within a DAG run
	OnSuccess Node `json:"OnSuccess"`

	// Params Parameters in JSON format
	Params string `json:"Params"`

	// Pid Process ID of the DAG run
	Pid int `json:"Pid"`

	// RequestId Unique identifier for the run request
	RequestId string `json:"RequestId"`

	// StartedAt RFC3339 timestamp when the DAG run started
	StartedAt string `json:"StartedAt"`

	// Status Numeric status code
	Status int `json:"Status"`

	// StatusText Human-readable status description
	StatusText string `json:"StatusText"`
}

// DAGStatusFile DAG file with its status information
type DAGStatusFile struct {
	// DAG Core DAG configuration containing workflow definition and metadata
	DAG DAG `json:"DAG"`

	// Dir Directory containing the DAG file
	Dir string `json:"Dir"`

	// Error Error message if any
	Error string `json:"Error"`

	// File Path to the DAG file
	File string `json:"File"`

	// Status Current status of a DAG run
	Status DAGStatus `json:"Status"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"Suspended"`
}

// DAGStatusFileDetails Detailed status information for a DAG instance
type DAGStatusFileDetails struct {
	// DAG Detailed DAG configuration information
	DAG DAGDetails `json:"DAG"`

	// Dir Directory containing the DAG file
	Dir string `json:"Dir"`

	// Error Error message if any
	Error string `json:"Error"`

	// File Path to the DAG file
	File string `json:"File"`

	// Status Detailed status of a DAG run including child nodes
	Status DAGStatusDetails `json:"Status"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"Suspended"`
}

// Error Generic error response object
type Error struct {
	// Code Error code indicating the type of error
	Code string `json:"code"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Short error message
	Message string `json:"message"`
}

// GetDAGDetailsResponse Response object for getting details of a DAG
type GetDAGDetailsResponse struct {
	// DAG Detailed status information for a DAG instance
	DAG DAGStatusFileDetails `json:"DAG"`

	// Definition DAG definition
	Definition string `json:"Definition"`

	// Errors List of errors encountered during the request
	Errors []string `json:"Errors"`

	// Graph Graph data for visualization
	Graph string `json:"Graph"`

	// LogData Aggregated log data for a DAG
	LogData DAGLogData `json:"LogData"`

	// LogUrl URL to access logs directly
	LogUrl string `json:"LogUrl"`

	// ScLog Log information for the scheduler
	ScLog SchedulerLog `json:"ScLog"`

	// StepLog Log information for a specific step
	StepLog StepLog `json:"StepLog"`

	// Tab Tab name for UI navigation
	Tab string `json:"Tab"`

	// Title Title of the Page
	Title string `json:"Title"`
}

// HandlerOn Configuration for event handlers in a DAG
type HandlerOn struct {
	// Cancel Individual task within a DAG that performs a specific operation
	Cancel *Step `json:"Cancel,omitempty"`

	// Exit Individual task within a DAG that performs a specific operation
	Exit *Step `json:"Exit,omitempty"`

	// Failure Individual task within a DAG that performs a specific operation
	Failure *Step `json:"Failure,omitempty"`

	// Success Individual task within a DAG that performs a specific operation
	Success *Step `json:"Success,omitempty"`
}

// HealthResponse Response object for the health check endpoint
type HealthResponse struct {
	// Status Overall health status of the server
	Status HealthResponseStatus `json:"status"`

	// Timestamp Current server time
	Timestamp string `json:"timestamp"`

	// Uptime Server uptime in seconds
	Uptime int `json:"uptime"`

	// Version Current version of the server
	Version string `json:"version"`
}

// HealthResponseStatus Overall health status of the server
type HealthResponseStatus string

// ListDAGsResponse Response object for listing all DAGs
type ListDAGsResponse struct {
	// DAGs List of DAGs with their status and metadata
	DAGs []DAGStatusFile `json:"DAGs"`

	// Errors List of errors encountered during the request
	Errors []string `json:"Errors"`

	// HasError Whether any errors were encountered
	HasError bool `json:"HasError"`

	// PageCount Total number of pages available
	PageCount int `json:"PageCount"`
}

// ListTagResponse Response object for listing all tags
type ListTagResponse struct {
	// Errors List of errors encountered during the request
	Errors []string `json:"Errors"`

	// Tags List of unique tags
	Tags []string `json:"Tags"`
}

// Node Status of an individual step within a DAG run
type Node struct {
	// DoneCount Number of successful completions for repeating steps
	DoneCount int `json:"DoneCount"`

	// Error Error message if the step failed
	Error string `json:"Error"`

	// FinishedAt RFC3339 timestamp when the step finished
	FinishedAt string `json:"FinishedAt"`

	// Log Path to step-specific log file
	Log string `json:"Log"`

	// RetryCount Number of retry attempts made for this step
	RetryCount int `json:"RetryCount"`

	// StartedAt RFC3339 timestamp when the step started
	StartedAt string `json:"StartedAt"`

	// Status Numeric status code for the step
	Status int `json:"Status"`

	// StatusText Human-readable status description
	StatusText string `json:"StatusText"`

	// Step Individual task within a DAG that performs a specific operation
	Step Step `json:"Step"`
}

// PostDAGActionRequest Request body for posting an action to a DAG
type PostDAGActionRequest struct {
	// Action Action to be performed on the DAG
	Action PostDAGActionRequestAction `json:"action"`

	// Params Additional parameters for the action in JSON format
	Params *string `json:"params,omitempty"`

	// RequestId Unique request ID for the action
	RequestId *string `json:"requestId,omitempty"`

	// Step Step name if the action targets a specific step
	Step *string `json:"step,omitempty"`

	// Value Optional extra value for the action
	Value *string `json:"value,omitempty"`
}

// PostDAGActionRequestAction Action to be performed on the DAG
type PostDAGActionRequestAction string

// PostDAGActionResponse Response object for posting an action to a DAG
type PostDAGActionResponse struct {
	// NewDagID New DAG ID, if the action resulted in a new DAG
	NewDagID *string `json:"NewDagID,omitempty"`
}

// Precondition Precondition that must be satisfied before running a step or DAG
type Precondition struct {
	// Condition Expression or check to evaluate
	Condition *string `json:"Condition,omitempty"`

	// Expected Expected result of the condition evaluation
	Expected *string `json:"Expected,omitempty"`
}

// RepeatPolicy Configuration for step retry behavior
type RepeatPolicy struct {
	// Interval Time in seconds to wait between retry attempts
	Interval *int `json:"Interval,omitempty"`

	// Repeat Whether the step should be retried on failure
	Repeat *bool `json:"Repeat,omitempty"`
}

// Schedule Schedule configuration for DAG run
type Schedule struct {
	// Expression Cron expression or schedule pattern
	Expression string `json:"Expression"`
}

// SchedulerLog Log information for the scheduler
type SchedulerLog struct {
	// Content Log content
	Content string `json:"Content"`

	// LogFile Path to the scheduler log file
	LogFile string `json:"LogFile"`
}

// SearchDAGsMatchItem Details of a search match within a DAG
type SearchDAGsMatchItem struct {
	// Line Matching line content
	Line *string `json:"Line,omitempty"`

	// LineNumber Line number where match was found
	LineNumber *int `json:"LineNumber,omitempty"`

	// StartLine Start line for context
	StartLine *int `json:"StartLine,omitempty"`
}

// SearchDAGsResponse Response object for searching DAGs
type SearchDAGsResponse struct {
	// Errors Errors encountered during the search
	Errors []string `json:"Errors"`

	// Results Search results matching the query
	Results []SearchDAGsResultItem `json:"Results"`
}

// SearchDAGsResultItem Individual search result item for a DAG
type SearchDAGsResultItem struct {
	// DAG Core DAG configuration containing workflow definition and metadata
	DAG *DAG `json:"DAG,omitempty"`

	// Matches Details of where matches were found
	Matches *[]SearchDAGsMatchItem `json:"Matches,omitempty"`

	// Name Name of the matching DAG
	Name *string `json:"Name,omitempty"`
}

// Step Individual task within a DAG that performs a specific operation
type Step struct {
	// Args List of arguments to pass to the command
	Args []string `json:"Args"`

	// CmdWithArgs Complete command string including arguments to execute
	CmdWithArgs string `json:"CmdWithArgs"`

	// Command Base command to execute without arguments
	Command string `json:"Command"`

	// Depends List of step names that must complete before this step can start
	Depends []string `json:"Depends"`

	// Description Human-readable description of what the step does
	Description string `json:"Description"`

	// Dir Working directory for executing the step's command
	Dir string `json:"Dir"`

	// MailOnError Whether to send email notifications on step failure
	MailOnError bool `json:"MailOnError"`

	// Name Unique identifier for the step within the DAG
	Name string `json:"Name"`

	// Output Variable name to store the step's output
	Output string `json:"Output"`

	// Params Parameters to pass to the sub DAG in JSON format
	Params *string `json:"Params,omitempty"`

	// Preconditions Conditions that must be met before the step can start
	Preconditions []Precondition `json:"Preconditions"`

	// RepeatPolicy Configuration for step retry behavior
	RepeatPolicy RepeatPolicy `json:"RepeatPolicy"`

	// Run Sub DAG to run
	Run *string `json:"Run,omitempty"`

	// Script Script content if the step executes a script file
	Script string `json:"Script"`

	// Stderr File path for capturing standard error
	Stderr string `json:"Stderr"`

	// Stdout File path for capturing standard output
	Stdout string `json:"Stdout"`
}

// StepLog Log information for a specific step
type StepLog struct {
	// Content Log content
	Content string `json:"Content"`

	// LogFile Path to the log file
	LogFile string `json:"LogFile"`

	// Step Status of an individual step within a DAG run
	Step Node `json:"Step"`
}

// ListDAGsParams defines parameters for ListDAGs.
type ListDAGsParams struct {
	// Page Page number (for pagination)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// SearchName Filter DAGs by matching name
	SearchName *string `form:"searchName,omitempty" json:"searchName,omitempty"`

	// SearchTag Filter DAGs by matching tag
	SearchTag *string `form:"searchTag,omitempty" json:"searchTag,omitempty"`
}

// GetDAGDetailsParams defines parameters for GetDAGDetails.
type GetDAGDetailsParams struct {
	// Tab Tab name for UI navigation
	Tab *string `form:"tab,omitempty" json:"tab,omitempty"`

	// File Specific file related to the DAG
	File *string `form:"file,omitempty" json:"file,omitempty"`

	// Step Step name within the DAG
	Step *string `form:"step,omitempty" json:"step,omitempty"`
}

// SearchDAGsParams defines parameters for SearchDAGs.
type SearchDAGsParams struct {
	// Q A search query string
	Q string `form:"q" json:"q"`
}

// CreateDAGJSONRequestBody defines body for CreateDAG for application/json ContentType.
type CreateDAGJSONRequestBody = CreateDAGRequest

// PostDAGActionJSONRequestBody defines body for PostDAGAction for application/json ContentType.
type PostDAGActionJSONRequestBody = PostDAGActionRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all DAGs
	// (GET /dags)
	ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams)
	// Create a new DAG
	// (POST /dags)
	CreateDAG(w http.ResponseWriter, r *http.Request)
	// Delete a DAG
	// (DELETE /dags/{dagId})
	DeleteDAG(w http.ResponseWriter, r *http.Request, dagId string)
	// Get DAG details
	// (GET /dags/{dagId})
	GetDAGDetails(w http.ResponseWriter, r *http.Request, dagId string, params GetDAGDetailsParams)
	// Perform an action on a DAG
	// (POST /dags/{dagId})
	PostDAGAction(w http.ResponseWriter, r *http.Request, dagId string)
	// Health check endpoint
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// Search DAGs
	// (GET /search)
	SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams)
	// List all tags
	// (GET /tags)
	ListTags(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all DAGs
// (GET /dags)
func (_ Unimplemented) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new DAG
// (POST /dags)
func (_ Unimplemented) CreateDAG(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a DAG
// (DELETE /dags/{dagId})
func (_ Unimplemented) DeleteDAG(w http.ResponseWriter, r *http.Request, dagId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get DAG details
// (GET /dags/{dagId})
func (_ Unimplemented) GetDAGDetails(w http.ResponseWriter, r *http.Request, dagId string, params GetDAGDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Perform an action on a DAG
// (POST /dags/{dagId})
func (_ Unimplemented) PostDAGAction(w http.ResponseWriter, r *http.Request, dagId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check endpoint
// (GET /health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search DAGs
// (GET /search)
func (_ Unimplemented) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all tags
// (GET /tags)
func (_ Unimplemented) ListTags(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListDAGs operation middleware
func (siw *ServerInterfaceWrapper) ListDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDAGsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "searchName" -------------

	err = runtime.BindQueryParameter("form", true, false, "searchName", r.URL.Query(), &params.SearchName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "searchName", Err: err})
		return
	}

	// ------------- Optional query parameter "searchTag" -------------

	err = runtime.BindQueryParameter("form", true, false, "searchTag", r.URL.Query(), &params.SearchTag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "searchTag", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateDAG operation middleware
func (siw *ServerInterfaceWrapper) CreateDAG(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDAG(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteDAG operation middleware
func (siw *ServerInterfaceWrapper) DeleteDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagId" -------------
	var dagId string

	err = runtime.BindStyledParameterWithOptions("simple", "dagId", chi.URLParam(r, "dagId"), &dagId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDAG(w, r, dagId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagId" -------------
	var dagId string

	err = runtime.BindStyledParameterWithOptions("simple", "dagId", chi.URLParam(r, "dagId"), &dagId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGDetailsParams

	// ------------- Optional query parameter "tab" -------------

	err = runtime.BindQueryParameter("form", true, false, "tab", r.URL.Query(), &params.Tab)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tab", Err: err})
		return
	}

	// ------------- Optional query parameter "file" -------------

	err = runtime.BindQueryParameter("form", true, false, "file", r.URL.Query(), &params.File)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file", Err: err})
		return
	}

	// ------------- Optional query parameter "step" -------------

	err = runtime.BindQueryParameter("form", true, false, "step", r.URL.Query(), &params.Step)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGDetails(w, r, dagId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PostDAGAction operation middleware
func (siw *ServerInterfaceWrapper) PostDAGAction(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagId" -------------
	var dagId string

	err = runtime.BindStyledParameterWithOptions("simple", "dagId", chi.URLParam(r, "dagId"), &dagId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDAGAction(w, r, dagId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchDAGs operation middleware
func (siw *ServerInterfaceWrapper) SearchDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchDAGsParams

	// ------------- Required query parameter "q" -------------

	if paramValue := r.URL.Query().Get("q"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "q"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTags(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags", wrapper.ListDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags", wrapper.CreateDAG)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/dags/{dagId}", wrapper.DeleteDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{dagId}", wrapper.GetDAGDetails)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{dagId}", wrapper.PostDAGAction)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/search", wrapper.SearchDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tags", wrapper.ListTags)
	})

	return r
}

type ListDAGsRequestObject struct {
	Params ListDAGsParams
}

type ListDAGsResponseObject interface {
	VisitListDAGsResponse(w http.ResponseWriter) error
}

type ListDAGs200JSONResponse ListDAGsResponse

func (response ListDAGs200JSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGs400JSONResponse Error

func (response ListDAGs400JSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListDAGsdefaultJSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateDAGRequestObject struct {
	Body *CreateDAGJSONRequestBody
}

type CreateDAGResponseObject interface {
	VisitCreateDAGResponse(w http.ResponseWriter) error
}

type CreateDAG200JSONResponse CreateDAGResponse

func (response CreateDAG200JSONResponse) VisitCreateDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateDAG400JSONResponse Error

func (response CreateDAG400JSONResponse) VisitCreateDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateDAGdefaultJSONResponse) VisitCreateDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteDAGRequestObject struct {
	DagId string `json:"dagId"`
}

type DeleteDAGResponseObject interface {
	VisitDeleteDAGResponse(w http.ResponseWriter) error
}

type DeleteDAG200JSONResponse map[string]interface{}

func (response DeleteDAG200JSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDAG404JSONResponse Error

func (response DeleteDAG404JSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteDAGdefaultJSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGDetailsRequestObject struct {
	DagId  string `json:"dagId"`
	Params GetDAGDetailsParams
}

type GetDAGDetailsResponseObject interface {
	VisitGetDAGDetailsResponse(w http.ResponseWriter) error
}

type GetDAGDetails200JSONResponse GetDAGDetailsResponse

func (response GetDAGDetails200JSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDetails404JSONResponse Error

func (response GetDAGDetails404JSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGDetailsdefaultJSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostDAGActionRequestObject struct {
	DagId string `json:"dagId"`
	Body  *PostDAGActionJSONRequestBody
}

type PostDAGActionResponseObject interface {
	VisitPostDAGActionResponse(w http.ResponseWriter) error
}

type PostDAGAction200JSONResponse PostDAGActionResponse

func (response PostDAGAction200JSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostDAGAction400JSONResponse Error

func (response PostDAGAction400JSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostDAGAction404JSONResponse Error

func (response PostDAGAction404JSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostDAGActiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PostDAGActiondefaultJSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse HealthResponse

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealth503JSONResponse HealthResponse

func (response GetHealth503JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetHealthdefaultJSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SearchDAGsRequestObject struct {
	Params SearchDAGsParams
}

type SearchDAGsResponseObject interface {
	VisitSearchDAGsResponse(w http.ResponseWriter) error
}

type SearchDAGs200JSONResponse SearchDAGsResponse

func (response SearchDAGs200JSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchDAGs400JSONResponse Error

func (response SearchDAGs400JSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SearchDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SearchDAGsdefaultJSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListTagsRequestObject struct {
}

type ListTagsResponseObject interface {
	VisitListTagsResponse(w http.ResponseWriter) error
}

type ListTags200JSONResponse ListTagResponse

func (response ListTags200JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTagsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListTagsdefaultJSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all DAGs
	// (GET /dags)
	ListDAGs(ctx context.Context, request ListDAGsRequestObject) (ListDAGsResponseObject, error)
	// Create a new DAG
	// (POST /dags)
	CreateDAG(ctx context.Context, request CreateDAGRequestObject) (CreateDAGResponseObject, error)
	// Delete a DAG
	// (DELETE /dags/{dagId})
	DeleteDAG(ctx context.Context, request DeleteDAGRequestObject) (DeleteDAGResponseObject, error)
	// Get DAG details
	// (GET /dags/{dagId})
	GetDAGDetails(ctx context.Context, request GetDAGDetailsRequestObject) (GetDAGDetailsResponseObject, error)
	// Perform an action on a DAG
	// (POST /dags/{dagId})
	PostDAGAction(ctx context.Context, request PostDAGActionRequestObject) (PostDAGActionResponseObject, error)
	// Health check endpoint
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Search DAGs
	// (GET /search)
	SearchDAGs(ctx context.Context, request SearchDAGsRequestObject) (SearchDAGsResponseObject, error)
	// List all tags
	// (GET /tags)
	ListTags(ctx context.Context, request ListTagsRequestObject) (ListTagsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListDAGs operation middleware
func (sh *strictHandler) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	var request ListDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListDAGs(ctx, request.(ListDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListDAGsResponseObject); ok {
		if err := validResponse.VisitListDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateDAG operation middleware
func (sh *strictHandler) CreateDAG(w http.ResponseWriter, r *http.Request) {
	var request CreateDAGRequestObject

	var body CreateDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDAG(ctx, request.(CreateDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateDAGResponseObject); ok {
		if err := validResponse.VisitCreateDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDAG operation middleware
func (sh *strictHandler) DeleteDAG(w http.ResponseWriter, r *http.Request, dagId string) {
	var request DeleteDAGRequestObject

	request.DagId = dagId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDAG(ctx, request.(DeleteDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDAGResponseObject); ok {
		if err := validResponse.VisitDeleteDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGDetails operation middleware
func (sh *strictHandler) GetDAGDetails(w http.ResponseWriter, r *http.Request, dagId string, params GetDAGDetailsParams) {
	var request GetDAGDetailsRequestObject

	request.DagId = dagId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGDetails(ctx, request.(GetDAGDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostDAGAction operation middleware
func (sh *strictHandler) PostDAGAction(w http.ResponseWriter, r *http.Request, dagId string) {
	var request PostDAGActionRequestObject

	request.DagId = dagId

	var body PostDAGActionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostDAGAction(ctx, request.(PostDAGActionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDAGAction")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostDAGActionResponseObject); ok {
		if err := validResponse.VisitPostDAGActionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(w http.ResponseWriter, r *http.Request) {
	var request GetHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchDAGs operation middleware
func (sh *strictHandler) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	var request SearchDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchDAGs(ctx, request.(SearchDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchDAGsResponseObject); ok {
		if err := validResponse.VisitSearchDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTags operation middleware
func (sh *strictHandler) ListTags(w http.ResponseWriter, r *http.Request) {
	var request ListTagsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTags(ctx, request.(ListTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTagsResponseObject); ok {
		if err := validResponse.VisitListTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
