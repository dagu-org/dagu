// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for ErrorCode.
const (
	ErrorCodeBadGateway      ErrorCode = "bad_gateway"
	ErrorCodeBadRequest      ErrorCode = "bad_request"
	ErrorCodeInternalError   ErrorCode = "internal_error"
	ErrorCodeNotFound        ErrorCode = "not_found"
	ErrorCodeRemoteNodeError ErrorCode = "remote_node_error"
	ErrorCodeUnauthorized    ErrorCode = "unauthorized"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusHealthy   HealthResponseStatus = "healthy"
	HealthResponseStatusUnhealthy HealthResponseStatus = "unhealthy"
)

// Defines values for PostDAGActionRequestAction.
const (
	PostDAGActionRequestActionMarkFailed  PostDAGActionRequestAction = "mark-failed"
	PostDAGActionRequestActionMarkSuccess PostDAGActionRequestAction = "mark-success"
	PostDAGActionRequestActionRename      PostDAGActionRequestAction = "rename"
	PostDAGActionRequestActionRetry       PostDAGActionRequestAction = "retry"
	PostDAGActionRequestActionSave        PostDAGActionRequestAction = "save"
	PostDAGActionRequestActionStart       PostDAGActionRequestAction = "start"
	PostDAGActionRequestActionStop        PostDAGActionRequestAction = "stop"
	PostDAGActionRequestActionSuspend     PostDAGActionRequestAction = "suspend"
)

// Defines values for RunStatus.
const (
	RunStatusN0 RunStatus = 0
	RunStatusN1 RunStatus = 1
	RunStatusN2 RunStatus = 2
	RunStatusN3 RunStatus = 3
	RunStatusN4 RunStatus = 4
)

// Defines values for RunStatusText.
const (
	RunStatusTextCancelled  RunStatusText = "cancelled"
	RunStatusTextFailed     RunStatusText = "failed"
	RunStatusTextFinished   RunStatusText = "finished"
	RunStatusTextNotStarted RunStatusText = "not started"
	RunStatusTextRunning    RunStatusText = "running"
)

// DAG Core DAG configuration containing workflow definition and metadata
type DAG struct {
	// DefaultParams Default parameter values in JSON format if not specified at runtime
	DefaultParams *string `json:"DefaultParams,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description string `json:"Description"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"Group,omitempty"`

	// Name Unique identifier for the DAG within its group
	Name string `json:"Name"`

	// Params List of parameter names that can be passed to the DAG at runtime
	Params *[]string `json:"Params,omitempty"`

	// Schedule List of scheduling expressions defining when the DAG should run
	Schedule *[]Schedule `json:"Schedule,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"Tags,omitempty"`
}

// DAGDetails Detailed DAG configuration information
type DAGDetails struct {
	// DefaultParams Default parameter values in JSON format if not specified at runtime
	DefaultParams string `json:"DefaultParams"`

	// Delay Time in seconds to wait before starting the DAG
	Delay int `json:"Delay"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description string `json:"Description"`

	// Env List of environment variables to set before executing
	Env []string `json:"Env"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group string `json:"Group"`

	// HandlerOn Configuration for event handlers in a DAG
	HandlerOn HandlerOn `json:"HandlerOn"`

	// HistRetentionDays Number of days to retain historical logs
	HistRetentionDays int `json:"HistRetentionDays"`

	// Location Path to the DAG file
	Location string `json:"Location"`

	// LogDir Directory path for storing log files
	LogDir string `json:"LogDir"`

	// MaxActiveRuns Maximum number of concurrent steps to run
	MaxActiveRuns int `json:"MaxActiveRuns"`

	// Name Unique identifier for the DAG within its group
	Name string `json:"Name"`

	// Params List of parameter names that can be passed to the DAG at runtime
	Params []string `json:"Params"`

	// Preconditions Conditions that must be met before the DAG can start
	Preconditions []Precondition `json:"Preconditions"`

	// Schedule List of scheduling expressions defining when the DAG should run
	Schedule []Schedule `json:"Schedule"`

	// Steps List of steps to execute in the DAG
	Steps []Step `json:"Steps"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags []string `json:"Tags"`
}

// DAGLogData Aggregated log data for a DAG
type DAGLogData struct {
	// GridData Grid data for visualization
	GridData []DAGLogGridItem `json:"GridData"`

	// Logs Log data
	Logs []DAGLogStatusFile `json:"Logs"`
}

// DAGLogGridItem Grid item for log visualization
type DAGLogGridItem struct {
	// Name Name of the data point
	Name string `json:"Name"`

	// Vals Values for the data point
	Vals []int `json:"Vals"`
}

// DAGLogStatusFile Log status file information
type DAGLogStatusFile struct {
	// File Path to the log file
	File string `json:"File"`

	// Status Detailed status of a DAG run including child nodes
	Status DAGStatusDetails `json:"Status"`
}

// DAGStatus Current status of a DAG run
type DAGStatus struct {
	// FinishedAt RFC 3339 timestamp when the DAG run finished
	FinishedAt string `json:"FinishedAt"`

	// Log Path to the log file
	Log *string `json:"Log,omitempty"`

	// Name Name of the DAG being executed
	Name string `json:"Name"`

	// Params Runtime parameters passed to the DAG in JSON format
	Params *string `json:"Params,omitempty"`

	// Pid Process ID of the DAG run
	Pid *int `json:"Pid,omitempty"`

	// RequestId Unique identifier for the DAG run request
	RequestId string `json:"RequestId"`

	// StartedAt RFC 3339 timestamp when the DAG run started
	StartedAt string `json:"StartedAt"`

	// Status Numeric status code indicating current run state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	Status RunStatus `json:"Status"`

	// StatusText Human-readable status description for the DAG run
	StatusText RunStatusText `json:"StatusText"`
}

// DAGStatusDetails Detailed status of a DAG run including child nodes
type DAGStatusDetails struct {
	// FinishedAt RFC3339 timestamp when the DAG run finished
	FinishedAt string `json:"FinishedAt"`

	// Log Path to the log file
	Log string `json:"Log"`

	// Name Name of the DAG
	Name string `json:"Name"`

	// Nodes Status of individual steps within the DAG
	Nodes []Node `json:"Nodes"`

	// OnCancel Status of an individual step within a DAG run
	OnCancel Node `json:"OnCancel"`

	// OnExit Status of an individual step within a DAG run
	OnExit Node `json:"OnExit"`

	// OnFailure Status of an individual step within a DAG run
	OnFailure Node `json:"OnFailure"`

	// OnSuccess Status of an individual step within a DAG run
	OnSuccess Node `json:"OnSuccess"`

	// Params Parameters in JSON format
	Params string `json:"Params"`

	// Pid Process ID of the DAG run
	Pid int `json:"Pid"`

	// RequestId Unique identifier for the run request
	RequestId string `json:"RequestId"`

	// StartedAt RFC3339 timestamp when the DAG run started
	StartedAt string `json:"StartedAt"`

	// Status Numeric status code
	Status int `json:"Status"`

	// StatusText Human-readable status description
	StatusText string `json:"StatusText"`
}

// DAGStatusFile DAG file with its status information
type DAGStatusFile struct {
	// DAG Core DAG configuration containing workflow definition and metadata
	DAG DAG `json:"DAG"`

	// Error Error message if any
	Error *string `json:"Error,omitempty"`

	// File Path to the DAG file
	File string `json:"File"`

	// Status Current status of a DAG run
	Status DAGStatus `json:"Status"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"Suspended"`
}

// DAGStatusFileDetails Detailed status information for a DAG instance
type DAGStatusFileDetails struct {
	// DAG Detailed DAG configuration information
	DAG DAGDetails `json:"DAG"`

	// Dir Directory containing the DAG file
	Dir string `json:"Dir"`

	// Error Error message if any
	Error string `json:"Error"`

	// File Path to the DAG file
	File string `json:"File"`

	// Status Detailed status of a DAG run including child nodes
	Status DAGStatusDetails `json:"Status"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"Suspended"`
}

// Error Generic error response object
type Error struct {
	// Code Error code indicating the type of error
	Code ErrorCode `json:"code"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Short error message
	Message string `json:"message"`
}

// ErrorCode Error code indicating the type of error
type ErrorCode string

// GetDAGDetailsResponse Response object for getting details of a DAG
type GetDAGDetailsResponse struct {
	// DAG Detailed status information for a DAG instance
	DAG DAGStatusFileDetails `json:"DAG"`

	// Definition DAG definition
	Definition string `json:"Definition"`

	// Errors List of errors encountered during the request
	Errors []string `json:"Errors"`

	// Graph Graph data for visualization
	Graph string `json:"Graph"`

	// LogData Aggregated log data for a DAG
	LogData DAGLogData `json:"LogData"`

	// LogUrl URL to access logs directly
	LogUrl string `json:"LogUrl"`

	// ScLog Log information for the scheduler
	ScLog SchedulerLog `json:"ScLog"`

	// StepLog Log information for a specific step
	StepLog StepLog `json:"StepLog"`

	// Tab Tab name for UI navigation
	Tab string `json:"Tab"`

	// Title Title of the Page
	Title string `json:"Title"`
}

// HandlerOn Configuration for event handlers in a DAG
type HandlerOn struct {
	// Cancel Individual task within a DAG that performs a specific operation
	Cancel *Step `json:"Cancel,omitempty"`

	// Exit Individual task within a DAG that performs a specific operation
	Exit *Step `json:"Exit,omitempty"`

	// Failure Individual task within a DAG that performs a specific operation
	Failure *Step `json:"Failure,omitempty"`

	// Success Individual task within a DAG that performs a specific operation
	Success *Step `json:"Success,omitempty"`
}

// HealthResponse Response object for the health check endpoint
type HealthResponse struct {
	// Status Overall health status of the server
	Status HealthResponseStatus `json:"status"`

	// Timestamp Current server time
	Timestamp string `json:"timestamp"`

	// Uptime Server uptime in seconds
	Uptime int `json:"uptime"`

	// Version Current version of the server
	Version string `json:"version"`
}

// HealthResponseStatus Overall health status of the server
type HealthResponseStatus string

// ListTagResponse Response object for listing all tags
type ListTagResponse struct {
	// Errors List of errors encountered during the request
	Errors []string `json:"Errors"`

	// Tags List of unique tags
	Tags []string `json:"Tags"`
}

// Node Status of an individual step within a DAG run
type Node struct {
	// DoneCount Number of successful completions for repeating steps
	DoneCount int `json:"DoneCount"`

	// Error Error message if the step failed
	Error string `json:"Error"`

	// FinishedAt RFC3339 timestamp when the step finished
	FinishedAt string `json:"FinishedAt"`

	// Log Path to step-specific log file
	Log string `json:"Log"`

	// RetryCount Number of retry attempts made for this step
	RetryCount int `json:"RetryCount"`

	// StartedAt RFC3339 timestamp when the step started
	StartedAt string `json:"StartedAt"`

	// Status Numeric status code for the step
	Status int `json:"Status"`

	// StatusText Human-readable status description
	StatusText string `json:"StatusText"`

	// Step Individual task within a DAG that performs a specific operation
	Step Step `json:"Step"`
}

// PostDAGActionRequest Request body for posting an action to a DAG
type PostDAGActionRequest struct {
	// Action Action to be performed on the DAG
	Action PostDAGActionRequestAction `json:"action"`

	// Params Additional parameters for the action in JSON format
	Params *string `json:"params,omitempty"`

	// RequestId Unique request ID for the action
	RequestId *string `json:"requestId,omitempty"`

	// Step Step name if the action targets a specific step
	Step *string `json:"step,omitempty"`

	// Value Optional extra value for the action
	Value *string `json:"value,omitempty"`
}

// PostDAGActionRequestAction Action to be performed on the DAG
type PostDAGActionRequestAction string

// PostDAGActionResponse Response object for posting an action to a DAG
type PostDAGActionResponse struct {
	// NewDagID New DAG ID, if the action resulted in a new DAG
	NewDagID *string `json:"NewDagID,omitempty"`
}

// Precondition Precondition that must be satisfied before running a step or DAG
type Precondition struct {
	// Condition Expression or check to evaluate
	Condition *string `json:"Condition,omitempty"`

	// Expected Expected result of the condition evaluation
	Expected *string `json:"Expected,omitempty"`
}

// RepeatPolicy Configuration for step retry behavior
type RepeatPolicy struct {
	// Interval Time in seconds to wait between retry attempts
	Interval *int `json:"Interval,omitempty"`

	// Repeat Whether the step should be retried on failure
	Repeat *bool `json:"Repeat,omitempty"`
}

// RunStatus Numeric status code indicating current run state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
type RunStatus int

// RunStatusText Human-readable status description for the DAG run
type RunStatusText string

// Schedule Schedule configuration for DAG run
type Schedule struct {
	// Expression Cron expression or schedule pattern
	Expression string `json:"Expression"`
}

// SchedulerLog Log information for the scheduler
type SchedulerLog struct {
	// Content Log content
	Content string `json:"Content"`

	// LogFile Path to the scheduler log file
	LogFile string `json:"LogFile"`
}

// SearchDAGsMatchItem Details of a search match within a DAG
type SearchDAGsMatchItem struct {
	// Line Matching line content
	Line *string `json:"Line,omitempty"`

	// LineNumber Line number where match was found
	LineNumber *int `json:"LineNumber,omitempty"`

	// StartLine Start line for context
	StartLine *int `json:"StartLine,omitempty"`
}

// SearchDAGsResponse Response object for searching DAGs
type SearchDAGsResponse struct {
	// Errors Errors encountered during the search
	Errors *[]string `json:"Errors,omitempty"`

	// Results Search results matching the query
	Results []SearchDAGsResultItem `json:"Results"`
}

// SearchDAGsResultItem Individual search result item for a DAG
type SearchDAGsResultItem struct {
	// DAG Core DAG configuration containing workflow definition and metadata
	DAG *DAG `json:"DAG,omitempty"`

	// Matches Details of where matches were found
	Matches *[]SearchDAGsMatchItem `json:"Matches,omitempty"`

	// Name Name of the matching DAG
	Name *string `json:"Name,omitempty"`
}

// Step Individual task within a DAG that performs a specific operation
type Step struct {
	// Args List of arguments to pass to the command
	Args []string `json:"Args"`

	// CmdWithArgs Complete command string including arguments to execute
	CmdWithArgs string `json:"CmdWithArgs"`

	// Command Base command to execute without arguments
	Command string `json:"Command"`

	// Depends List of step names that must complete before this step can start
	Depends []string `json:"Depends"`

	// Description Human-readable description of what the step does
	Description string `json:"Description"`

	// Dir Working directory for executing the step's command
	Dir string `json:"Dir"`

	// MailOnError Whether to send email notifications on step failure
	MailOnError bool `json:"MailOnError"`

	// Name Unique identifier for the step within the DAG
	Name string `json:"Name"`

	// Output Variable name to store the step's output
	Output string `json:"Output"`

	// Params Parameters to pass to the sub DAG in JSON format
	Params *string `json:"Params,omitempty"`

	// Preconditions Conditions that must be met before the step can start
	Preconditions []Precondition `json:"Preconditions"`

	// RepeatPolicy Configuration for step retry behavior
	RepeatPolicy RepeatPolicy `json:"RepeatPolicy"`

	// Run Sub DAG to run
	Run *string `json:"Run,omitempty"`

	// Script Script content if the step executes a script file
	Script string `json:"Script"`

	// Stderr File path for capturing standard error
	Stderr string `json:"Stderr"`

	// Stdout File path for capturing standard output
	Stdout string `json:"Stdout"`
}

// StepLog Log information for a specific step
type StepLog struct {
	// Content Log content
	Content string `json:"Content"`

	// LogFile Path to the log file
	LogFile string `json:"LogFile"`

	// Step Status of an individual step within a DAG run
	Step Node `json:"Step"`
}

// ListDAGsParams defines parameters for ListDAGs.
type ListDAGsParams struct {
	// Page Page number (for pagination)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Name Filter DAGs by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Tag Filter DAGs by tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`
}

// CreateDAGJSONBody defines parameters for CreateDAG.
type CreateDAGJSONBody struct {
	// Name Name of the new DAG
	Name string `json:"name"`
}

// GetDAGDetailsParams defines parameters for GetDAGDetails.
type GetDAGDetailsParams struct {
	// Tab Tab name for UI navigation
	Tab *string `form:"tab,omitempty" json:"tab,omitempty"`

	// File Specific file related to the DAG
	File *string `form:"file,omitempty" json:"file,omitempty"`

	// Step Step name within the DAG
	Step *string `form:"step,omitempty" json:"step,omitempty"`
}

// SearchDAGsParams defines parameters for SearchDAGs.
type SearchDAGsParams struct {
	// Q A search query string
	Q string `form:"q" json:"q"`
}

// CreateDAGJSONRequestBody defines body for CreateDAG for application/json ContentType.
type CreateDAGJSONRequestBody CreateDAGJSONBody

// PostDAGActionJSONRequestBody defines body for PostDAGAction for application/json ContentType.
type PostDAGActionJSONRequestBody = PostDAGActionRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all DAGs
	// (GET /dags)
	ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams)
	// Create a new DAG
	// (POST /dags)
	CreateDAG(w http.ResponseWriter, r *http.Request)
	// Delete a DAG
	// (DELETE /dags/{name})
	DeleteDAG(w http.ResponseWriter, r *http.Request, name string)
	// Get DAG details
	// (GET /dags/{name})
	GetDAGDetails(w http.ResponseWriter, r *http.Request, name string, params GetDAGDetailsParams)
	// Perform an action on a DAG
	// (POST /dags/{name})
	PostDAGAction(w http.ResponseWriter, r *http.Request, name string)
	// Health check endpoint
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// Search DAGs
	// (GET /search)
	SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams)
	// List all tags
	// (GET /tags)
	ListTags(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all DAGs
// (GET /dags)
func (_ Unimplemented) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new DAG
// (POST /dags)
func (_ Unimplemented) CreateDAG(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a DAG
// (DELETE /dags/{name})
func (_ Unimplemented) DeleteDAG(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get DAG details
// (GET /dags/{name})
func (_ Unimplemented) GetDAGDetails(w http.ResponseWriter, r *http.Request, name string, params GetDAGDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Perform an action on a DAG
// (POST /dags/{name})
func (_ Unimplemented) PostDAGAction(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check endpoint
// (GET /health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search DAGs
// (GET /search)
func (_ Unimplemented) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all tags
// (GET /tags)
func (_ Unimplemented) ListTags(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListDAGs operation middleware
func (siw *ServerInterfaceWrapper) ListDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDAGsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateDAG operation middleware
func (siw *ServerInterfaceWrapper) CreateDAG(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDAG(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteDAG operation middleware
func (siw *ServerInterfaceWrapper) DeleteDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDAG(w, r, name)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGDetailsParams

	// ------------- Optional query parameter "tab" -------------

	err = runtime.BindQueryParameter("form", true, false, "tab", r.URL.Query(), &params.Tab)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tab", Err: err})
		return
	}

	// ------------- Optional query parameter "file" -------------

	err = runtime.BindQueryParameter("form", true, false, "file", r.URL.Query(), &params.File)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file", Err: err})
		return
	}

	// ------------- Optional query parameter "step" -------------

	err = runtime.BindQueryParameter("form", true, false, "step", r.URL.Query(), &params.Step)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGDetails(w, r, name, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PostDAGAction operation middleware
func (siw *ServerInterfaceWrapper) PostDAGAction(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDAGAction(w, r, name)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchDAGs operation middleware
func (siw *ServerInterfaceWrapper) SearchDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchDAGsParams

	// ------------- Required query parameter "q" -------------

	if paramValue := r.URL.Query().Get("q"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "q"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTags(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags", wrapper.ListDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags", wrapper.CreateDAG)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/dags/{name}", wrapper.DeleteDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{name}", wrapper.GetDAGDetails)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{name}", wrapper.PostDAGAction)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/search", wrapper.SearchDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tags", wrapper.ListTags)
	})

	return r
}

type ListDAGsRequestObject struct {
	Params ListDAGsParams
}

type ListDAGsResponseObject interface {
	VisitListDAGsResponse(w http.ResponseWriter) error
}

type ListDAGs200JSONResponse struct {
	// DAGs List of DAGs with their status and metadata
	DAGs []DAGStatusFile `json:"DAGs"`

	// Errors List of errors encountered during the request
	Errors *[]string `json:"Errors,omitempty"`

	// HasError Whether any errors were encountered
	HasError bool `json:"HasError"`

	// PageCount Total number of pages available
	PageCount int `json:"PageCount"`
}

func (response ListDAGs200JSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGs400JSONResponse Error

func (response ListDAGs400JSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListDAGsdefaultJSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateDAGRequestObject struct {
	Body *CreateDAGJSONRequestBody
}

type CreateDAGResponseObject interface {
	VisitCreateDAGResponse(w http.ResponseWriter) error
}

type CreateDAG201JSONResponse struct {
	// Name Name of the newly created DAG
	Name string `json:"name"`
}

func (response CreateDAG201JSONResponse) VisitCreateDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateDAG400JSONResponse Error

func (response CreateDAG400JSONResponse) VisitCreateDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateDAGdefaultJSONResponse) VisitCreateDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteDAGRequestObject struct {
	Name string `json:"name"`
}

type DeleteDAGResponseObject interface {
	VisitDeleteDAGResponse(w http.ResponseWriter) error
}

type DeleteDAG204Response struct {
}

func (response DeleteDAG204Response) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteDAG404JSONResponse Error

func (response DeleteDAG404JSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteDAGdefaultJSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGDetailsRequestObject struct {
	Name   string `json:"name"`
	Params GetDAGDetailsParams
}

type GetDAGDetailsResponseObject interface {
	VisitGetDAGDetailsResponse(w http.ResponseWriter) error
}

type GetDAGDetails200JSONResponse GetDAGDetailsResponse

func (response GetDAGDetails200JSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDetails404JSONResponse Error

func (response GetDAGDetails404JSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGDetailsdefaultJSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostDAGActionRequestObject struct {
	Name string `json:"name"`
	Body *PostDAGActionJSONRequestBody
}

type PostDAGActionResponseObject interface {
	VisitPostDAGActionResponse(w http.ResponseWriter) error
}

type PostDAGAction200JSONResponse PostDAGActionResponse

func (response PostDAGAction200JSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostDAGAction400JSONResponse Error

func (response PostDAGAction400JSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostDAGAction404JSONResponse Error

func (response PostDAGAction404JSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostDAGActiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PostDAGActiondefaultJSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse HealthResponse

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealth503JSONResponse HealthResponse

func (response GetHealth503JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetHealthdefaultJSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SearchDAGsRequestObject struct {
	Params SearchDAGsParams
}

type SearchDAGsResponseObject interface {
	VisitSearchDAGsResponse(w http.ResponseWriter) error
}

type SearchDAGs200JSONResponse SearchDAGsResponse

func (response SearchDAGs200JSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchDAGs400JSONResponse Error

func (response SearchDAGs400JSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SearchDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SearchDAGsdefaultJSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListTagsRequestObject struct {
}

type ListTagsResponseObject interface {
	VisitListTagsResponse(w http.ResponseWriter) error
}

type ListTags200JSONResponse ListTagResponse

func (response ListTags200JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTagsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListTagsdefaultJSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all DAGs
	// (GET /dags)
	ListDAGs(ctx context.Context, request ListDAGsRequestObject) (ListDAGsResponseObject, error)
	// Create a new DAG
	// (POST /dags)
	CreateDAG(ctx context.Context, request CreateDAGRequestObject) (CreateDAGResponseObject, error)
	// Delete a DAG
	// (DELETE /dags/{name})
	DeleteDAG(ctx context.Context, request DeleteDAGRequestObject) (DeleteDAGResponseObject, error)
	// Get DAG details
	// (GET /dags/{name})
	GetDAGDetails(ctx context.Context, request GetDAGDetailsRequestObject) (GetDAGDetailsResponseObject, error)
	// Perform an action on a DAG
	// (POST /dags/{name})
	PostDAGAction(ctx context.Context, request PostDAGActionRequestObject) (PostDAGActionResponseObject, error)
	// Health check endpoint
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Search DAGs
	// (GET /search)
	SearchDAGs(ctx context.Context, request SearchDAGsRequestObject) (SearchDAGsResponseObject, error)
	// List all tags
	// (GET /tags)
	ListTags(ctx context.Context, request ListTagsRequestObject) (ListTagsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListDAGs operation middleware
func (sh *strictHandler) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	var request ListDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListDAGs(ctx, request.(ListDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListDAGsResponseObject); ok {
		if err := validResponse.VisitListDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateDAG operation middleware
func (sh *strictHandler) CreateDAG(w http.ResponseWriter, r *http.Request) {
	var request CreateDAGRequestObject

	var body CreateDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDAG(ctx, request.(CreateDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateDAGResponseObject); ok {
		if err := validResponse.VisitCreateDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDAG operation middleware
func (sh *strictHandler) DeleteDAG(w http.ResponseWriter, r *http.Request, name string) {
	var request DeleteDAGRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDAG(ctx, request.(DeleteDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDAGResponseObject); ok {
		if err := validResponse.VisitDeleteDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGDetails operation middleware
func (sh *strictHandler) GetDAGDetails(w http.ResponseWriter, r *http.Request, name string, params GetDAGDetailsParams) {
	var request GetDAGDetailsRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGDetails(ctx, request.(GetDAGDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostDAGAction operation middleware
func (sh *strictHandler) PostDAGAction(w http.ResponseWriter, r *http.Request, name string) {
	var request PostDAGActionRequestObject

	request.Name = name

	var body PostDAGActionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostDAGAction(ctx, request.(PostDAGActionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDAGAction")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostDAGActionResponseObject); ok {
		if err := validResponse.VisitPostDAGActionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(w http.ResponseWriter, r *http.Request) {
	var request GetHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchDAGs operation middleware
func (sh *strictHandler) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	var request SearchDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchDAGs(ctx, request.(SearchDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchDAGsResponseObject); ok {
		if err := validResponse.VisitSearchDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTags operation middleware
func (sh *strictHandler) ListTags(w http.ResponseWriter, r *http.Request) {
	var request ListTagsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTags(ctx, request.(ListTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTagsResponseObject); ok {
		if err := validResponse.VisitListTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
