// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for ErrorCode.
const (
	ErrorCodeBadGateway      ErrorCode = "bad_gateway"
	ErrorCodeBadRequest      ErrorCode = "bad_request"
	ErrorCodeInternalError   ErrorCode = "internal_error"
	ErrorCodeNotFound        ErrorCode = "not_found"
	ErrorCodeRemoteNodeError ErrorCode = "remote_node_error"
	ErrorCodeUnauthorized    ErrorCode = "unauthorized"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusHealthy   HealthResponseStatus = "healthy"
	HealthResponseStatusUnhealthy HealthResponseStatus = "unhealthy"
)

// Defines values for PostDAGActionRequestAction.
const (
	PostDAGActionRequestActionMarkFailed  PostDAGActionRequestAction = "mark-failed"
	PostDAGActionRequestActionMarkSuccess PostDAGActionRequestAction = "mark-success"
	PostDAGActionRequestActionRename      PostDAGActionRequestAction = "rename"
	PostDAGActionRequestActionRetry       PostDAGActionRequestAction = "retry"
	PostDAGActionRequestActionSave        PostDAGActionRequestAction = "save"
	PostDAGActionRequestActionStart       PostDAGActionRequestAction = "start"
	PostDAGActionRequestActionStop        PostDAGActionRequestAction = "stop"
	PostDAGActionRequestActionSuspend     PostDAGActionRequestAction = "suspend"
)

// Defines values for RunStatus.
const (
	RunStatusN0 RunStatus = 0
	RunStatusN1 RunStatus = 1
	RunStatusN2 RunStatus = 2
	RunStatusN3 RunStatus = 3
	RunStatusN4 RunStatus = 4
)

// Defines values for RunStatusText.
const (
	RunStatusTextCancelled  RunStatusText = "cancelled"
	RunStatusTextFailed     RunStatusText = "failed"
	RunStatusTextFinished   RunStatusText = "finished"
	RunStatusTextNotStarted RunStatusText = "not started"
	RunStatusTextRunning    RunStatusText = "running"
)

// DAG Core DAG configuration containing workflow definition and metadata
type DAG struct {
	// DefaultParams Default parameter values in JSON format if not specified at runtime
	DefaultParams *string `json:"DefaultParams,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description string `json:"Description"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"Group,omitempty"`

	// Name Unique identifier for the DAG within its group
	Name string `json:"Name"`

	// Params List of parameter names that can be passed to the DAG at runtime
	Params *[]string `json:"Params,omitempty"`

	// Schedule List of scheduling expressions defining when the DAG should run
	Schedule *[]Schedule `json:"Schedule,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"Tags,omitempty"`
}

// DAGDetails Detailed DAG configuration information
type DAGDetails struct {
	// DefaultParams Default parameter values in JSON format if not specified at runtime
	DefaultParams string `json:"DefaultParams"`

	// Delay Time in seconds to wait before starting the DAG
	Delay int `json:"Delay"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description string `json:"Description"`

	// Env List of environment variables to set before executing
	Env []string `json:"Env"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group string `json:"Group"`

	// HandlerOn Configuration for event handlers in a DAG
	HandlerOn HandlerOn `json:"HandlerOn"`

	// HistRetentionDays Number of days to retain historical logs
	HistRetentionDays int `json:"HistRetentionDays"`

	// Location Path to the DAG file
	Location string `json:"Location"`

	// LogDir Directory path for storing log files
	LogDir string `json:"LogDir"`

	// MaxActiveRuns Maximum number of concurrent steps to run
	MaxActiveRuns int `json:"MaxActiveRuns"`

	// Name Unique identifier for the DAG within its group
	Name string `json:"Name"`

	// Params List of parameter names that can be passed to the DAG at runtime
	Params []string `json:"Params"`

	// Preconditions Conditions that must be met before the DAG can start
	Preconditions []Precondition `json:"Preconditions"`

	// Schedule List of scheduling expressions defining when the DAG should run
	Schedule []Schedule `json:"Schedule"`

	// Steps List of steps to execute in the DAG
	Steps []Step `json:"Steps"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags []string `json:"Tags"`
}

// DAGLogData Aggregated log data for a DAG
type DAGLogData struct {
	// GridData Grid data for visualization
	GridData []DAGLogGridItem `json:"GridData"`

	// Logs Log data
	Logs []DAGLogStatusFile `json:"Logs"`
}

// DAGLogGridItem Grid item for log visualization
type DAGLogGridItem struct {
	// Name Name of the data point
	Name string `json:"Name"`

	// Vals Values for the data point
	Vals []int `json:"Vals"`
}

// DAGLogStatusFile Log status file information
type DAGLogStatusFile struct {
	// File Path to the log file
	File string `json:"File"`

	// Status Detailed status of a DAG run including child nodes
	Status DAGStatusDetails `json:"Status"`
}

// DAGStatus Current status of a DAG run
type DAGStatus struct {
	// FinishedAt RFC 3339 timestamp when the DAG run finished
	FinishedAt string `json:"FinishedAt"`

	// Log Path to the log file
	Log *string `json:"Log,omitempty"`

	// Name Name of the DAG being executed
	Name string `json:"Name"`

	// Params Runtime parameters passed to the DAG in JSON format
	Params *string `json:"Params,omitempty"`

	// Pid Process ID of the DAG run
	Pid *int `json:"Pid,omitempty"`

	// RequestId Unique identifier for the DAG run request
	RequestId string `json:"RequestId"`

	// StartedAt RFC 3339 timestamp when the DAG run started
	StartedAt string `json:"StartedAt"`

	// Status Numeric status code indicating current run state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	Status RunStatus `json:"Status"`

	// StatusText Human-readable status description for the DAG run
	StatusText RunStatusText `json:"StatusText"`
}

// DAGStatusDetails Detailed status of a DAG run including child nodes
type DAGStatusDetails struct {
	// FinishedAt RFC3339 timestamp when the DAG run finished
	FinishedAt string `json:"FinishedAt"`

	// Log Path to the log file
	Log string `json:"Log"`

	// Name Name of the DAG
	Name string `json:"Name"`

	// Nodes Status of individual steps within the DAG
	Nodes []Node `json:"Nodes"`

	// OnCancel Status of an individual step within a DAG run
	OnCancel Node `json:"OnCancel"`

	// OnExit Status of an individual step within a DAG run
	OnExit Node `json:"OnExit"`

	// OnFailure Status of an individual step within a DAG run
	OnFailure Node `json:"OnFailure"`

	// OnSuccess Status of an individual step within a DAG run
	OnSuccess Node `json:"OnSuccess"`

	// Params Parameters in JSON format
	Params string `json:"Params"`

	// Pid Process ID of the DAG run
	Pid int `json:"Pid"`

	// RequestId Unique identifier for the run request
	RequestId string `json:"RequestId"`

	// StartedAt RFC3339 timestamp when the DAG run started
	StartedAt string `json:"StartedAt"`

	// Status Numeric status code
	Status int `json:"Status"`

	// StatusText Human-readable status description
	StatusText string `json:"StatusText"`
}

// DAGStatusFile DAG file with its status information
type DAGStatusFile struct {
	// DAG Core DAG configuration containing workflow definition and metadata
	DAG DAG `json:"DAG"`

	// Error Error message if any
	Error *string `json:"Error,omitempty"`

	// File Path to the DAG file
	File string `json:"File"`

	// Status Current status of a DAG run
	Status DAGStatus `json:"Status"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"Suspended"`
}

// DAGStatusFileDetails Detailed status information for a DAG instance
type DAGStatusFileDetails struct {
	// DAG Detailed DAG configuration information
	DAG DAGDetails `json:"DAG"`

	// Dir Directory containing the DAG file
	Dir string `json:"Dir"`

	// Error Error message if any
	Error string `json:"Error"`

	// File Path to the DAG file
	File string `json:"File"`

	// Status Detailed status of a DAG run including child nodes
	Status DAGStatusDetails `json:"Status"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"Suspended"`
}

// Error Generic error response object
type Error struct {
	// Code Error code indicating the type of error
	Code ErrorCode `json:"code"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Short error message
	Message string `json:"message"`
}

// ErrorCode Error code indicating the type of error
type ErrorCode string

// GetDAGDetailsResponse Response object for getting details of a DAG
type GetDAGDetailsResponse struct {
	// DAG Detailed status information for a DAG instance
	DAG DAGStatusFileDetails `json:"DAG"`

	// Definition DAG definition
	Definition string `json:"Definition"`

	// Errors List of errors encountered during the request
	Errors []string `json:"Errors"`

	// Graph Graph data for visualization
	Graph string `json:"Graph"`

	// LogData Aggregated log data for a DAG
	LogData DAGLogData `json:"LogData"`

	// LogUrl URL to access logs directly
	LogUrl string `json:"LogUrl"`

	// ScLog Log information for the scheduler
	ScLog SchedulerLog `json:"ScLog"`

	// StepLog Log information for a specific step
	StepLog StepLog `json:"StepLog"`

	// Tab Tab name for UI navigation
	Tab string `json:"Tab"`

	// Title Title of the Page
	Title string `json:"Title"`
}

// HandlerOn Configuration for event handlers in a DAG
type HandlerOn struct {
	// Cancel Individual task within a DAG that performs a specific operation
	Cancel *Step `json:"Cancel,omitempty"`

	// Exit Individual task within a DAG that performs a specific operation
	Exit *Step `json:"Exit,omitempty"`

	// Failure Individual task within a DAG that performs a specific operation
	Failure *Step `json:"Failure,omitempty"`

	// Success Individual task within a DAG that performs a specific operation
	Success *Step `json:"Success,omitempty"`
}

// HealthResponse Response object for the health check endpoint
type HealthResponse struct {
	// Status Overall health status of the server
	Status HealthResponseStatus `json:"status"`

	// Timestamp Current server time
	Timestamp string `json:"timestamp"`

	// Uptime Server uptime in seconds
	Uptime int `json:"uptime"`

	// Version Current version of the server
	Version string `json:"version"`
}

// HealthResponseStatus Overall health status of the server
type HealthResponseStatus string

// ListTagResponse Response object for listing all tags
type ListTagResponse struct {
	// Errors List of errors encountered during the request
	Errors []string `json:"Errors"`

	// Tags List of unique tags
	Tags []string `json:"Tags"`
}

// Node Status of an individual step within a DAG run
type Node struct {
	// DoneCount Number of successful completions for repeating steps
	DoneCount int `json:"DoneCount"`

	// Error Error message if the step failed
	Error string `json:"Error"`

	// FinishedAt RFC3339 timestamp when the step finished
	FinishedAt string `json:"FinishedAt"`

	// Log Path to step-specific log file
	Log string `json:"Log"`

	// RetryCount Number of retry attempts made for this step
	RetryCount int `json:"RetryCount"`

	// StartedAt RFC3339 timestamp when the step started
	StartedAt string `json:"StartedAt"`

	// Status Numeric status code for the step
	Status int `json:"Status"`

	// StatusText Human-readable status description
	StatusText string `json:"StatusText"`

	// Step Individual task within a DAG that performs a specific operation
	Step Step `json:"Step"`
}

// PostDAGActionRequest Request body for posting an action to a DAG
type PostDAGActionRequest struct {
	// Action Action to be performed on the DAG
	Action PostDAGActionRequestAction `json:"action"`

	// Params Additional parameters for the action in JSON format
	Params *string `json:"params,omitempty"`

	// RequestId Unique request ID for the action
	RequestId *string `json:"requestId,omitempty"`

	// Step Step name if the action targets a specific step
	Step *string `json:"step,omitempty"`

	// Value Optional extra value for the action
	Value *string `json:"value,omitempty"`
}

// PostDAGActionRequestAction Action to be performed on the DAG
type PostDAGActionRequestAction string

// PostDAGActionResponse Response object for posting an action to a DAG
type PostDAGActionResponse struct {
	// NewDagID New DAG ID, if the action resulted in a new DAG
	NewDagID *string `json:"NewDagID,omitempty"`
}

// Precondition Precondition that must be satisfied before running a step or DAG
type Precondition struct {
	// Condition Expression or check to evaluate
	Condition *string `json:"Condition,omitempty"`

	// Expected Expected result of the condition evaluation
	Expected *string `json:"Expected,omitempty"`
}

// RepeatPolicy Configuration for step retry behavior
type RepeatPolicy struct {
	// Interval Time in seconds to wait between retry attempts
	Interval *int `json:"Interval,omitempty"`

	// Repeat Whether the step should be retried on failure
	Repeat *bool `json:"Repeat,omitempty"`
}

// RunStatus Numeric status code indicating current run state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
type RunStatus int

// RunStatusText Human-readable status description for the DAG run
type RunStatusText string

// Schedule Schedule configuration for DAG run
type Schedule struct {
	// Expression Cron expression or schedule pattern
	Expression string `json:"Expression"`
}

// SchedulerLog Log information for the scheduler
type SchedulerLog struct {
	// Content Log content
	Content string `json:"Content"`

	// LogFile Path to the scheduler log file
	LogFile string `json:"LogFile"`
}

// SearchDAGsMatchItem Details of a search match within a DAG
type SearchDAGsMatchItem struct {
	// Line Matching line content
	Line *string `json:"Line,omitempty"`

	// LineNumber Line number where match was found
	LineNumber *int `json:"LineNumber,omitempty"`

	// StartLine Start line for context
	StartLine *int `json:"StartLine,omitempty"`
}

// SearchDAGsResponse Response object for searching DAGs
type SearchDAGsResponse struct {
	// Errors Errors encountered during the search
	Errors *[]string `json:"Errors,omitempty"`

	// Results Search results matching the query
	Results []SearchDAGsResultItem `json:"Results"`
}

// SearchDAGsResultItem Individual search result item for a DAG
type SearchDAGsResultItem struct {
	// DAG Core DAG configuration containing workflow definition and metadata
	DAG *DAG `json:"DAG,omitempty"`

	// Matches Details of where matches were found
	Matches *[]SearchDAGsMatchItem `json:"Matches,omitempty"`

	// Name Name of the matching DAG
	Name *string `json:"Name,omitempty"`
}

// Step Individual task within a DAG that performs a specific operation
type Step struct {
	// Args List of arguments to pass to the command
	Args []string `json:"Args"`

	// CmdWithArgs Complete command string including arguments to execute
	CmdWithArgs string `json:"CmdWithArgs"`

	// Command Base command to execute without arguments
	Command string `json:"Command"`

	// Depends List of step names that must complete before this step can start
	Depends []string `json:"Depends"`

	// Description Human-readable description of what the step does
	Description string `json:"Description"`

	// Dir Working directory for executing the step's command
	Dir string `json:"Dir"`

	// MailOnError Whether to send email notifications on step failure
	MailOnError bool `json:"MailOnError"`

	// Name Unique identifier for the step within the DAG
	Name string `json:"Name"`

	// Output Variable name to store the step's output
	Output string `json:"Output"`

	// Params Parameters to pass to the sub DAG in JSON format
	Params *string `json:"Params,omitempty"`

	// Preconditions Conditions that must be met before the step can start
	Preconditions []Precondition `json:"Preconditions"`

	// RepeatPolicy Configuration for step retry behavior
	RepeatPolicy RepeatPolicy `json:"RepeatPolicy"`

	// Run Sub DAG to run
	Run *string `json:"Run,omitempty"`

	// Script Script content if the step executes a script file
	Script string `json:"Script"`

	// Stderr File path for capturing standard error
	Stderr string `json:"Stderr"`

	// Stdout File path for capturing standard output
	Stdout string `json:"Stdout"`
}

// StepLog Log information for a specific step
type StepLog struct {
	// Content Log content
	Content string `json:"Content"`

	// LogFile Path to the log file
	LogFile string `json:"LogFile"`

	// Step Status of an individual step within a DAG run
	Step Node `json:"Step"`
}

// ListDAGsParams defines parameters for ListDAGs.
type ListDAGsParams struct {
	// Page Page number (for pagination)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Name Filter DAGs by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Tag Filter DAGs by tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`
}

// CreateDAGJSONBody defines parameters for CreateDAG.
type CreateDAGJSONBody struct {
	// Name Name of the new DAG
	Name string `json:"name"`
}

// GetDAGDetailsParams defines parameters for GetDAGDetails.
type GetDAGDetailsParams struct {
	// Tab Tab name for UI navigation
	Tab *string `form:"tab,omitempty" json:"tab,omitempty"`

	// File Specific file related to the DAG
	File *string `form:"file,omitempty" json:"file,omitempty"`

	// Step Step name within the DAG
	Step *string `form:"step,omitempty" json:"step,omitempty"`
}

// SearchDAGsParams defines parameters for SearchDAGs.
type SearchDAGsParams struct {
	// Q A search query string
	Q string `form:"q" json:"q"`
}

// CreateDAGJSONRequestBody defines body for CreateDAG for application/json ContentType.
type CreateDAGJSONRequestBody CreateDAGJSONBody

// PostDAGActionJSONRequestBody defines body for PostDAGAction for application/json ContentType.
type PostDAGActionJSONRequestBody = PostDAGActionRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all DAGs
	// (GET /dags)
	ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams)
	// Create a new DAG
	// (POST /dags)
	CreateDAG(w http.ResponseWriter, r *http.Request)
	// Delete a DAG
	// (DELETE /dags/{dagId})
	DeleteDAG(w http.ResponseWriter, r *http.Request, dagId string)
	// Get DAG details
	// (GET /dags/{dagId})
	GetDAGDetails(w http.ResponseWriter, r *http.Request, dagId string, params GetDAGDetailsParams)
	// Perform an action on a DAG
	// (POST /dags/{dagId})
	PostDAGAction(w http.ResponseWriter, r *http.Request, dagId string)
	// Health check endpoint
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// Search DAGs
	// (GET /search)
	SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams)
	// List all tags
	// (GET /tags)
	ListTags(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all DAGs
// (GET /dags)
func (_ Unimplemented) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new DAG
// (POST /dags)
func (_ Unimplemented) CreateDAG(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a DAG
// (DELETE /dags/{dagId})
func (_ Unimplemented) DeleteDAG(w http.ResponseWriter, r *http.Request, dagId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get DAG details
// (GET /dags/{dagId})
func (_ Unimplemented) GetDAGDetails(w http.ResponseWriter, r *http.Request, dagId string, params GetDAGDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Perform an action on a DAG
// (POST /dags/{dagId})
func (_ Unimplemented) PostDAGAction(w http.ResponseWriter, r *http.Request, dagId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check endpoint
// (GET /health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search DAGs
// (GET /search)
func (_ Unimplemented) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all tags
// (GET /tags)
func (_ Unimplemented) ListTags(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListDAGs operation middleware
func (siw *ServerInterfaceWrapper) ListDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDAGsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateDAG operation middleware
func (siw *ServerInterfaceWrapper) CreateDAG(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDAG(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteDAG operation middleware
func (siw *ServerInterfaceWrapper) DeleteDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagId" -------------
	var dagId string

	err = runtime.BindStyledParameterWithOptions("simple", "dagId", chi.URLParam(r, "dagId"), &dagId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDAG(w, r, dagId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagId" -------------
	var dagId string

	err = runtime.BindStyledParameterWithOptions("simple", "dagId", chi.URLParam(r, "dagId"), &dagId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGDetailsParams

	// ------------- Optional query parameter "tab" -------------

	err = runtime.BindQueryParameter("form", true, false, "tab", r.URL.Query(), &params.Tab)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tab", Err: err})
		return
	}

	// ------------- Optional query parameter "file" -------------

	err = runtime.BindQueryParameter("form", true, false, "file", r.URL.Query(), &params.File)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file", Err: err})
		return
	}

	// ------------- Optional query parameter "step" -------------

	err = runtime.BindQueryParameter("form", true, false, "step", r.URL.Query(), &params.Step)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGDetails(w, r, dagId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PostDAGAction operation middleware
func (siw *ServerInterfaceWrapper) PostDAGAction(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagId" -------------
	var dagId string

	err = runtime.BindStyledParameterWithOptions("simple", "dagId", chi.URLParam(r, "dagId"), &dagId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDAGAction(w, r, dagId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchDAGs operation middleware
func (siw *ServerInterfaceWrapper) SearchDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchDAGsParams

	// ------------- Required query parameter "q" -------------

	if paramValue := r.URL.Query().Get("q"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "q"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTags(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags", wrapper.ListDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags", wrapper.CreateDAG)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/dags/{dagId}", wrapper.DeleteDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{dagId}", wrapper.GetDAGDetails)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{dagId}", wrapper.PostDAGAction)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/search", wrapper.SearchDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tags", wrapper.ListTags)
	})

	return r
}

type ListDAGsRequestObject struct {
	Params ListDAGsParams
}

type ListDAGsResponseObject interface {
	VisitListDAGsResponse(w http.ResponseWriter) error
}

type ListDAGs200JSONResponse struct {
	// DAGs List of DAGs with their status and metadata
	DAGs []DAGStatusFile `json:"DAGs"`

	// Errors List of errors encountered during the request
	Errors *[]string `json:"Errors,omitempty"`

	// HasError Whether any errors were encountered
	HasError bool `json:"HasError"`

	// PageCount Total number of pages available
	PageCount int `json:"PageCount"`
}

func (response ListDAGs200JSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGs400JSONResponse Error

func (response ListDAGs400JSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListDAGsdefaultJSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateDAGRequestObject struct {
	Body *CreateDAGJSONRequestBody
}

type CreateDAGResponseObject interface {
	VisitCreateDAGResponse(w http.ResponseWriter) error
}

type CreateDAG201JSONResponse struct {
	// Name Name of the newly created DAG
	Name string `json:"name"`
}

func (response CreateDAG201JSONResponse) VisitCreateDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateDAG400JSONResponse Error

func (response CreateDAG400JSONResponse) VisitCreateDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateDAGdefaultJSONResponse) VisitCreateDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteDAGRequestObject struct {
	DagId string `json:"dagId"`
}

type DeleteDAGResponseObject interface {
	VisitDeleteDAGResponse(w http.ResponseWriter) error
}

type DeleteDAG200JSONResponse map[string]interface{}

func (response DeleteDAG200JSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDAG404JSONResponse Error

func (response DeleteDAG404JSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteDAGdefaultJSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGDetailsRequestObject struct {
	DagId  string `json:"dagId"`
	Params GetDAGDetailsParams
}

type GetDAGDetailsResponseObject interface {
	VisitGetDAGDetailsResponse(w http.ResponseWriter) error
}

type GetDAGDetails200JSONResponse GetDAGDetailsResponse

func (response GetDAGDetails200JSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDetails404JSONResponse Error

func (response GetDAGDetails404JSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGDetailsdefaultJSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostDAGActionRequestObject struct {
	DagId string `json:"dagId"`
	Body  *PostDAGActionJSONRequestBody
}

type PostDAGActionResponseObject interface {
	VisitPostDAGActionResponse(w http.ResponseWriter) error
}

type PostDAGAction200JSONResponse PostDAGActionResponse

func (response PostDAGAction200JSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostDAGAction400JSONResponse Error

func (response PostDAGAction400JSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostDAGAction404JSONResponse Error

func (response PostDAGAction404JSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostDAGActiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PostDAGActiondefaultJSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse HealthResponse

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealth503JSONResponse HealthResponse

func (response GetHealth503JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetHealthdefaultJSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SearchDAGsRequestObject struct {
	Params SearchDAGsParams
}

type SearchDAGsResponseObject interface {
	VisitSearchDAGsResponse(w http.ResponseWriter) error
}

type SearchDAGs200JSONResponse SearchDAGsResponse

func (response SearchDAGs200JSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchDAGs400JSONResponse Error

func (response SearchDAGs400JSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SearchDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SearchDAGsdefaultJSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListTagsRequestObject struct {
}

type ListTagsResponseObject interface {
	VisitListTagsResponse(w http.ResponseWriter) error
}

type ListTags200JSONResponse ListTagResponse

func (response ListTags200JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTagsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListTagsdefaultJSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all DAGs
	// (GET /dags)
	ListDAGs(ctx context.Context, request ListDAGsRequestObject) (ListDAGsResponseObject, error)
	// Create a new DAG
	// (POST /dags)
	CreateDAG(ctx context.Context, request CreateDAGRequestObject) (CreateDAGResponseObject, error)
	// Delete a DAG
	// (DELETE /dags/{dagId})
	DeleteDAG(ctx context.Context, request DeleteDAGRequestObject) (DeleteDAGResponseObject, error)
	// Get DAG details
	// (GET /dags/{dagId})
	GetDAGDetails(ctx context.Context, request GetDAGDetailsRequestObject) (GetDAGDetailsResponseObject, error)
	// Perform an action on a DAG
	// (POST /dags/{dagId})
	PostDAGAction(ctx context.Context, request PostDAGActionRequestObject) (PostDAGActionResponseObject, error)
	// Health check endpoint
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Search DAGs
	// (GET /search)
	SearchDAGs(ctx context.Context, request SearchDAGsRequestObject) (SearchDAGsResponseObject, error)
	// List all tags
	// (GET /tags)
	ListTags(ctx context.Context, request ListTagsRequestObject) (ListTagsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListDAGs operation middleware
func (sh *strictHandler) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	var request ListDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListDAGs(ctx, request.(ListDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListDAGsResponseObject); ok {
		if err := validResponse.VisitListDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateDAG operation middleware
func (sh *strictHandler) CreateDAG(w http.ResponseWriter, r *http.Request) {
	var request CreateDAGRequestObject

	var body CreateDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDAG(ctx, request.(CreateDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateDAGResponseObject); ok {
		if err := validResponse.VisitCreateDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDAG operation middleware
func (sh *strictHandler) DeleteDAG(w http.ResponseWriter, r *http.Request, dagId string) {
	var request DeleteDAGRequestObject

	request.DagId = dagId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDAG(ctx, request.(DeleteDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDAGResponseObject); ok {
		if err := validResponse.VisitDeleteDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGDetails operation middleware
func (sh *strictHandler) GetDAGDetails(w http.ResponseWriter, r *http.Request, dagId string, params GetDAGDetailsParams) {
	var request GetDAGDetailsRequestObject

	request.DagId = dagId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGDetails(ctx, request.(GetDAGDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostDAGAction operation middleware
func (sh *strictHandler) PostDAGAction(w http.ResponseWriter, r *http.Request, dagId string) {
	var request PostDAGActionRequestObject

	request.DagId = dagId

	var body PostDAGActionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostDAGAction(ctx, request.(PostDAGActionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDAGAction")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostDAGActionResponseObject); ok {
		if err := validResponse.VisitPostDAGActionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(w http.ResponseWriter, r *http.Request) {
	var request GetHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchDAGs operation middleware
func (sh *strictHandler) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	var request SearchDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchDAGs(ctx, request.(SearchDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchDAGsResponseObject); ok {
		if err := validResponse.VisitSearchDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTags operation middleware
func (sh *strictHandler) ListTags(w http.ResponseWriter, r *http.Request) {
	var request ListTagsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTags(ctx, request.(ListTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTagsResponseObject); ok {
		if err := validResponse.VisitListTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
