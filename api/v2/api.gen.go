// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	ApiTokenScopes  = "apiToken.Scopes"
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for CoordinatorInstanceStatus.
const (
	CoordinatorInstanceStatusActive   CoordinatorInstanceStatus = "active"
	CoordinatorInstanceStatusInactive CoordinatorInstanceStatus = "inactive"
	CoordinatorInstanceStatusUnknown  CoordinatorInstanceStatus = "unknown"
)

// Defines values for ErrorCode.
const (
	ErrorCodeAlreadyExists   ErrorCode = "already_exists"
	ErrorCodeBadGateway      ErrorCode = "bad_gateway"
	ErrorCodeBadRequest      ErrorCode = "bad_request"
	ErrorCodeForbidden       ErrorCode = "forbidden"
	ErrorCodeInternalError   ErrorCode = "internal_error"
	ErrorCodeMaxRunReached   ErrorCode = "max_run_reached"
	ErrorCodeNotFound        ErrorCode = "not_found"
	ErrorCodeNotRunning      ErrorCode = "not_running"
	ErrorCodeRemoteNodeError ErrorCode = "remote_node_error"
	ErrorCodeUnauthorized    ErrorCode = "unauthorized"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusHealthy   HealthResponseStatus = "healthy"
	HealthResponseStatusUnhealthy HealthResponseStatus = "unhealthy"
)

// Defines values for NodeStatus.
const (
	NodeStatusCancelled      NodeStatus = 3
	NodeStatusFailed         NodeStatus = 2
	NodeStatusNotStarted     NodeStatus = 0
	NodeStatusPartialSuccess NodeStatus = 6
	NodeStatusRunning        NodeStatus = 1
	NodeStatusSkipped        NodeStatus = 5
	NodeStatusSuccess        NodeStatus = 4
)

// Defines values for NodeStatusLabel.
const (
	NodeStatusLabelCancelled      NodeStatusLabel = "cancelled"
	NodeStatusLabelFailed         NodeStatusLabel = "failed"
	NodeStatusLabelFinished       NodeStatusLabel = "finished"
	NodeStatusLabelNotStarted     NodeStatusLabel = "not started"
	NodeStatusLabelPartialSuccess NodeStatusLabel = "partial success"
	NodeStatusLabelRunning        NodeStatusLabel = "running"
	NodeStatusLabelSkipped        NodeStatusLabel = "skipped"
)

// Defines values for QueueType.
const (
	QueueTypeDagBased QueueType = "dag-based"
	QueueTypeGlobal   QueueType = "global"
)

// Defines values for RepeatMode.
const (
	RepeatModeUntil RepeatMode = "until"
	RepeatModeWhile RepeatMode = "while"
)

// Defines values for SchedulerInstanceStatus.
const (
	SchedulerInstanceStatusActive   SchedulerInstanceStatus = "active"
	SchedulerInstanceStatusInactive SchedulerInstanceStatus = "inactive"
	SchedulerInstanceStatusUnknown  SchedulerInstanceStatus = "unknown"
)

// Defines values for Status.
const (
	StatusCancelled      Status = 3
	StatusFailed         Status = 2
	StatusNotStarted     Status = 0
	StatusPartialSuccess Status = 6
	StatusQueued         Status = 5
	StatusRunning        Status = 1
	StatusSuccess        Status = 4
)

// Defines values for StatusLabel.
const (
	StatusLabelCancelled      StatusLabel = "cancelled"
	StatusLabelFailed         StatusLabel = "failed"
	StatusLabelFinished       StatusLabel = "finished"
	StatusLabelNotStarted     StatusLabel = "not started"
	StatusLabelPartialSuccess StatusLabel = "partial success"
	StatusLabelQueued         StatusLabel = "queued"
	StatusLabelRunning        StatusLabel = "running"
)

// Defines values for Stream.
const (
	StreamStderr Stream = "stderr"
	StreamStdout Stream = "stdout"
)

// Defines values for WorkerHealthStatus.
const (
	WorkerHealthStatusHealthy   WorkerHealthStatus = "healthy"
	WorkerHealthStatusUnhealthy WorkerHealthStatus = "unhealthy"
	WorkerHealthStatusWarning   WorkerHealthStatus = "warning"
)

// Defines values for ListDAGsParamsSort.
const (
	ListDAGsParamsSortName    ListDAGsParamsSort = "name"
	ListDAGsParamsSortNextRun ListDAGsParamsSort = "nextRun"
)

// Defines values for ListDAGsParamsOrder.
const (
	ListDAGsParamsOrderAsc  ListDAGsParamsOrder = "asc"
	ListDAGsParamsOrderDesc ListDAGsParamsOrder = "desc"
)

// ChildDAGRun Metadata for a child DAG-run
type ChildDAGRun struct {
	// DagRunId Unique identifier for the DAG-run
	DagRunId DAGRunId `json:"dagRunId"`

	// Params Parameters passed to the child DAG-run in JSON format
	Params string `json:"params"`
}

// Condition Precondition that must be satisfied before running a step or DAG-run
type Condition struct {
	// Condition Expression or check to evaluate
	Condition string `json:"condition"`

	// Error Error message if the condition is not met
	Error *string `json:"error,omitempty"`

	// Expected Expected result of the condition evaluation
	Expected *string `json:"expected,omitempty"`

	// Matched Whether the condition was met
	Matched *bool `json:"matched,omitempty"`
}

// CoordinatorInstance Coordinator instance status information
type CoordinatorInstance struct {
	// Host Hostname where coordinator is running
	Host string `json:"host"`

	// InstanceId Unique identifier of the coordinator instance
	InstanceId string `json:"instanceId"`

	// Port Port number the coordinator is listening on
	Port int `json:"port"`

	// StartedAt RFC3339 timestamp when coordinator started
	StartedAt string `json:"startedAt"`

	// Status Coordinator status
	Status CoordinatorInstanceStatus `json:"status"`
}

// CoordinatorInstanceStatus Coordinator status
type CoordinatorInstanceStatus string

// CoordinatorStatusResponse Response containing status of all coordinator instances
type CoordinatorStatusResponse struct {
	// Coordinators List of all registered coordinator instances
	Coordinators []CoordinatorInstance `json:"coordinators"`
}

// DAG Core DAG configuration containing definition and metadata
type DAG struct {
	// DefaultParams Default parameter values in JSON format if not specified at DAG-run creation
	DefaultParams *string `json:"defaultParams,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description *string `json:"description,omitempty"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"group,omitempty"`

	// MaxActiveRuns Maximum number of concurrent DAG-runs allowed from this DAG
	MaxActiveRuns *int `json:"maxActiveRuns,omitempty"`

	// Name Logical name of the DAG
	Name string `json:"name"`

	// Params List of parameter names that can be passed to DAG-runs created from this DAG
	Params *[]string `json:"params,omitempty"`

	// Queue Name of the queue this DAG is assigned to. If not specified, the DAG name itself becomes the queue name
	Queue *string `json:"queue,omitempty"`

	// RunConfig Configuration for controlling user interactions when starting DAG runs
	RunConfig *RunConfig `json:"runConfig,omitempty"`

	// Schedule List of scheduling expressions defining when DAG-runs should be created from this DAG
	Schedule *[]Schedule `json:"schedule,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"tags,omitempty"`
}

// DAGDetails Detailed DAG configuration information
type DAGDetails struct {
	// DefaultParams Default parameter values in JSON format if not specified at DAG-run creation
	DefaultParams *string `json:"defaultParams,omitempty"`

	// Delay Time in seconds to wait before starting a DAG-run
	Delay *int `json:"delay,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description *string `json:"description,omitempty"`

	// Env List of environment variables to set before executing a DAG-run
	Env *[]string `json:"env,omitempty"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"group,omitempty"`

	// HandlerOn Configuration for event handlers in a DAG-run
	HandlerOn *HandlerOn `json:"handlerOn,omitempty"`

	// HistRetentionDays Number of days to retain historical logs
	HistRetentionDays *int `json:"histRetentionDays,omitempty"`

	// LogDir Directory path for storing log files
	LogDir *string `json:"logDir,omitempty"`

	// MaxActiveRuns Maximum number of concurrent DAG-runs allowed from this DAG
	MaxActiveRuns *int `json:"maxActiveRuns,omitempty"`

	// MaxActiveSteps Maximum number of concurrent steps allowed in a DAG run
	MaxActiveSteps *int `json:"maxActiveSteps,omitempty"`

	// Name Unique identifier for the DAG within its group
	Name string `json:"name"`

	// Params List of parameter names that can be passed to DAG-runs created from this DAG
	Params *[]string `json:"params,omitempty"`

	// Preconditions Conditions that must be met before a DAG-run can start
	Preconditions *[]Condition `json:"preconditions,omitempty"`

	// Queue Name of the queue this DAG is assigned to. If not specified, the DAG name itself becomes the queue name
	Queue *string `json:"queue,omitempty"`

	// RunConfig Configuration for controlling user interactions when starting DAG runs
	RunConfig *RunConfig `json:"runConfig,omitempty"`

	// Schedule List of scheduling expressions defining when DAG-runs should be created from this DAG
	Schedule *[]Schedule `json:"schedule,omitempty"`

	// Steps List of steps to execute in DAG-runs created from this DAG
	Steps *[]Step `json:"steps,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"tags,omitempty"`
}

// DAGFile DAG file with its status information
type DAGFile struct {
	// Dag Core DAG configuration containing definition and metadata
	Dag DAG `json:"dag"`

	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// FileName File ID of the DAG file
	FileName string `json:"fileName"`

	// LatestDAGRun Current status of a DAG-run
	LatestDAGRun DAGRunSummary `json:"latestDAGRun"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"suspended"`
}

// DAGFileName Name of the DAG file
type DAGFileName = string

// DAGGridItem Grid item for visualizing DAG-run execution history
type DAGGridItem struct {
	// History Status of the step ordered by time
	History []NodeStatus `json:"history"`

	// Name Name of the step
	Name string `json:"name"`
}

// DAGName Name of the DAG
type DAGName = string

// DAGRunDetails defines model for DAGRunDetails.
type DAGRunDetails struct {
	// DagRunId Unique identifier for the DAG-run
	DagRunId DAGRunId `json:"dagRunId"`

	// FinishedAt RFC 3339 timestamp when the DAG-run finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to the log file
	Log string `json:"log"`

	// Name Name of the DAG
	Name DAGName `json:"name"`

	// Nodes Status of individual steps within the DAG-run
	Nodes []Node `json:"nodes"`

	// OnCancel Status of an individual step within a DAG-run
	OnCancel *Node `json:"onCancel,omitempty"`

	// OnExit Status of an individual step within a DAG-run
	OnExit *Node `json:"onExit,omitempty"`

	// OnFailure Status of an individual step within a DAG-run
	OnFailure *Node `json:"onFailure,omitempty"`

	// OnSuccess Status of an individual step within a DAG-run
	OnSuccess *Node `json:"onSuccess,omitempty"`

	// Params Runtime parameters passed to the DAG-run in JSON format
	Params *string `json:"params,omitempty"`

	// ParentDAGRunId ID of the parent DAG-run
	ParentDAGRunId *string `json:"parentDAGRunId,omitempty"`

	// ParentDAGRunName Name of the parent DAG-run
	ParentDAGRunName *string `json:"parentDAGRunName,omitempty"`

	// Preconditions List of preconditions that must be met before the DAG-run can start
	Preconditions *[]Condition `json:"preconditions,omitempty"`

	// QueuedAt RFC 3339 timestamp when the DAG-run was queued
	QueuedAt *string `json:"queuedAt,omitempty"`

	// RootDAGRunId ID of the root DAG-run
	RootDAGRunId string `json:"rootDAGRunId"`

	// RootDAGRunName Name of the root DAG-run
	RootDAGRunName string `json:"rootDAGRunName"`

	// StartedAt RFC 3339 timestamp when the DAG-run started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current DAG-run state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Queued"
	// 6: "Partial Success"
	Status Status `json:"status"`

	// StatusLabel Human-readable status description for the DAG-run
	StatusLabel StatusLabel `json:"statusLabel"`
}

// DAGRunId Unique identifier for the DAG-run
type DAGRunId = string

// DAGRunSummary Current status of a DAG-run
type DAGRunSummary struct {
	// DagRunId Unique identifier for the DAG-run
	DagRunId DAGRunId `json:"dagRunId"`

	// FinishedAt RFC 3339 timestamp when the DAG-run finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to the log file
	Log string `json:"log"`

	// Name Name of the DAG
	Name DAGName `json:"name"`

	// Params Runtime parameters passed to the DAG-run in JSON format
	Params *string `json:"params,omitempty"`

	// ParentDAGRunId ID of the parent DAG-run
	ParentDAGRunId *string `json:"parentDAGRunId,omitempty"`

	// ParentDAGRunName Name of the parent DAG-run
	ParentDAGRunName *string `json:"parentDAGRunName,omitempty"`

	// QueuedAt RFC 3339 timestamp when the DAG-run was queued
	QueuedAt *string `json:"queuedAt,omitempty"`

	// RootDAGRunId ID of the root DAG-run
	RootDAGRunId string `json:"rootDAGRunId"`

	// RootDAGRunName Name of the root DAG-run
	RootDAGRunName string `json:"rootDAGRunName"`

	// StartedAt RFC 3339 timestamp when the DAG-run started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current DAG-run state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Queued"
	// 6: "Partial Success"
	Status Status `json:"status"`

	// StatusLabel Human-readable status description for the DAG-run
	StatusLabel StatusLabel `json:"statusLabel"`
}

// Error Generic error response object
type Error struct {
	// Code Error code indicating the type of error
	Code ErrorCode `json:"code"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Short error message
	Message string `json:"message"`
}

// ErrorCode Error code indicating the type of error
type ErrorCode string

// HandlerOn Configuration for event handlers in a DAG-run
type HandlerOn struct {
	// Cancel Individual task definition that performs a specific operation in a DAG-run
	Cancel *Step `json:"cancel,omitempty"`

	// Exit Individual task definition that performs a specific operation in a DAG-run
	Exit *Step `json:"exit,omitempty"`

	// Failure Individual task definition that performs a specific operation in a DAG-run
	Failure *Step `json:"failure,omitempty"`

	// Success Individual task definition that performs a specific operation in a DAG-run
	Success *Step `json:"success,omitempty"`
}

// HealthResponse Response object for the health check endpoint
type HealthResponse struct {
	// Status Overall health status of the server
	Status HealthResponseStatus `json:"status"`

	// Timestamp Current server time
	Timestamp string `json:"timestamp"`

	// Uptime Server uptime in seconds
	Uptime int `json:"uptime"`

	// Version Current version of the server
	Version string `json:"version"`
}

// HealthResponseStatus Overall health status of the server
type HealthResponseStatus string

// ListTagResponse Response object for listing all tags
type ListTagResponse struct {
	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// Tags List of unique tags
	Tags []string `json:"tags"`
}

// LocalDag defines model for LocalDag.
type LocalDag struct {
	// Dag Detailed DAG configuration information
	Dag *DAGDetails `json:"dag,omitempty"`

	// Errors List of errors encountered while processing the local DAG
	Errors []string `json:"errors"`

	// Name Name of the local DAG
	Name string `json:"name"`
}

// Log Log information for the execution
type Log struct {
	// Content Log content
	Content string `json:"content"`

	// HasMore Whether there are more lines available
	HasMore *bool `json:"hasMore,omitempty"`

	// IsEstimate Whether the line count is an estimate
	IsEstimate *bool `json:"isEstimate,omitempty"`

	// LineCount Number of lines returned
	LineCount *int `json:"lineCount,omitempty"`

	// TotalLines Total number of lines in the log file
	TotalLines *int `json:"totalLines,omitempty"`
}

// Node Status of an individual step within a DAG-run
type Node struct {
	// Children List of child DAG-runs associated with this step
	Children *[]ChildDAGRun `json:"children,omitempty"`

	// ChildrenRepeated List of repeated child DAG-runs when using repeatPolicy
	ChildrenRepeated *[]ChildDAGRun `json:"childrenRepeated,omitempty"`

	// DoneCount Number of successful completions for repeating steps
	DoneCount int `json:"doneCount"`

	// Error Error message if the step failed
	Error *string `json:"error,omitempty"`

	// FinishedAt RFC3339 timestamp when the step finished
	FinishedAt string `json:"finishedAt"`

	// RetryCount Number of retry attempts made for this step
	RetryCount int `json:"retryCount"`

	// StartedAt RFC3339 timestamp when the step started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current node state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Skipped"
	// 6: "Partial Success"
	Status NodeStatus `json:"status"`

	// StatusLabel Human-readable status description for the node
	StatusLabel NodeStatusLabel `json:"statusLabel"`

	// Stderr Path to the standard error log file for this step
	Stderr string `json:"stderr"`

	// Stdout Path to the standard output log file for this step
	Stdout string `json:"stdout"`

	// Step Individual task definition that performs a specific operation in a DAG-run
	Step Step `json:"step"`
}

// NodeStatus Numeric status code indicating current node state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
// 5: "Skipped"
// 6: "Partial Success"
type NodeStatus int

// NodeStatusLabel Human-readable status description for the node
type NodeStatusLabel string

// Pagination defines model for Pagination.
type Pagination struct {
	// CurrentPage current page number
	CurrentPage int `json:"currentPage"`

	// NextPage next page number
	NextPage int `json:"nextPage"`

	// PrevPage previous page number
	PrevPage int `json:"prevPage"`

	// TotalPages total number of pages
	TotalPages int `json:"totalPages"`

	// TotalRecords total number of records
	TotalRecords int `json:"totalRecords"`
}

// Queue A queue/process group with its active DAG-runs
type Queue struct {
	// MaxConcurrency Maximum number of concurrent runs allowed. For 'global' queues, this is the configured maxConcurrency. For 'dag-based' queues, this is the DAG's maxActiveRuns (default 1)
	MaxConcurrency *int `json:"maxConcurrency,omitempty"`

	// Name Name of the queue (global queue name or DAG name if no queue specified)
	Name string `json:"name"`

	// Queued List of DAG-runs waiting to execute
	Queued []DAGRunSummary `json:"queued"`

	// Running List of currently running DAG-runs
	Running []DAGRunSummary `json:"running"`

	// Type Type of queue - 'global' if explicitly defined, 'dag-based' if using DAG name
	Type QueueType `json:"type"`
}

// QueueType Type of queue - 'global' if explicitly defined, 'dag-based' if using DAG name
type QueueType string

// QueuesResponse Response containing all queues with their active DAG-runs
type QueuesResponse struct {
	// Queues List of all queues with their running and queued DAG-runs
	Queues []Queue `json:"queues"`

	// Summary Summary statistics across all queues
	Summary QueuesSummary `json:"summary"`
}

// QueuesSummary Summary statistics across all queues
type QueuesSummary struct {
	// TotalCapacity Sum of all queue maxConcurrency values
	TotalCapacity int `json:"totalCapacity"`

	// TotalQueued Total DAG-runs waiting in queues
	TotalQueued int `json:"totalQueued"`

	// TotalQueues Total number of active queues
	TotalQueues int `json:"totalQueues"`

	// TotalRunning Total DAG-runs currently executing
	TotalRunning int `json:"totalRunning"`

	// UtilizationPercentage System-wide utilization (totalRunning / totalCapacity * 100)
	UtilizationPercentage float32 `json:"utilizationPercentage"`
}

// RepeatMode Repeat execution mode for steps
type RepeatMode string

// RepeatPolicy Configuration for step repeat behavior
type RepeatPolicy struct {
	Backoff *RepeatPolicy_Backoff `json:"backoff,omitempty"`

	// Condition Precondition that must be satisfied before running a step or DAG-run
	Condition *Condition `json:"condition,omitempty"`

	// ExitCode List of exit codes that trigger repeat behavior
	ExitCode *[]int `json:"exitCode,omitempty"`

	// Interval Time in seconds to wait between repeat attempts
	Interval *int `json:"interval,omitempty"`

	// Limit Maximum number of times to repeat the step
	Limit *int `json:"limit,omitempty"`

	// MaxIntervalSec Maximum interval in seconds (caps exponential growth)
	MaxIntervalSec *int `json:"maxIntervalSec,omitempty"`

	// Repeat Repeat execution mode for steps
	Repeat *RepeatMode `json:"repeat,omitempty"`
}

// RepeatPolicyBackoff0 When true, uses default multiplier of 2.0
type RepeatPolicyBackoff0 = bool

// RepeatPolicyBackoff1 Custom exponential backoff multiplier
type RepeatPolicyBackoff1 = float32

// RepeatPolicy_Backoff defines model for RepeatPolicy.Backoff.
type RepeatPolicy_Backoff struct {
	union json.RawMessage
}

// RunConfig Configuration for controlling user interactions when starting DAG runs
type RunConfig struct {
	// DisableParamEdit Disable parameter editing when starting the DAG
	DisableParamEdit bool `json:"disableParamEdit"`

	// DisableRunIdEdit Disable custom run ID specification
	DisableRunIdEdit bool `json:"disableRunIdEdit"`
}

// RunningTask Information about a task currently being executed
type RunningTask struct {
	// DagName Name of the DAG being executed
	DagName string `json:"dagName"`

	// DagRunId ID of the DAG run being executed
	DagRunId string `json:"dagRunId"`

	// ParentDagRunId ID of the parent DAG run
	ParentDagRunId *string `json:"parentDagRunId,omitempty"`

	// ParentDagRunName Name of the parent DAG run
	ParentDagRunName *string `json:"parentDagRunName,omitempty"`

	// RootDagRunId ID of the root DAG run
	RootDagRunId *string `json:"rootDagRunId,omitempty"`

	// RootDagRunName Name of the root DAG run
	RootDagRunName *string `json:"rootDagRunName,omitempty"`

	// StartedAt RFC3339 timestamp when the task started
	StartedAt string `json:"startedAt"`
}

// Schedule Schedule configuration for DAG-run creation
type Schedule struct {
	// Expression Cron expression or schedule pattern
	Expression string `json:"expression"`
}

// SchedulerInstance Scheduler instance status information
type SchedulerInstance struct {
	// Host Hostname where scheduler is running
	Host string `json:"host"`

	// InstanceId Unique identifier of the scheduler instance
	InstanceId string `json:"instanceId"`

	// StartedAt RFC3339 timestamp when scheduler started
	StartedAt string `json:"startedAt"`

	// Status Scheduler status (active = holds lock and scheduling)
	Status SchedulerInstanceStatus `json:"status"`
}

// SchedulerInstanceStatus Scheduler status (active = holds lock and scheduling)
type SchedulerInstanceStatus string

// SchedulerStatusResponse Response containing status of all scheduler instances
type SchedulerStatusResponse struct {
	// Schedulers List of all registered scheduler instances
	Schedulers []SchedulerInstance `json:"schedulers"`
}

// SearchDAGsMatchItem Details of a search match within a DAG definition
type SearchDAGsMatchItem struct {
	// Line Matching line content
	Line string `json:"line"`

	// LineNumber Line number where match was found
	LineNumber int `json:"lineNumber"`

	// StartLine Start line for context
	StartLine int `json:"startLine"`
}

// SearchResultItem Individual search result item for a DAG
type SearchResultItem struct {
	// Dag Core DAG configuration containing definition and metadata
	Dag DAG `json:"dag"`

	// Matches Details of where matches were found
	Matches []SearchDAGsMatchItem `json:"matches"`

	// Name Name of the matching DAG
	Name string `json:"name"`
}

// Status Numeric status code indicating current DAG-run state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
// 5: "Queued"
// 6: "Partial Success"
type Status int

// StatusLabel Human-readable status description for the DAG-run
type StatusLabel string

// Step Individual task definition that performs a specific operation in a DAG-run
type Step struct {
	// Args List of arguments to pass to the command
	Args *[]string `json:"args,omitempty"`

	// CmdWithArgs Complete command string including arguments to execute
	CmdWithArgs *string `json:"cmdWithArgs,omitempty"`

	// Command Base command to execute without arguments
	Command *string `json:"command,omitempty"`

	// Depends List of step names that must complete before this step can start
	Depends *[]string `json:"depends,omitempty"`

	// Description Human-readable description of what the step does
	Description *string `json:"description,omitempty"`

	// Dir Working directory for executing the step's command
	Dir *string `json:"dir,omitempty"`

	// Id Optional short identifier for the step. Can be used in variable references like ${id.stdout} to access step properties. Must be unique within the DAG if specified
	Id *string `json:"id,omitempty"`

	// MailOnError Whether to send email notifications on step failure
	MailOnError *bool `json:"mailOnError,omitempty"`

	// Name Unique identifier for the step within the DAG-run
	Name string `json:"name"`

	// Output Variable name to store the step's output
	Output *string `json:"output,omitempty"`

	// Parallel Configuration for parallel execution of the step
	Parallel *struct {
		// Items Array of items to process in parallel. Can be a static array or a reference to a variable containing an array
		Items *Step_Parallel_Items `json:"items,omitempty"`

		// MaxConcurrent Maximum number of parallel executions. Default is 10 if not specified
		MaxConcurrent *int `json:"maxConcurrent,omitempty"`
	} `json:"parallel,omitempty"`

	// Params Parameters to pass to the child DAG-run in JSON format
	Params *string `json:"params,omitempty"`

	// Preconditions Conditions that must be met before the step can start
	Preconditions *[]Condition `json:"preconditions,omitempty"`

	// RepeatPolicy Configuration for step repeat behavior
	RepeatPolicy *RepeatPolicy `json:"repeatPolicy,omitempty"`

	// Run The name of the DAG to run as a child DAG-run
	Run *string `json:"run,omitempty"`

	// Script Script content if the step executes a script file
	Script *string `json:"script,omitempty"`

	// Stderr File path for capturing standard error
	Stderr *string `json:"stderr,omitempty"`

	// Stdout File path for capturing standard output
	Stdout *string `json:"stdout,omitempty"`
}

// StepParallelItems0 defines model for .
type StepParallelItems0 = []string

// StepParallelItems1 defines model for .
type StepParallelItems1 = string

// Step_Parallel_Items Array of items to process in parallel. Can be a static array or a reference to a variable containing an array
type Step_Parallel_Items struct {
	union json.RawMessage
}

// Stream defines model for Stream.
type Stream string

// UnixTimestamp Unix timestamp in seconds
type UnixTimestamp = int64

// Worker Information about a distributed worker
type Worker struct {
	// BusyPollers Number of pollers currently executing tasks
	BusyPollers int `json:"busyPollers"`

	// HealthStatus Health status of the worker based on heartbeat recency
	HealthStatus WorkerHealthStatus `json:"healthStatus"`

	// Id Unique identifier for the worker
	Id string `json:"id"`

	// Labels Key-value pairs of labels assigned to the worker
	Labels map[string]string `json:"labels"`

	// LastHeartbeatAt RFC3339 timestamp of the last heartbeat received from this worker
	LastHeartbeatAt string `json:"lastHeartbeatAt"`

	// RunningTasks List of tasks currently being executed by this worker
	RunningTasks []RunningTask `json:"runningTasks"`

	// TotalPollers Total number of pollers configured for this worker
	TotalPollers int `json:"totalPollers"`
}

// WorkerHealthStatus Health status of the worker based on heartbeat recency
type WorkerHealthStatus string

// WorkersListResponse Response object for listing distributed workers
type WorkersListResponse struct {
	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// Workers List of distributed workers
	Workers []Worker `json:"workers"`
}

// DAGRunIdSearch Unique identifier for the DAG-run
type DAGRunIdSearch = DAGRunId

// DAGRunName defines model for DAGRunName.
type DAGRunName = string

// DateTimeFrom Unix timestamp in seconds
type DateTimeFrom = UnixTimestamp

// DateTimeTo Unix timestamp in seconds
type DateTimeTo = UnixTimestamp

// Head defines model for Head.
type Head = int

// Limit defines model for Limit.
type Limit = int

// Offset defines model for Offset.
type Offset = int

// Page defines model for Page.
type Page = int

// PerPage defines model for PerPage.
type PerPage = int

// RemoteNode defines model for RemoteNode.
type RemoteNode = string

// StepName defines model for StepName.
type StepName = string

// Tail defines model for Tail.
type Tail = int

// ListDAGRunsParams defines parameters for ListDAGRuns.
type ListDAGRunsParams struct {
	// Status status of the DAG-run
	Status *Status `form:"status,omitempty" json:"status,omitempty"`

	// FromDate start datetime for filtering DAG-runs in ISO 8601 format with timezone
	FromDate *DateTimeFrom `form:"fromDate,omitempty" json:"fromDate,omitempty"`

	// ToDate end datetime for filtering DAG-runs in ISO 8601 format with timezone
	ToDate *DateTimeTo `form:"toDate,omitempty" json:"toDate,omitempty"`

	// DagRunId ID of the DAG-run or 'latest' to get the most recent DAG-run
	DagRunId *DAGRunIdSearch `form:"dagRunId,omitempty" json:"dagRunId,omitempty"`

	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Name Filter DAG-runs by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// ExecuteDAGRunFromSpecJSONBody defines parameters for ExecuteDAGRunFromSpec.
type ExecuteDAGRunFromSpecJSONBody struct {
	// DagRunId Optional ID for the DAG-run; if omitted, a new one is generated
	DagRunId *string `json:"dagRunId,omitempty"`

	// Name Optional name to use when the spec omits a name
	Name *string `json:"name,omitempty"`

	// Params Parameters to pass to the DAG-run in JSON format
	Params *string `json:"params,omitempty"`

	// Singleton If true, prevent starting if a DAG with the same name is already running (returns 409)
	Singleton *bool `json:"singleton,omitempty"`

	// Spec DAG specification in YAML format
	Spec string `json:"spec"`
}

// ExecuteDAGRunFromSpecParams defines parameters for ExecuteDAGRunFromSpec.
type ExecuteDAGRunFromSpecParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// ListDAGRunsByNameParams defines parameters for ListDAGRunsByName.
type ListDAGRunsByNameParams struct {
	// Status status of the DAG-run
	Status *Status `form:"status,omitempty" json:"status,omitempty"`

	// FromDate start datetime for filtering DAG-runs in ISO 8601 format with timezone
	FromDate *DateTimeFrom `form:"fromDate,omitempty" json:"fromDate,omitempty"`

	// ToDate end datetime for filtering DAG-runs in ISO 8601 format with timezone
	ToDate *DateTimeTo `form:"toDate,omitempty" json:"toDate,omitempty"`

	// DagRunId ID of the DAG-run or 'latest' to get the most recent DAG-run
	DagRunId *DAGRunIdSearch `form:"dagRunId,omitempty" json:"dagRunId,omitempty"`

	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGRunDetailsParams defines parameters for GetDAGRunDetails.
type GetDAGRunDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetChildDAGRunDetailsParams defines parameters for GetChildDAGRunDetails.
type GetChildDAGRunDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetChildDAGRunLogParams defines parameters for GetChildDAGRunLog.
type GetChildDAGRunLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Tail Number of lines to return from the end of the file
	Tail *Tail `form:"tail,omitempty" json:"tail,omitempty"`

	// Head Number of lines to return from the beginning of the file
	Head *Head `form:"head,omitempty" json:"head,omitempty"`

	// Offset Line number to start reading from (1-based)
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of lines to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetChildDAGRunStepLogParams defines parameters for GetChildDAGRunStepLog.
type GetChildDAGRunStepLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Tail Number of lines to return from the end of the file
	Tail *Tail `form:"tail,omitempty" json:"tail,omitempty"`

	// Head Number of lines to return from the beginning of the file
	Head *Head `form:"head,omitempty" json:"head,omitempty"`

	// Offset Line number to start reading from (1-based)
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of lines to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Stream Whether to return stdout or stderr logs
	Stream *Stream `form:"stream,omitempty" json:"stream,omitempty"`
}

// UpdateChildDAGRunStepStatusJSONBody defines parameters for UpdateChildDAGRunStepStatus.
type UpdateChildDAGRunStepStatusJSONBody struct {
	// Status Numeric status code indicating current node state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Skipped"
	// 6: "Partial Success"
	Status NodeStatus `json:"status"`
}

// UpdateChildDAGRunStepStatusParams defines parameters for UpdateChildDAGRunStepStatus.
type UpdateChildDAGRunStepStatusParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// DequeueDAGRunParams defines parameters for DequeueDAGRun.
type DequeueDAGRunParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGRunLogParams defines parameters for GetDAGRunLog.
type GetDAGRunLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Tail Number of lines to return from the end of the file
	Tail *Tail `form:"tail,omitempty" json:"tail,omitempty"`

	// Head Number of lines to return from the beginning of the file
	Head *Head `form:"head,omitempty" json:"head,omitempty"`

	// Offset Line number to start reading from (1-based)
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of lines to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// RetryDAGRunJSONBody defines parameters for RetryDAGRun.
type RetryDAGRunJSONBody struct {
	// DagRunId ID of the DAG-run to retry
	DagRunId string `json:"dagRunId"`

	// StepName Optional. If provided, only this step will be retried.
	StepName *string `json:"stepName,omitempty"`
}

// RetryDAGRunParams defines parameters for RetryDAGRun.
type RetryDAGRunParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGRunStepLogParams defines parameters for GetDAGRunStepLog.
type GetDAGRunStepLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Tail Number of lines to return from the end of the file
	Tail *Tail `form:"tail,omitempty" json:"tail,omitempty"`

	// Head Number of lines to return from the beginning of the file
	Head *Head `form:"head,omitempty" json:"head,omitempty"`

	// Offset Line number to start reading from (1-based)
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of lines to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Stream Whether to return stdout or stderr logs
	Stream *Stream `form:"stream,omitempty" json:"stream,omitempty"`
}

// UpdateDAGRunStepStatusJSONBody defines parameters for UpdateDAGRunStepStatus.
type UpdateDAGRunStepStatusJSONBody struct {
	// Status Numeric status code indicating current node state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Skipped"
	// 6: "Partial Success"
	Status NodeStatus `json:"status"`
}

// UpdateDAGRunStepStatusParams defines parameters for UpdateDAGRunStepStatus.
type UpdateDAGRunStepStatusParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// TerminateDAGRunParams defines parameters for TerminateDAGRun.
type TerminateDAGRunParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// ListDAGsParams defines parameters for ListDAGs.
type ListDAGsParams struct {
	// Page page number of items to fetch (default is 1)
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage number of items per page (default is 30, max is 100)
	PerPage *PerPage `form:"perPage,omitempty" json:"perPage,omitempty"`

	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Name Filter DAGs by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Tag Filter DAGs by tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Sort Field to sort by:
	// - `name`: Sort alphabetically by DAG name (case-insensitive)
	// - `nextRun`: Sort by next scheduled run time. DAGs with earlier next run times appear first in ascending order. DAGs without schedules appear last.
	Sort *ListDAGsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Sort order (ascending or descending)
	Order *ListDAGsParamsOrder `form:"order,omitempty" json:"order,omitempty"`
}

// ListDAGsParamsSort defines parameters for ListDAGs.
type ListDAGsParamsSort string

// ListDAGsParamsOrder defines parameters for ListDAGs.
type ListDAGsParamsOrder string

// CreateNewDAGJSONBody defines parameters for CreateNewDAG.
type CreateNewDAGJSONBody struct {
	// Name Name of the DAG
	Name DAGName `json:"name"`

	// Spec Optional DAG spec in YAML format to initialize the DAG. If provided, the spec will be validated before creation.
	Spec *string `json:"spec,omitempty"`
}

// CreateNewDAGParams defines parameters for CreateNewDAG.
type CreateNewDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// SearchDAGsParams defines parameters for SearchDAGs.
type SearchDAGsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Q A search query string
	Q string `form:"q" json:"q"`
}

// GetAllDAGTagsParams defines parameters for GetAllDAGTags.
type GetAllDAGTagsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// ValidateDAGSpecJSONBody defines parameters for ValidateDAGSpec.
type ValidateDAGSpecJSONBody struct {
	// Name Optional name to use when the spec omits a name
	Name *string `json:"name,omitempty"`

	// Spec DAG specification in YAML format
	Spec string `json:"spec"`
}

// ValidateDAGSpecParams defines parameters for ValidateDAGSpec.
type ValidateDAGSpecParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// DeleteDAGParams defines parameters for DeleteDAG.
type DeleteDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGDetailsParams defines parameters for GetDAGDetails.
type GetDAGDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGDAGRunHistoryParams defines parameters for GetDAGDAGRunHistory.
type GetDAGDAGRunHistoryParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGDAGRunDetailsParams defines parameters for GetDAGDAGRunDetails.
type GetDAGDAGRunDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// EnqueueDAGDAGRunJSONBody defines parameters for EnqueueDAGDAGRun.
type EnqueueDAGDAGRunJSONBody struct {
	// DagRunId Optional ID for the DAG-run, if not provided a new one will be generated
	DagRunId *string `json:"dagRunId,omitempty"`

	// Params Parameters to pass to the DAG-run in JSON format
	Params *string `json:"params,omitempty"`

	// Queue Override the DAG-level queue definition
	Queue *string `json:"queue,omitempty"`
}

// EnqueueDAGDAGRunParams defines parameters for EnqueueDAGDAGRun.
type EnqueueDAGDAGRunParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// RenameDAGJSONBody defines parameters for RenameDAG.
type RenameDAGJSONBody struct {
	// NewFileName New file name for the DAG
	NewFileName string `json:"newFileName"`
}

// RenameDAGParams defines parameters for RenameDAG.
type RenameDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGSpecParams defines parameters for GetDAGSpec.
type GetDAGSpecParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// UpdateDAGSpecJSONBody defines parameters for UpdateDAGSpec.
type UpdateDAGSpecJSONBody struct {
	// Spec The new DAG spec in YAML format
	Spec string `json:"spec"`
}

// UpdateDAGSpecParams defines parameters for UpdateDAGSpec.
type UpdateDAGSpecParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// ExecuteDAGJSONBody defines parameters for ExecuteDAG.
type ExecuteDAGJSONBody struct {
	// DagRunId Optional ID for the DAG-run, if not provided a new one will be generated
	DagRunId *string `json:"dagRunId,omitempty"`

	// Params Parameters to pass to the DAG-run in JSON format
	Params *string `json:"params,omitempty"`

	// Singleton If true, prevent starting if DAG is already running (returns 409 conflict)
	Singleton *bool `json:"singleton,omitempty"`
}

// ExecuteDAGParams defines parameters for ExecuteDAG.
type ExecuteDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// StopAllDAGRunsParams defines parameters for StopAllDAGRuns.
type StopAllDAGRunsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// UpdateDAGSuspensionStateJSONBody defines parameters for UpdateDAGSuspensionState.
type UpdateDAGSuspensionStateJSONBody struct {
	// Suspend Suspend status to set for the DAG
	Suspend bool `json:"suspend"`
}

// UpdateDAGSuspensionStateParams defines parameters for UpdateDAGSuspensionState.
type UpdateDAGSuspensionStateParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// ListQueuesParams defines parameters for ListQueues.
type ListQueuesParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetCoordinatorStatusParams defines parameters for GetCoordinatorStatus.
type GetCoordinatorStatusParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetSchedulerStatusParams defines parameters for GetSchedulerStatus.
type GetSchedulerStatusParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetWorkersParams defines parameters for GetWorkers.
type GetWorkersParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// ExecuteDAGRunFromSpecJSONRequestBody defines body for ExecuteDAGRunFromSpec for application/json ContentType.
type ExecuteDAGRunFromSpecJSONRequestBody ExecuteDAGRunFromSpecJSONBody

// UpdateChildDAGRunStepStatusJSONRequestBody defines body for UpdateChildDAGRunStepStatus for application/json ContentType.
type UpdateChildDAGRunStepStatusJSONRequestBody UpdateChildDAGRunStepStatusJSONBody

// RetryDAGRunJSONRequestBody defines body for RetryDAGRun for application/json ContentType.
type RetryDAGRunJSONRequestBody RetryDAGRunJSONBody

// UpdateDAGRunStepStatusJSONRequestBody defines body for UpdateDAGRunStepStatus for application/json ContentType.
type UpdateDAGRunStepStatusJSONRequestBody UpdateDAGRunStepStatusJSONBody

// CreateNewDAGJSONRequestBody defines body for CreateNewDAG for application/json ContentType.
type CreateNewDAGJSONRequestBody CreateNewDAGJSONBody

// ValidateDAGSpecJSONRequestBody defines body for ValidateDAGSpec for application/json ContentType.
type ValidateDAGSpecJSONRequestBody ValidateDAGSpecJSONBody

// EnqueueDAGDAGRunJSONRequestBody defines body for EnqueueDAGDAGRun for application/json ContentType.
type EnqueueDAGDAGRunJSONRequestBody EnqueueDAGDAGRunJSONBody

// RenameDAGJSONRequestBody defines body for RenameDAG for application/json ContentType.
type RenameDAGJSONRequestBody RenameDAGJSONBody

// UpdateDAGSpecJSONRequestBody defines body for UpdateDAGSpec for application/json ContentType.
type UpdateDAGSpecJSONRequestBody UpdateDAGSpecJSONBody

// ExecuteDAGJSONRequestBody defines body for ExecuteDAG for application/json ContentType.
type ExecuteDAGJSONRequestBody ExecuteDAGJSONBody

// UpdateDAGSuspensionStateJSONRequestBody defines body for UpdateDAGSuspensionState for application/json ContentType.
type UpdateDAGSuspensionStateJSONRequestBody UpdateDAGSuspensionStateJSONBody

// AsRepeatPolicyBackoff0 returns the union data inside the RepeatPolicy_Backoff as a RepeatPolicyBackoff0
func (t RepeatPolicy_Backoff) AsRepeatPolicyBackoff0() (RepeatPolicyBackoff0, error) {
	var body RepeatPolicyBackoff0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepeatPolicyBackoff0 overwrites any union data inside the RepeatPolicy_Backoff as the provided RepeatPolicyBackoff0
func (t *RepeatPolicy_Backoff) FromRepeatPolicyBackoff0(v RepeatPolicyBackoff0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepeatPolicyBackoff0 performs a merge with any union data inside the RepeatPolicy_Backoff, using the provided RepeatPolicyBackoff0
func (t *RepeatPolicy_Backoff) MergeRepeatPolicyBackoff0(v RepeatPolicyBackoff0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRepeatPolicyBackoff1 returns the union data inside the RepeatPolicy_Backoff as a RepeatPolicyBackoff1
func (t RepeatPolicy_Backoff) AsRepeatPolicyBackoff1() (RepeatPolicyBackoff1, error) {
	var body RepeatPolicyBackoff1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepeatPolicyBackoff1 overwrites any union data inside the RepeatPolicy_Backoff as the provided RepeatPolicyBackoff1
func (t *RepeatPolicy_Backoff) FromRepeatPolicyBackoff1(v RepeatPolicyBackoff1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepeatPolicyBackoff1 performs a merge with any union data inside the RepeatPolicy_Backoff, using the provided RepeatPolicyBackoff1
func (t *RepeatPolicy_Backoff) MergeRepeatPolicyBackoff1(v RepeatPolicyBackoff1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepeatPolicy_Backoff) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RepeatPolicy_Backoff) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStepParallelItems0 returns the union data inside the Step_Parallel_Items as a StepParallelItems0
func (t Step_Parallel_Items) AsStepParallelItems0() (StepParallelItems0, error) {
	var body StepParallelItems0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStepParallelItems0 overwrites any union data inside the Step_Parallel_Items as the provided StepParallelItems0
func (t *Step_Parallel_Items) FromStepParallelItems0(v StepParallelItems0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStepParallelItems0 performs a merge with any union data inside the Step_Parallel_Items, using the provided StepParallelItems0
func (t *Step_Parallel_Items) MergeStepParallelItems0(v StepParallelItems0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStepParallelItems1 returns the union data inside the Step_Parallel_Items as a StepParallelItems1
func (t Step_Parallel_Items) AsStepParallelItems1() (StepParallelItems1, error) {
	var body StepParallelItems1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStepParallelItems1 overwrites any union data inside the Step_Parallel_Items as the provided StepParallelItems1
func (t *Step_Parallel_Items) FromStepParallelItems1(v StepParallelItems1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStepParallelItems1 performs a merge with any union data inside the Step_Parallel_Items, using the provided StepParallelItems1
func (t *Step_Parallel_Items) MergeStepParallelItems1(v StepParallelItems1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Step_Parallel_Items) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Step_Parallel_Items) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all DAG-runs
	// (GET /dag-runs)
	ListDAGRuns(w http.ResponseWriter, r *http.Request, params ListDAGRunsParams)
	// Create and execute a DAG-run from inline spec
	// (POST /dag-runs)
	ExecuteDAGRunFromSpec(w http.ResponseWriter, r *http.Request, params ExecuteDAGRunFromSpecParams)
	// List all DAG-runs with a specific name
	// (GET /dag-runs/{name})
	ListDAGRunsByName(w http.ResponseWriter, r *http.Request, name DAGRunName, params ListDAGRunsByNameParams)
	// Retrieve detailed status of a DAG-run
	// (GET /dag-runs/{name}/{dagRunId})
	GetDAGRunDetails(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params GetDAGRunDetailsParams)
	// Retrieve detailed status of a child DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId})
	GetChildDAGRunDetails(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, params GetChildDAGRunDetailsParams)
	// Retrieve log for a specific child DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/log)
	GetChildDAGRunLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, params GetChildDAGRunLogParams)
	// Retrieve log for a specific step in a child DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/log)
	GetChildDAGRunStepLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, stepName StepName, params GetChildDAGRunStepLogParams)
	// Manually update a step's execution status in a child DAG-run
	// (PATCH /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/status)
	UpdateChildDAGRunStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, stepName StepName, params UpdateChildDAGRunStepStatusParams)
	// Dequeue a queued DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/dequeue)
	DequeueDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params DequeueDAGRunParams)
	// Retrieve full execution log of a DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/log)
	GetDAGRunLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params GetDAGRunLogParams)
	// Retry DAG-run execution
	// (POST /dag-runs/{name}/{dagRunId}/retry)
	RetryDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params RetryDAGRunParams)
	// Retrieve log for a specific step in a DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/steps/{stepName}/log)
	GetDAGRunStepLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, stepName StepName, params GetDAGRunStepLogParams)
	// Manually update a step's execution status
	// (PATCH /dag-runs/{name}/{dagRunId}/steps/{stepName}/status)
	UpdateDAGRunStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, stepName StepName, params UpdateDAGRunStepStatusParams)
	// Terminate a running DAG-run
	// (POST /dag-runs/{name}/{dagRunId}/stop)
	TerminateDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params TerminateDAGRunParams)
	// List all available DAGs
	// (GET /dags)
	ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams)
	// Create a new DAG definition
	// (POST /dags)
	CreateNewDAG(w http.ResponseWriter, r *http.Request, params CreateNewDAGParams)
	// Search DAGs
	// (GET /dags/search)
	SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams)
	// List all available DAG tags
	// (GET /dags/tags)
	GetAllDAGTags(w http.ResponseWriter, r *http.Request, params GetAllDAGTagsParams)
	// Validate a DAG specification
	// (POST /dags/validate)
	ValidateDAGSpec(w http.ResponseWriter, r *http.Request, params ValidateDAGSpecParams)
	// Delete an existing DAG
	// (DELETE /dags/{fileName})
	DeleteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params DeleteDAGParams)
	// Retrieve comprehensive DAG information
	// (GET /dags/{fileName})
	GetDAGDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDetailsParams)
	// Retrieve execution history of a DAG
	// (GET /dags/{fileName}/dag-runs)
	GetDAGDAGRunHistory(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDAGRunHistoryParams)
	// Get detailed status of a specific DAG-run
	// (GET /dags/{fileName}/dag-runs/{dagRunId})
	GetDAGDAGRunDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, dagRunId DAGRunId, params GetDAGDAGRunDetailsParams)
	// Enqueue a DAG-run from DAG
	// (POST /dags/{fileName}/enqueue)
	EnqueueDAGDAGRun(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params EnqueueDAGDAGRunParams)
	// Change DAG file ID
	// (POST /dags/{fileName}/rename)
	RenameDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RenameDAGParams)
	// Retrieve DAG specification
	// (GET /dags/{fileName}/spec)
	GetDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGSpecParams)
	// Update DAG spec
	// (PUT /dags/{fileName}/spec)
	UpdateDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSpecParams)
	// Create and execute a DAG-run from DAG
	// (POST /dags/{fileName}/start)
	ExecuteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params ExecuteDAGParams)
	// Stop all running instances of a DAG
	// (POST /dags/{fileName}/stop-all)
	StopAllDAGRuns(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params StopAllDAGRunsParams)
	// Toggle DAG suspension state
	// (POST /dags/{fileName}/suspend)
	UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSuspensionStateParams)
	// Check server health status
	// (GET /health)
	GetHealthStatus(w http.ResponseWriter, r *http.Request)
	// Get Prometheus metrics
	// (GET /metrics)
	GetMetrics(w http.ResponseWriter, r *http.Request)
	// List all execution queues with active DAG-runs
	// (GET /queues)
	ListQueues(w http.ResponseWriter, r *http.Request, params ListQueuesParams)
	// Get coordinator service status
	// (GET /services/coordinator)
	GetCoordinatorStatus(w http.ResponseWriter, r *http.Request, params GetCoordinatorStatusParams)
	// Get scheduler service status
	// (GET /services/scheduler)
	GetSchedulerStatus(w http.ResponseWriter, r *http.Request, params GetSchedulerStatusParams)
	// List distributed workers
	// (GET /workers)
	GetWorkers(w http.ResponseWriter, r *http.Request, params GetWorkersParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all DAG-runs
// (GET /dag-runs)
func (_ Unimplemented) ListDAGRuns(w http.ResponseWriter, r *http.Request, params ListDAGRunsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create and execute a DAG-run from inline spec
// (POST /dag-runs)
func (_ Unimplemented) ExecuteDAGRunFromSpec(w http.ResponseWriter, r *http.Request, params ExecuteDAGRunFromSpecParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all DAG-runs with a specific name
// (GET /dag-runs/{name})
func (_ Unimplemented) ListDAGRunsByName(w http.ResponseWriter, r *http.Request, name DAGRunName, params ListDAGRunsByNameParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve detailed status of a DAG-run
// (GET /dag-runs/{name}/{dagRunId})
func (_ Unimplemented) GetDAGRunDetails(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params GetDAGRunDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve detailed status of a child DAG-run
// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId})
func (_ Unimplemented) GetChildDAGRunDetails(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, params GetChildDAGRunDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve log for a specific child DAG-run
// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/log)
func (_ Unimplemented) GetChildDAGRunLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, params GetChildDAGRunLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve log for a specific step in a child DAG-run
// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/log)
func (_ Unimplemented) GetChildDAGRunStepLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, stepName StepName, params GetChildDAGRunStepLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Manually update a step's execution status in a child DAG-run
// (PATCH /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/status)
func (_ Unimplemented) UpdateChildDAGRunStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, stepName StepName, params UpdateChildDAGRunStepStatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Dequeue a queued DAG-run
// (GET /dag-runs/{name}/{dagRunId}/dequeue)
func (_ Unimplemented) DequeueDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params DequeueDAGRunParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve full execution log of a DAG-run
// (GET /dag-runs/{name}/{dagRunId}/log)
func (_ Unimplemented) GetDAGRunLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params GetDAGRunLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retry DAG-run execution
// (POST /dag-runs/{name}/{dagRunId}/retry)
func (_ Unimplemented) RetryDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params RetryDAGRunParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve log for a specific step in a DAG-run
// (GET /dag-runs/{name}/{dagRunId}/steps/{stepName}/log)
func (_ Unimplemented) GetDAGRunStepLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, stepName StepName, params GetDAGRunStepLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Manually update a step's execution status
// (PATCH /dag-runs/{name}/{dagRunId}/steps/{stepName}/status)
func (_ Unimplemented) UpdateDAGRunStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, stepName StepName, params UpdateDAGRunStepStatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Terminate a running DAG-run
// (POST /dag-runs/{name}/{dagRunId}/stop)
func (_ Unimplemented) TerminateDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params TerminateDAGRunParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all available DAGs
// (GET /dags)
func (_ Unimplemented) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new DAG definition
// (POST /dags)
func (_ Unimplemented) CreateNewDAG(w http.ResponseWriter, r *http.Request, params CreateNewDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search DAGs
// (GET /dags/search)
func (_ Unimplemented) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all available DAG tags
// (GET /dags/tags)
func (_ Unimplemented) GetAllDAGTags(w http.ResponseWriter, r *http.Request, params GetAllDAGTagsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Validate a DAG specification
// (POST /dags/validate)
func (_ Unimplemented) ValidateDAGSpec(w http.ResponseWriter, r *http.Request, params ValidateDAGSpecParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an existing DAG
// (DELETE /dags/{fileName})
func (_ Unimplemented) DeleteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params DeleteDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve comprehensive DAG information
// (GET /dags/{fileName})
func (_ Unimplemented) GetDAGDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve execution history of a DAG
// (GET /dags/{fileName}/dag-runs)
func (_ Unimplemented) GetDAGDAGRunHistory(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDAGRunHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get detailed status of a specific DAG-run
// (GET /dags/{fileName}/dag-runs/{dagRunId})
func (_ Unimplemented) GetDAGDAGRunDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, dagRunId DAGRunId, params GetDAGDAGRunDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Enqueue a DAG-run from DAG
// (POST /dags/{fileName}/enqueue)
func (_ Unimplemented) EnqueueDAGDAGRun(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params EnqueueDAGDAGRunParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change DAG file ID
// (POST /dags/{fileName}/rename)
func (_ Unimplemented) RenameDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RenameDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve DAG specification
// (GET /dags/{fileName}/spec)
func (_ Unimplemented) GetDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGSpecParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update DAG spec
// (PUT /dags/{fileName}/spec)
func (_ Unimplemented) UpdateDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSpecParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create and execute a DAG-run from DAG
// (POST /dags/{fileName}/start)
func (_ Unimplemented) ExecuteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params ExecuteDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Stop all running instances of a DAG
// (POST /dags/{fileName}/stop-all)
func (_ Unimplemented) StopAllDAGRuns(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params StopAllDAGRunsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Toggle DAG suspension state
// (POST /dags/{fileName}/suspend)
func (_ Unimplemented) UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSuspensionStateParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Check server health status
// (GET /health)
func (_ Unimplemented) GetHealthStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Prometheus metrics
// (GET /metrics)
func (_ Unimplemented) GetMetrics(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all execution queues with active DAG-runs
// (GET /queues)
func (_ Unimplemented) ListQueues(w http.ResponseWriter, r *http.Request, params ListQueuesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get coordinator service status
// (GET /services/coordinator)
func (_ Unimplemented) GetCoordinatorStatus(w http.ResponseWriter, r *http.Request, params GetCoordinatorStatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get scheduler service status
// (GET /services/scheduler)
func (_ Unimplemented) GetSchedulerStatus(w http.ResponseWriter, r *http.Request, params GetSchedulerStatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List distributed workers
// (GET /workers)
func (_ Unimplemented) GetWorkers(w http.ResponseWriter, r *http.Request, params GetWorkersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListDAGRuns operation middleware
func (siw *ServerInterfaceWrapper) ListDAGRuns(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDAGRunsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "fromDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromDate", r.URL.Query(), &params.FromDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fromDate", Err: err})
		return
	}

	// ------------- Optional query parameter "toDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "toDate", r.URL.Query(), &params.ToDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toDate", Err: err})
		return
	}

	// ------------- Optional query parameter "dagRunId" -------------

	err = runtime.BindQueryParameter("form", true, false, "dagRunId", r.URL.Query(), &params.DagRunId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDAGRuns(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ExecuteDAGRunFromSpec operation middleware
func (siw *ServerInterfaceWrapper) ExecuteDAGRunFromSpec(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ExecuteDAGRunFromSpecParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExecuteDAGRunFromSpec(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListDAGRunsByName operation middleware
func (siw *ServerInterfaceWrapper) ListDAGRunsByName(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGRunName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDAGRunsByNameParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "fromDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromDate", r.URL.Query(), &params.FromDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fromDate", Err: err})
		return
	}

	// ------------- Optional query parameter "toDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "toDate", r.URL.Query(), &params.ToDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toDate", Err: err})
		return
	}

	// ------------- Optional query parameter "dagRunId" -------------

	err = runtime.BindQueryParameter("form", true, false, "dagRunId", r.URL.Query(), &params.DagRunId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDAGRunsByName(w, r, name, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGRunDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGRunDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGRunDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGRunDetails(w, r, name, dagRunId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetChildDAGRunDetails operation middleware
func (siw *ServerInterfaceWrapper) GetChildDAGRunDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	// ------------- Path parameter "childDAGRunId" -------------
	var childDAGRunId string

	err = runtime.BindStyledParameterWithOptions("simple", "childDAGRunId", chi.URLParam(r, "childDAGRunId"), &childDAGRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "childDAGRunId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChildDAGRunDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChildDAGRunDetails(w, r, name, dagRunId, childDAGRunId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetChildDAGRunLog operation middleware
func (siw *ServerInterfaceWrapper) GetChildDAGRunLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	// ------------- Path parameter "childDAGRunId" -------------
	var childDAGRunId string

	err = runtime.BindStyledParameterWithOptions("simple", "childDAGRunId", chi.URLParam(r, "childDAGRunId"), &childDAGRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "childDAGRunId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChildDAGRunLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", r.URL.Query(), &params.Tail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tail", Err: err})
		return
	}

	// ------------- Optional query parameter "head" -------------

	err = runtime.BindQueryParameter("form", true, false, "head", r.URL.Query(), &params.Head)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "head", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChildDAGRunLog(w, r, name, dagRunId, childDAGRunId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetChildDAGRunStepLog operation middleware
func (siw *ServerInterfaceWrapper) GetChildDAGRunStepLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	// ------------- Path parameter "childDAGRunId" -------------
	var childDAGRunId string

	err = runtime.BindStyledParameterWithOptions("simple", "childDAGRunId", chi.URLParam(r, "childDAGRunId"), &childDAGRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "childDAGRunId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChildDAGRunStepLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", r.URL.Query(), &params.Tail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tail", Err: err})
		return
	}

	// ------------- Optional query parameter "head" -------------

	err = runtime.BindQueryParameter("form", true, false, "head", r.URL.Query(), &params.Head)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "head", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "stream" -------------

	err = runtime.BindQueryParameter("form", true, false, "stream", r.URL.Query(), &params.Stream)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stream", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChildDAGRunStepLog(w, r, name, dagRunId, childDAGRunId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateChildDAGRunStepStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateChildDAGRunStepStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	// ------------- Path parameter "childDAGRunId" -------------
	var childDAGRunId string

	err = runtime.BindStyledParameterWithOptions("simple", "childDAGRunId", chi.URLParam(r, "childDAGRunId"), &childDAGRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "childDAGRunId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateChildDAGRunStepStatusParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateChildDAGRunStepStatus(w, r, name, dagRunId, childDAGRunId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DequeueDAGRun operation middleware
func (siw *ServerInterfaceWrapper) DequeueDAGRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DequeueDAGRunParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DequeueDAGRun(w, r, name, dagRunId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGRunLog operation middleware
func (siw *ServerInterfaceWrapper) GetDAGRunLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGRunLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", r.URL.Query(), &params.Tail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tail", Err: err})
		return
	}

	// ------------- Optional query parameter "head" -------------

	err = runtime.BindQueryParameter("form", true, false, "head", r.URL.Query(), &params.Head)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "head", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGRunLog(w, r, name, dagRunId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RetryDAGRun operation middleware
func (siw *ServerInterfaceWrapper) RetryDAGRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params RetryDAGRunParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetryDAGRun(w, r, name, dagRunId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGRunStepLog operation middleware
func (siw *ServerInterfaceWrapper) GetDAGRunStepLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGRunStepLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", r.URL.Query(), &params.Tail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tail", Err: err})
		return
	}

	// ------------- Optional query parameter "head" -------------

	err = runtime.BindQueryParameter("form", true, false, "head", r.URL.Query(), &params.Head)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "head", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "stream" -------------

	err = runtime.BindQueryParameter("form", true, false, "stream", r.URL.Query(), &params.Stream)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stream", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGRunStepLog(w, r, name, dagRunId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDAGRunStepStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateDAGRunStepStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateDAGRunStepStatusParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDAGRunStepStatus(w, r, name, dagRunId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// TerminateDAGRun operation middleware
func (siw *ServerInterfaceWrapper) TerminateDAGRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params TerminateDAGRunParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TerminateDAGRun(w, r, name, dagRunId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListDAGs operation middleware
func (siw *ServerInterfaceWrapper) ListDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDAGsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", r.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "perPage", Err: err})
		return
	}

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateNewDAG operation middleware
func (siw *ServerInterfaceWrapper) CreateNewDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateNewDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNewDAG(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchDAGs operation middleware
func (siw *ServerInterfaceWrapper) SearchDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchDAGsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Required query parameter "q" -------------

	if paramValue := r.URL.Query().Get("q"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "q"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllDAGTags operation middleware
func (siw *ServerInterfaceWrapper) GetAllDAGTags(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllDAGTagsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllDAGTags(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ValidateDAGSpec operation middleware
func (siw *ServerInterfaceWrapper) ValidateDAGSpec(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ValidateDAGSpecParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidateDAGSpec(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteDAG operation middleware
func (siw *ServerInterfaceWrapper) DeleteDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDAG(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGDetails(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGDAGRunHistory operation middleware
func (siw *ServerInterfaceWrapper) GetDAGDAGRunHistory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGDAGRunHistoryParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGDAGRunHistory(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGDAGRunDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGDAGRunDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGDAGRunDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGDAGRunDetails(w, r, fileName, dagRunId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// EnqueueDAGDAGRun operation middleware
func (siw *ServerInterfaceWrapper) EnqueueDAGDAGRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params EnqueueDAGDAGRunParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EnqueueDAGDAGRun(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RenameDAG operation middleware
func (siw *ServerInterfaceWrapper) RenameDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params RenameDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RenameDAG(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGSpec operation middleware
func (siw *ServerInterfaceWrapper) GetDAGSpec(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGSpecParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGSpec(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDAGSpec operation middleware
func (siw *ServerInterfaceWrapper) UpdateDAGSpec(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateDAGSpecParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDAGSpec(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ExecuteDAG operation middleware
func (siw *ServerInterfaceWrapper) ExecuteDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ExecuteDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExecuteDAG(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// StopAllDAGRuns operation middleware
func (siw *ServerInterfaceWrapper) StopAllDAGRuns(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params StopAllDAGRunsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StopAllDAGRuns(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDAGSuspensionState operation middleware
func (siw *ServerInterfaceWrapper) UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateDAGSuspensionStateParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDAGSuspensionState(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealthStatus operation middleware
func (siw *ServerInterfaceWrapper) GetHealthStatus(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealthStatus(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetMetrics(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMetrics(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListQueues operation middleware
func (siw *ServerInterfaceWrapper) ListQueues(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListQueuesParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListQueues(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCoordinatorStatus operation middleware
func (siw *ServerInterfaceWrapper) GetCoordinatorStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCoordinatorStatusParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCoordinatorStatus(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSchedulerStatus operation middleware
func (siw *ServerInterfaceWrapper) GetSchedulerStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchedulerStatusParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSchedulerStatus(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWorkers operation middleware
func (siw *ServerInterfaceWrapper) GetWorkers(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkersParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkers(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs", wrapper.ListDAGRuns)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dag-runs", wrapper.ExecuteDAGRunFromSpec)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs/{name}", wrapper.ListDAGRunsByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs/{name}/{dagRunId}", wrapper.GetDAGRunDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs/{name}/{dagRunId}/children/{childDAGRunId}", wrapper.GetChildDAGRunDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/log", wrapper.GetChildDAGRunLog)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/log", wrapper.GetChildDAGRunStepLog)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/status", wrapper.UpdateChildDAGRunStepStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs/{name}/{dagRunId}/dequeue", wrapper.DequeueDAGRun)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs/{name}/{dagRunId}/log", wrapper.GetDAGRunLog)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dag-runs/{name}/{dagRunId}/retry", wrapper.RetryDAGRun)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs/{name}/{dagRunId}/steps/{stepName}/log", wrapper.GetDAGRunStepLog)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/dag-runs/{name}/{dagRunId}/steps/{stepName}/status", wrapper.UpdateDAGRunStepStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dag-runs/{name}/{dagRunId}/stop", wrapper.TerminateDAGRun)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags", wrapper.ListDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags", wrapper.CreateNewDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/search", wrapper.SearchDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/tags", wrapper.GetAllDAGTags)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/validate", wrapper.ValidateDAGSpec)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/dags/{fileName}", wrapper.DeleteDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileName}", wrapper.GetDAGDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileName}/dag-runs", wrapper.GetDAGDAGRunHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileName}/dag-runs/{dagRunId}", wrapper.GetDAGDAGRunDetails)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/enqueue", wrapper.EnqueueDAGDAGRun)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/rename", wrapper.RenameDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileName}/spec", wrapper.GetDAGSpec)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/dags/{fileName}/spec", wrapper.UpdateDAGSpec)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/start", wrapper.ExecuteDAG)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/stop-all", wrapper.StopAllDAGRuns)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/suspend", wrapper.UpdateDAGSuspensionState)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealthStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/metrics", wrapper.GetMetrics)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/queues", wrapper.ListQueues)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/services/coordinator", wrapper.GetCoordinatorStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/services/scheduler", wrapper.GetSchedulerStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/workers", wrapper.GetWorkers)
	})

	return r
}

type ListDAGRunsRequestObject struct {
	Params ListDAGRunsParams
}

type ListDAGRunsResponseObject interface {
	VisitListDAGRunsResponse(w http.ResponseWriter) error
}

type ListDAGRuns200JSONResponse struct {
	// DagRuns List of DAG-runs with their status and metadata
	DagRuns []DAGRunSummary `json:"dagRuns"`
}

func (response ListDAGRuns200JSONResponse) VisitListDAGRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGRunsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListDAGRunsdefaultJSONResponse) VisitListDAGRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExecuteDAGRunFromSpecRequestObject struct {
	Params ExecuteDAGRunFromSpecParams
	Body   *ExecuteDAGRunFromSpecJSONRequestBody
}

type ExecuteDAGRunFromSpecResponseObject interface {
	VisitExecuteDAGRunFromSpecResponse(w http.ResponseWriter) error
}

type ExecuteDAGRunFromSpec200JSONResponse struct {
	// DagRunId ID of the created DAG-run
	DagRunId string `json:"dagRunId"`
}

func (response ExecuteDAGRunFromSpec200JSONResponse) VisitExecuteDAGRunFromSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteDAGRunFromSpec400JSONResponse Error

func (response ExecuteDAGRunFromSpec400JSONResponse) VisitExecuteDAGRunFromSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteDAGRunFromSpec409JSONResponse Error

func (response ExecuteDAGRunFromSpec409JSONResponse) VisitExecuteDAGRunFromSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteDAGRunFromSpecdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ExecuteDAGRunFromSpecdefaultJSONResponse) VisitExecuteDAGRunFromSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListDAGRunsByNameRequestObject struct {
	Name   DAGRunName `json:"name"`
	Params ListDAGRunsByNameParams
}

type ListDAGRunsByNameResponseObject interface {
	VisitListDAGRunsByNameResponse(w http.ResponseWriter) error
}

type ListDAGRunsByName200JSONResponse struct {
	// DagRuns List of DAG-runs with their status and metadata
	DagRuns []DAGRunSummary `json:"dagRuns"`
}

func (response ListDAGRunsByName200JSONResponse) VisitListDAGRunsByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGRunsByNamedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListDAGRunsByNamedefaultJSONResponse) VisitListDAGRunsByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGRunDetailsRequestObject struct {
	Name     DAGName  `json:"name"`
	DagRunId DAGRunId `json:"dagRunId"`
	Params   GetDAGRunDetailsParams
}

type GetDAGRunDetailsResponseObject interface {
	VisitGetDAGRunDetailsResponse(w http.ResponseWriter) error
}

type GetDAGRunDetails200JSONResponse struct {
	// DagRunDetails Detailed status of a DAG-run including child DAG-run nodes
	DagRunDetails DAGRunDetails `json:"dagRunDetails"`
}

func (response GetDAGRunDetails200JSONResponse) VisitGetDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunDetails404JSONResponse Error

func (response GetDAGRunDetails404JSONResponse) VisitGetDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGRunDetailsdefaultJSONResponse) VisitGetDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetChildDAGRunDetailsRequestObject struct {
	Name          DAGName  `json:"name"`
	DagRunId      DAGRunId `json:"dagRunId"`
	ChildDAGRunId string   `json:"childDAGRunId"`
	Params        GetChildDAGRunDetailsParams
}

type GetChildDAGRunDetailsResponseObject interface {
	VisitGetChildDAGRunDetailsResponse(w http.ResponseWriter) error
}

type GetChildDAGRunDetails200JSONResponse struct {
	// DagRunDetails Detailed status of a DAG-run including child DAG-run nodes
	DagRunDetails DAGRunDetails `json:"dagRunDetails"`
}

func (response GetChildDAGRunDetails200JSONResponse) VisitGetChildDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChildDAGRunDetails404JSONResponse Error

func (response GetChildDAGRunDetails404JSONResponse) VisitGetChildDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetChildDAGRunDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetChildDAGRunDetailsdefaultJSONResponse) VisitGetChildDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetChildDAGRunLogRequestObject struct {
	Name          DAGName  `json:"name"`
	DagRunId      DAGRunId `json:"dagRunId"`
	ChildDAGRunId string   `json:"childDAGRunId"`
	Params        GetChildDAGRunLogParams
}

type GetChildDAGRunLogResponseObject interface {
	VisitGetChildDAGRunLogResponse(w http.ResponseWriter) error
}

type GetChildDAGRunLog200JSONResponse Log

func (response GetChildDAGRunLog200JSONResponse) VisitGetChildDAGRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChildDAGRunLog404JSONResponse Error

func (response GetChildDAGRunLog404JSONResponse) VisitGetChildDAGRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetChildDAGRunLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetChildDAGRunLogdefaultJSONResponse) VisitGetChildDAGRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetChildDAGRunStepLogRequestObject struct {
	Name          DAGName  `json:"name"`
	DagRunId      DAGRunId `json:"dagRunId"`
	ChildDAGRunId string   `json:"childDAGRunId"`
	StepName      StepName `json:"stepName"`
	Params        GetChildDAGRunStepLogParams
}

type GetChildDAGRunStepLogResponseObject interface {
	VisitGetChildDAGRunStepLogResponse(w http.ResponseWriter) error
}

type GetChildDAGRunStepLog200JSONResponse Log

func (response GetChildDAGRunStepLog200JSONResponse) VisitGetChildDAGRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChildDAGRunStepLog404JSONResponse Error

func (response GetChildDAGRunStepLog404JSONResponse) VisitGetChildDAGRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetChildDAGRunStepLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetChildDAGRunStepLogdefaultJSONResponse) VisitGetChildDAGRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateChildDAGRunStepStatusRequestObject struct {
	Name          DAGName  `json:"name"`
	DagRunId      DAGRunId `json:"dagRunId"`
	ChildDAGRunId string   `json:"childDAGRunId"`
	StepName      StepName `json:"stepName"`
	Params        UpdateChildDAGRunStepStatusParams
	Body          *UpdateChildDAGRunStepStatusJSONRequestBody
}

type UpdateChildDAGRunStepStatusResponseObject interface {
	VisitUpdateChildDAGRunStepStatusResponse(w http.ResponseWriter) error
}

type UpdateChildDAGRunStepStatus200Response struct {
}

func (response UpdateChildDAGRunStepStatus200Response) VisitUpdateChildDAGRunStepStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateChildDAGRunStepStatus400JSONResponse Error

func (response UpdateChildDAGRunStepStatus400JSONResponse) VisitUpdateChildDAGRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChildDAGRunStepStatus404JSONResponse Error

func (response UpdateChildDAGRunStepStatus404JSONResponse) VisitUpdateChildDAGRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChildDAGRunStepStatusdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateChildDAGRunStepStatusdefaultJSONResponse) VisitUpdateChildDAGRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DequeueDAGRunRequestObject struct {
	Name     DAGName  `json:"name"`
	DagRunId DAGRunId `json:"dagRunId"`
	Params   DequeueDAGRunParams
}

type DequeueDAGRunResponseObject interface {
	VisitDequeueDAGRunResponse(w http.ResponseWriter) error
}

type DequeueDAGRun200Response struct {
}

func (response DequeueDAGRun200Response) VisitDequeueDAGRunResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DequeueDAGRun404JSONResponse Error

func (response DequeueDAGRun404JSONResponse) VisitDequeueDAGRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DequeueDAGRundefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DequeueDAGRundefaultJSONResponse) VisitDequeueDAGRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGRunLogRequestObject struct {
	Name     DAGName  `json:"name"`
	DagRunId DAGRunId `json:"dagRunId"`
	Params   GetDAGRunLogParams
}

type GetDAGRunLogResponseObject interface {
	VisitGetDAGRunLogResponse(w http.ResponseWriter) error
}

type GetDAGRunLog200JSONResponse Log

func (response GetDAGRunLog200JSONResponse) VisitGetDAGRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunLog404JSONResponse Error

func (response GetDAGRunLog404JSONResponse) VisitGetDAGRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGRunLogdefaultJSONResponse) VisitGetDAGRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetryDAGRunRequestObject struct {
	Name     DAGName  `json:"name"`
	DagRunId DAGRunId `json:"dagRunId"`
	Params   RetryDAGRunParams
	Body     *RetryDAGRunJSONRequestBody
}

type RetryDAGRunResponseObject interface {
	VisitRetryDAGRunResponse(w http.ResponseWriter) error
}

type RetryDAGRun200Response struct {
}

func (response RetryDAGRun200Response) VisitRetryDAGRunResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RetryDAGRundefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RetryDAGRundefaultJSONResponse) VisitRetryDAGRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGRunStepLogRequestObject struct {
	Name     DAGName  `json:"name"`
	DagRunId DAGRunId `json:"dagRunId"`
	StepName StepName `json:"stepName"`
	Params   GetDAGRunStepLogParams
}

type GetDAGRunStepLogResponseObject interface {
	VisitGetDAGRunStepLogResponse(w http.ResponseWriter) error
}

type GetDAGRunStepLog200JSONResponse Log

func (response GetDAGRunStepLog200JSONResponse) VisitGetDAGRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunStepLog404JSONResponse Error

func (response GetDAGRunStepLog404JSONResponse) VisitGetDAGRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunStepLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGRunStepLogdefaultJSONResponse) VisitGetDAGRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateDAGRunStepStatusRequestObject struct {
	Name     DAGName  `json:"name"`
	DagRunId DAGRunId `json:"dagRunId"`
	StepName StepName `json:"stepName"`
	Params   UpdateDAGRunStepStatusParams
	Body     *UpdateDAGRunStepStatusJSONRequestBody
}

type UpdateDAGRunStepStatusResponseObject interface {
	VisitUpdateDAGRunStepStatusResponse(w http.ResponseWriter) error
}

type UpdateDAGRunStepStatus200Response struct {
}

func (response UpdateDAGRunStepStatus200Response) VisitUpdateDAGRunStepStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateDAGRunStepStatus400JSONResponse Error

func (response UpdateDAGRunStepStatus400JSONResponse) VisitUpdateDAGRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGRunStepStatus404JSONResponse Error

func (response UpdateDAGRunStepStatus404JSONResponse) VisitUpdateDAGRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGRunStepStatusdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateDAGRunStepStatusdefaultJSONResponse) VisitUpdateDAGRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TerminateDAGRunRequestObject struct {
	Name     DAGName  `json:"name"`
	DagRunId DAGRunId `json:"dagRunId"`
	Params   TerminateDAGRunParams
}

type TerminateDAGRunResponseObject interface {
	VisitTerminateDAGRunResponse(w http.ResponseWriter) error
}

type TerminateDAGRun200Response struct {
}

func (response TerminateDAGRun200Response) VisitTerminateDAGRunResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type TerminateDAGRundefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response TerminateDAGRundefaultJSONResponse) VisitTerminateDAGRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListDAGsRequestObject struct {
	Params ListDAGsParams
}

type ListDAGsResponseObject interface {
	VisitListDAGsResponse(w http.ResponseWriter) error
}

type ListDAGs200JSONResponse struct {
	// Dags List of DAG definitions with their status and metadata
	Dags []DAGFile `json:"dags"`

	// Errors List of errors encountered during the request
	Errors     []string   `json:"errors"`
	Pagination Pagination `json:"pagination"`
}

func (response ListDAGs200JSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListDAGsdefaultJSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateNewDAGRequestObject struct {
	Params CreateNewDAGParams
	Body   *CreateNewDAGJSONRequestBody
}

type CreateNewDAGResponseObject interface {
	VisitCreateNewDAGResponse(w http.ResponseWriter) error
}

type CreateNewDAG201JSONResponse struct {
	// Name Name of the newly created DAG
	Name string `json:"name"`
}

func (response CreateNewDAG201JSONResponse) VisitCreateNewDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateNewDAG400JSONResponse Error

func (response CreateNewDAG400JSONResponse) VisitCreateNewDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateNewDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateNewDAGdefaultJSONResponse) VisitCreateNewDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SearchDAGsRequestObject struct {
	Params SearchDAGsParams
}

type SearchDAGsResponseObject interface {
	VisitSearchDAGsResponse(w http.ResponseWriter) error
}

type SearchDAGs200JSONResponse struct {
	// Errors Errors encountered during the search
	Errors []string `json:"errors"`

	// Results Search results matching the query
	Results []SearchResultItem `json:"results"`
}

func (response SearchDAGs200JSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SearchDAGsdefaultJSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAllDAGTagsRequestObject struct {
	Params GetAllDAGTagsParams
}

type GetAllDAGTagsResponseObject interface {
	VisitGetAllDAGTagsResponse(w http.ResponseWriter) error
}

type GetAllDAGTags200JSONResponse ListTagResponse

func (response GetAllDAGTags200JSONResponse) VisitGetAllDAGTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllDAGTagsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetAllDAGTagsdefaultJSONResponse) VisitGetAllDAGTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ValidateDAGSpecRequestObject struct {
	Params ValidateDAGSpecParams
	Body   *ValidateDAGSpecJSONRequestBody
}

type ValidateDAGSpecResponseObject interface {
	VisitValidateDAGSpecResponse(w http.ResponseWriter) error
}

type ValidateDAGSpec200JSONResponse struct {
	// Dag Detailed DAG configuration information
	Dag *DAGDetails `json:"dag,omitempty"`

	// Errors List of validation errors
	Errors []string `json:"errors"`

	// Valid True if the spec is valid (no errors)
	Valid bool `json:"valid"`
}

func (response ValidateDAGSpec200JSONResponse) VisitValidateDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ValidateDAGSpecdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ValidateDAGSpecdefaultJSONResponse) VisitValidateDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteDAGRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   DeleteDAGParams
}

type DeleteDAGResponseObject interface {
	VisitDeleteDAGResponse(w http.ResponseWriter) error
}

type DeleteDAG204Response struct {
}

func (response DeleteDAG204Response) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteDAG404JSONResponse Error

func (response DeleteDAG404JSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteDAGdefaultJSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGDetailsRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   GetDAGDetailsParams
}

type GetDAGDetailsResponseObject interface {
	VisitGetDAGDetailsResponse(w http.ResponseWriter) error
}

type GetDAGDetails200JSONResponse struct {
	// Dag Detailed DAG configuration information
	Dag *DAGDetails `json:"dag,omitempty"`

	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// LatestDAGRun Detailed status of a DAG-run including child DAG-run nodes
	LatestDAGRun DAGRunDetails `json:"latestDAGRun"`

	// LocalDags List of local DAGs that are part of this DAG
	LocalDags []LocalDag `json:"localDags"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"suspended"`
}

func (response GetDAGDetails200JSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGDetailsdefaultJSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGDAGRunHistoryRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   GetDAGDAGRunHistoryParams
}

type GetDAGDAGRunHistoryResponseObject interface {
	VisitGetDAGDAGRunHistoryResponse(w http.ResponseWriter) error
}

type GetDAGDAGRunHistory200JSONResponse struct {
	// DagRuns List of historical DAG-runs created from this DAG
	DagRuns []DAGRunDetails `json:"dagRuns"`

	// GridData Grid data for visualization
	GridData []DAGGridItem `json:"gridData"`
}

func (response GetDAGDAGRunHistory200JSONResponse) VisitGetDAGDAGRunHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDAGRunHistorydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGDAGRunHistorydefaultJSONResponse) VisitGetDAGDAGRunHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGDAGRunDetailsRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	DagRunId DAGRunId    `json:"dagRunId"`
	Params   GetDAGDAGRunDetailsParams
}

type GetDAGDAGRunDetailsResponseObject interface {
	VisitGetDAGDAGRunDetailsResponse(w http.ResponseWriter) error
}

type GetDAGDAGRunDetails200JSONResponse struct {
	// DagRun Detailed status of a DAG-run including child DAG-run nodes
	DagRun DAGRunDetails `json:"dagRun"`
}

func (response GetDAGDAGRunDetails200JSONResponse) VisitGetDAGDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDAGRunDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGDAGRunDetailsdefaultJSONResponse) VisitGetDAGDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type EnqueueDAGDAGRunRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   EnqueueDAGDAGRunParams
	Body     *EnqueueDAGDAGRunJSONRequestBody
}

type EnqueueDAGDAGRunResponseObject interface {
	VisitEnqueueDAGDAGRunResponse(w http.ResponseWriter) error
}

type EnqueueDAGDAGRun200JSONResponse struct {
	// DagRunId ID of the created DAG-run
	DagRunId string `json:"dagRunId"`
}

func (response EnqueueDAGDAGRun200JSONResponse) VisitEnqueueDAGDAGRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EnqueueDAGDAGRundefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response EnqueueDAGDAGRundefaultJSONResponse) VisitEnqueueDAGDAGRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RenameDAGRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   RenameDAGParams
	Body     *RenameDAGJSONRequestBody
}

type RenameDAGResponseObject interface {
	VisitRenameDAGResponse(w http.ResponseWriter) error
}

type RenameDAG200Response struct {
}

func (response RenameDAG200Response) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RenameDAG400JSONResponse Error

func (response RenameDAG400JSONResponse) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RenameDAG404JSONResponse Error

func (response RenameDAG404JSONResponse) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RenameDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RenameDAGdefaultJSONResponse) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGSpecRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   GetDAGSpecParams
}

type GetDAGSpecResponseObject interface {
	VisitGetDAGSpecResponse(w http.ResponseWriter) error
}

type GetDAGSpec200JSONResponse struct {
	// Dag Detailed DAG configuration information
	Dag *DAGDetails `json:"dag,omitempty"`

	// Errors List of errors in the spec
	Errors []string `json:"errors"`

	// Spec The DAG spec in YAML format
	Spec string `json:"spec"`
}

func (response GetDAGSpec200JSONResponse) VisitGetDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGSpecdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGSpecdefaultJSONResponse) VisitGetDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateDAGSpecRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   UpdateDAGSpecParams
	Body     *UpdateDAGSpecJSONRequestBody
}

type UpdateDAGSpecResponseObject interface {
	VisitUpdateDAGSpecResponse(w http.ResponseWriter) error
}

type UpdateDAGSpec200JSONResponse struct {
	// Errors List of errors in the spec
	Errors []string `json:"errors"`
}

func (response UpdateDAGSpec200JSONResponse) VisitUpdateDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGSpecdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateDAGSpecdefaultJSONResponse) VisitUpdateDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExecuteDAGRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   ExecuteDAGParams
	Body     *ExecuteDAGJSONRequestBody
}

type ExecuteDAGResponseObject interface {
	VisitExecuteDAGResponse(w http.ResponseWriter) error
}

type ExecuteDAG200JSONResponse struct {
	// DagRunId ID of the created DAG-run
	DagRunId string `json:"dagRunId"`
}

func (response ExecuteDAG200JSONResponse) VisitExecuteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteDAG409JSONResponse Error

func (response ExecuteDAG409JSONResponse) VisitExecuteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ExecuteDAGdefaultJSONResponse) VisitExecuteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type StopAllDAGRunsRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   StopAllDAGRunsParams
}

type StopAllDAGRunsResponseObject interface {
	VisitStopAllDAGRunsResponse(w http.ResponseWriter) error
}

type StopAllDAGRuns200JSONResponse struct {
	// Errors Errors encountered
	Errors []string `json:"errors"`
}

func (response StopAllDAGRuns200JSONResponse) VisitStopAllDAGRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StopAllDAGRuns404JSONResponse Error

func (response StopAllDAGRuns404JSONResponse) VisitStopAllDAGRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type StopAllDAGRunsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response StopAllDAGRunsdefaultJSONResponse) VisitStopAllDAGRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateDAGSuspensionStateRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   UpdateDAGSuspensionStateParams
	Body     *UpdateDAGSuspensionStateJSONRequestBody
}

type UpdateDAGSuspensionStateResponseObject interface {
	VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error
}

type UpdateDAGSuspensionState200Response struct {
}

func (response UpdateDAGSuspensionState200Response) VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateDAGSuspensionState404JSONResponse Error

func (response UpdateDAGSuspensionState404JSONResponse) VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGSuspensionStatedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateDAGSuspensionStatedefaultJSONResponse) VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealthStatusRequestObject struct {
}

type GetHealthStatusResponseObject interface {
	VisitGetHealthStatusResponse(w http.ResponseWriter) error
}

type GetHealthStatus200JSONResponse HealthResponse

func (response GetHealthStatus200JSONResponse) VisitGetHealthStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthStatusdefaultResponse struct {
	StatusCode int
}

func (response GetHealthStatusdefaultResponse) VisitGetHealthStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetMetricsRequestObject struct {
}

type GetMetricsResponseObject interface {
	VisitGetMetricsResponse(w http.ResponseWriter) error
}

type GetMetrics200TextResponse string

func (response GetMetrics200TextResponse) VisitGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type GetMetricsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetMetricsdefaultJSONResponse) VisitGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListQueuesRequestObject struct {
	Params ListQueuesParams
}

type ListQueuesResponseObject interface {
	VisitListQueuesResponse(w http.ResponseWriter) error
}

type ListQueues200JSONResponse QueuesResponse

func (response ListQueues200JSONResponse) VisitListQueuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListQueuesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListQueuesdefaultJSONResponse) VisitListQueuesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetCoordinatorStatusRequestObject struct {
	Params GetCoordinatorStatusParams
}

type GetCoordinatorStatusResponseObject interface {
	VisitGetCoordinatorStatusResponse(w http.ResponseWriter) error
}

type GetCoordinatorStatus200JSONResponse CoordinatorStatusResponse

func (response GetCoordinatorStatus200JSONResponse) VisitGetCoordinatorStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCoordinatorStatusdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetCoordinatorStatusdefaultJSONResponse) VisitGetCoordinatorStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSchedulerStatusRequestObject struct {
	Params GetSchedulerStatusParams
}

type GetSchedulerStatusResponseObject interface {
	VisitGetSchedulerStatusResponse(w http.ResponseWriter) error
}

type GetSchedulerStatus200JSONResponse SchedulerStatusResponse

func (response GetSchedulerStatus200JSONResponse) VisitGetSchedulerStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSchedulerStatusdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSchedulerStatusdefaultJSONResponse) VisitGetSchedulerStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetWorkersRequestObject struct {
	Params GetWorkersParams
}

type GetWorkersResponseObject interface {
	VisitGetWorkersResponse(w http.ResponseWriter) error
}

type GetWorkers200JSONResponse WorkersListResponse

func (response GetWorkers200JSONResponse) VisitGetWorkersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkers503JSONResponse Error

func (response GetWorkers503JSONResponse) VisitGetWorkersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkersdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetWorkersdefaultJSONResponse) VisitGetWorkersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all DAG-runs
	// (GET /dag-runs)
	ListDAGRuns(ctx context.Context, request ListDAGRunsRequestObject) (ListDAGRunsResponseObject, error)
	// Create and execute a DAG-run from inline spec
	// (POST /dag-runs)
	ExecuteDAGRunFromSpec(ctx context.Context, request ExecuteDAGRunFromSpecRequestObject) (ExecuteDAGRunFromSpecResponseObject, error)
	// List all DAG-runs with a specific name
	// (GET /dag-runs/{name})
	ListDAGRunsByName(ctx context.Context, request ListDAGRunsByNameRequestObject) (ListDAGRunsByNameResponseObject, error)
	// Retrieve detailed status of a DAG-run
	// (GET /dag-runs/{name}/{dagRunId})
	GetDAGRunDetails(ctx context.Context, request GetDAGRunDetailsRequestObject) (GetDAGRunDetailsResponseObject, error)
	// Retrieve detailed status of a child DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId})
	GetChildDAGRunDetails(ctx context.Context, request GetChildDAGRunDetailsRequestObject) (GetChildDAGRunDetailsResponseObject, error)
	// Retrieve log for a specific child DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/log)
	GetChildDAGRunLog(ctx context.Context, request GetChildDAGRunLogRequestObject) (GetChildDAGRunLogResponseObject, error)
	// Retrieve log for a specific step in a child DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/log)
	GetChildDAGRunStepLog(ctx context.Context, request GetChildDAGRunStepLogRequestObject) (GetChildDAGRunStepLogResponseObject, error)
	// Manually update a step's execution status in a child DAG-run
	// (PATCH /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/status)
	UpdateChildDAGRunStepStatus(ctx context.Context, request UpdateChildDAGRunStepStatusRequestObject) (UpdateChildDAGRunStepStatusResponseObject, error)
	// Dequeue a queued DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/dequeue)
	DequeueDAGRun(ctx context.Context, request DequeueDAGRunRequestObject) (DequeueDAGRunResponseObject, error)
	// Retrieve full execution log of a DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/log)
	GetDAGRunLog(ctx context.Context, request GetDAGRunLogRequestObject) (GetDAGRunLogResponseObject, error)
	// Retry DAG-run execution
	// (POST /dag-runs/{name}/{dagRunId}/retry)
	RetryDAGRun(ctx context.Context, request RetryDAGRunRequestObject) (RetryDAGRunResponseObject, error)
	// Retrieve log for a specific step in a DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/steps/{stepName}/log)
	GetDAGRunStepLog(ctx context.Context, request GetDAGRunStepLogRequestObject) (GetDAGRunStepLogResponseObject, error)
	// Manually update a step's execution status
	// (PATCH /dag-runs/{name}/{dagRunId}/steps/{stepName}/status)
	UpdateDAGRunStepStatus(ctx context.Context, request UpdateDAGRunStepStatusRequestObject) (UpdateDAGRunStepStatusResponseObject, error)
	// Terminate a running DAG-run
	// (POST /dag-runs/{name}/{dagRunId}/stop)
	TerminateDAGRun(ctx context.Context, request TerminateDAGRunRequestObject) (TerminateDAGRunResponseObject, error)
	// List all available DAGs
	// (GET /dags)
	ListDAGs(ctx context.Context, request ListDAGsRequestObject) (ListDAGsResponseObject, error)
	// Create a new DAG definition
	// (POST /dags)
	CreateNewDAG(ctx context.Context, request CreateNewDAGRequestObject) (CreateNewDAGResponseObject, error)
	// Search DAGs
	// (GET /dags/search)
	SearchDAGs(ctx context.Context, request SearchDAGsRequestObject) (SearchDAGsResponseObject, error)
	// List all available DAG tags
	// (GET /dags/tags)
	GetAllDAGTags(ctx context.Context, request GetAllDAGTagsRequestObject) (GetAllDAGTagsResponseObject, error)
	// Validate a DAG specification
	// (POST /dags/validate)
	ValidateDAGSpec(ctx context.Context, request ValidateDAGSpecRequestObject) (ValidateDAGSpecResponseObject, error)
	// Delete an existing DAG
	// (DELETE /dags/{fileName})
	DeleteDAG(ctx context.Context, request DeleteDAGRequestObject) (DeleteDAGResponseObject, error)
	// Retrieve comprehensive DAG information
	// (GET /dags/{fileName})
	GetDAGDetails(ctx context.Context, request GetDAGDetailsRequestObject) (GetDAGDetailsResponseObject, error)
	// Retrieve execution history of a DAG
	// (GET /dags/{fileName}/dag-runs)
	GetDAGDAGRunHistory(ctx context.Context, request GetDAGDAGRunHistoryRequestObject) (GetDAGDAGRunHistoryResponseObject, error)
	// Get detailed status of a specific DAG-run
	// (GET /dags/{fileName}/dag-runs/{dagRunId})
	GetDAGDAGRunDetails(ctx context.Context, request GetDAGDAGRunDetailsRequestObject) (GetDAGDAGRunDetailsResponseObject, error)
	// Enqueue a DAG-run from DAG
	// (POST /dags/{fileName}/enqueue)
	EnqueueDAGDAGRun(ctx context.Context, request EnqueueDAGDAGRunRequestObject) (EnqueueDAGDAGRunResponseObject, error)
	// Change DAG file ID
	// (POST /dags/{fileName}/rename)
	RenameDAG(ctx context.Context, request RenameDAGRequestObject) (RenameDAGResponseObject, error)
	// Retrieve DAG specification
	// (GET /dags/{fileName}/spec)
	GetDAGSpec(ctx context.Context, request GetDAGSpecRequestObject) (GetDAGSpecResponseObject, error)
	// Update DAG spec
	// (PUT /dags/{fileName}/spec)
	UpdateDAGSpec(ctx context.Context, request UpdateDAGSpecRequestObject) (UpdateDAGSpecResponseObject, error)
	// Create and execute a DAG-run from DAG
	// (POST /dags/{fileName}/start)
	ExecuteDAG(ctx context.Context, request ExecuteDAGRequestObject) (ExecuteDAGResponseObject, error)
	// Stop all running instances of a DAG
	// (POST /dags/{fileName}/stop-all)
	StopAllDAGRuns(ctx context.Context, request StopAllDAGRunsRequestObject) (StopAllDAGRunsResponseObject, error)
	// Toggle DAG suspension state
	// (POST /dags/{fileName}/suspend)
	UpdateDAGSuspensionState(ctx context.Context, request UpdateDAGSuspensionStateRequestObject) (UpdateDAGSuspensionStateResponseObject, error)
	// Check server health status
	// (GET /health)
	GetHealthStatus(ctx context.Context, request GetHealthStatusRequestObject) (GetHealthStatusResponseObject, error)
	// Get Prometheus metrics
	// (GET /metrics)
	GetMetrics(ctx context.Context, request GetMetricsRequestObject) (GetMetricsResponseObject, error)
	// List all execution queues with active DAG-runs
	// (GET /queues)
	ListQueues(ctx context.Context, request ListQueuesRequestObject) (ListQueuesResponseObject, error)
	// Get coordinator service status
	// (GET /services/coordinator)
	GetCoordinatorStatus(ctx context.Context, request GetCoordinatorStatusRequestObject) (GetCoordinatorStatusResponseObject, error)
	// Get scheduler service status
	// (GET /services/scheduler)
	GetSchedulerStatus(ctx context.Context, request GetSchedulerStatusRequestObject) (GetSchedulerStatusResponseObject, error)
	// List distributed workers
	// (GET /workers)
	GetWorkers(ctx context.Context, request GetWorkersRequestObject) (GetWorkersResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListDAGRuns operation middleware
func (sh *strictHandler) ListDAGRuns(w http.ResponseWriter, r *http.Request, params ListDAGRunsParams) {
	var request ListDAGRunsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListDAGRuns(ctx, request.(ListDAGRunsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDAGRuns")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListDAGRunsResponseObject); ok {
		if err := validResponse.VisitListDAGRunsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExecuteDAGRunFromSpec operation middleware
func (sh *strictHandler) ExecuteDAGRunFromSpec(w http.ResponseWriter, r *http.Request, params ExecuteDAGRunFromSpecParams) {
	var request ExecuteDAGRunFromSpecRequestObject

	request.Params = params

	var body ExecuteDAGRunFromSpecJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExecuteDAGRunFromSpec(ctx, request.(ExecuteDAGRunFromSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExecuteDAGRunFromSpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExecuteDAGRunFromSpecResponseObject); ok {
		if err := validResponse.VisitExecuteDAGRunFromSpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListDAGRunsByName operation middleware
func (sh *strictHandler) ListDAGRunsByName(w http.ResponseWriter, r *http.Request, name DAGRunName, params ListDAGRunsByNameParams) {
	var request ListDAGRunsByNameRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListDAGRunsByName(ctx, request.(ListDAGRunsByNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDAGRunsByName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListDAGRunsByNameResponseObject); ok {
		if err := validResponse.VisitListDAGRunsByNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGRunDetails operation middleware
func (sh *strictHandler) GetDAGRunDetails(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params GetDAGRunDetailsParams) {
	var request GetDAGRunDetailsRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGRunDetails(ctx, request.(GetDAGRunDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGRunDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGRunDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGRunDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChildDAGRunDetails operation middleware
func (sh *strictHandler) GetChildDAGRunDetails(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, params GetChildDAGRunDetailsParams) {
	var request GetChildDAGRunDetailsRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.ChildDAGRunId = childDAGRunId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetChildDAGRunDetails(ctx, request.(GetChildDAGRunDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChildDAGRunDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetChildDAGRunDetailsResponseObject); ok {
		if err := validResponse.VisitGetChildDAGRunDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChildDAGRunLog operation middleware
func (sh *strictHandler) GetChildDAGRunLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, params GetChildDAGRunLogParams) {
	var request GetChildDAGRunLogRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.ChildDAGRunId = childDAGRunId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetChildDAGRunLog(ctx, request.(GetChildDAGRunLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChildDAGRunLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetChildDAGRunLogResponseObject); ok {
		if err := validResponse.VisitGetChildDAGRunLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChildDAGRunStepLog operation middleware
func (sh *strictHandler) GetChildDAGRunStepLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, stepName StepName, params GetChildDAGRunStepLogParams) {
	var request GetChildDAGRunStepLogRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.ChildDAGRunId = childDAGRunId
	request.StepName = stepName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetChildDAGRunStepLog(ctx, request.(GetChildDAGRunStepLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChildDAGRunStepLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetChildDAGRunStepLogResponseObject); ok {
		if err := validResponse.VisitGetChildDAGRunStepLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateChildDAGRunStepStatus operation middleware
func (sh *strictHandler) UpdateChildDAGRunStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, stepName StepName, params UpdateChildDAGRunStepStatusParams) {
	var request UpdateChildDAGRunStepStatusRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.ChildDAGRunId = childDAGRunId
	request.StepName = stepName
	request.Params = params

	var body UpdateChildDAGRunStepStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateChildDAGRunStepStatus(ctx, request.(UpdateChildDAGRunStepStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateChildDAGRunStepStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateChildDAGRunStepStatusResponseObject); ok {
		if err := validResponse.VisitUpdateChildDAGRunStepStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DequeueDAGRun operation middleware
func (sh *strictHandler) DequeueDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params DequeueDAGRunParams) {
	var request DequeueDAGRunRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DequeueDAGRun(ctx, request.(DequeueDAGRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DequeueDAGRun")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DequeueDAGRunResponseObject); ok {
		if err := validResponse.VisitDequeueDAGRunResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGRunLog operation middleware
func (sh *strictHandler) GetDAGRunLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params GetDAGRunLogParams) {
	var request GetDAGRunLogRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGRunLog(ctx, request.(GetDAGRunLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGRunLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGRunLogResponseObject); ok {
		if err := validResponse.VisitGetDAGRunLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RetryDAGRun operation middleware
func (sh *strictHandler) RetryDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params RetryDAGRunParams) {
	var request RetryDAGRunRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.Params = params

	var body RetryDAGRunJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RetryDAGRun(ctx, request.(RetryDAGRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RetryDAGRun")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RetryDAGRunResponseObject); ok {
		if err := validResponse.VisitRetryDAGRunResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGRunStepLog operation middleware
func (sh *strictHandler) GetDAGRunStepLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, stepName StepName, params GetDAGRunStepLogParams) {
	var request GetDAGRunStepLogRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.StepName = stepName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGRunStepLog(ctx, request.(GetDAGRunStepLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGRunStepLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGRunStepLogResponseObject); ok {
		if err := validResponse.VisitGetDAGRunStepLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDAGRunStepStatus operation middleware
func (sh *strictHandler) UpdateDAGRunStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, stepName StepName, params UpdateDAGRunStepStatusParams) {
	var request UpdateDAGRunStepStatusRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.StepName = stepName
	request.Params = params

	var body UpdateDAGRunStepStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDAGRunStepStatus(ctx, request.(UpdateDAGRunStepStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDAGRunStepStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDAGRunStepStatusResponseObject); ok {
		if err := validResponse.VisitUpdateDAGRunStepStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TerminateDAGRun operation middleware
func (sh *strictHandler) TerminateDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params TerminateDAGRunParams) {
	var request TerminateDAGRunRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TerminateDAGRun(ctx, request.(TerminateDAGRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TerminateDAGRun")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TerminateDAGRunResponseObject); ok {
		if err := validResponse.VisitTerminateDAGRunResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListDAGs operation middleware
func (sh *strictHandler) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	var request ListDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListDAGs(ctx, request.(ListDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListDAGsResponseObject); ok {
		if err := validResponse.VisitListDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateNewDAG operation middleware
func (sh *strictHandler) CreateNewDAG(w http.ResponseWriter, r *http.Request, params CreateNewDAGParams) {
	var request CreateNewDAGRequestObject

	request.Params = params

	var body CreateNewDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateNewDAG(ctx, request.(CreateNewDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateNewDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateNewDAGResponseObject); ok {
		if err := validResponse.VisitCreateNewDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchDAGs operation middleware
func (sh *strictHandler) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	var request SearchDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchDAGs(ctx, request.(SearchDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchDAGsResponseObject); ok {
		if err := validResponse.VisitSearchDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllDAGTags operation middleware
func (sh *strictHandler) GetAllDAGTags(w http.ResponseWriter, r *http.Request, params GetAllDAGTagsParams) {
	var request GetAllDAGTagsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllDAGTags(ctx, request.(GetAllDAGTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllDAGTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllDAGTagsResponseObject); ok {
		if err := validResponse.VisitGetAllDAGTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidateDAGSpec operation middleware
func (sh *strictHandler) ValidateDAGSpec(w http.ResponseWriter, r *http.Request, params ValidateDAGSpecParams) {
	var request ValidateDAGSpecRequestObject

	request.Params = params

	var body ValidateDAGSpecJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ValidateDAGSpec(ctx, request.(ValidateDAGSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidateDAGSpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ValidateDAGSpecResponseObject); ok {
		if err := validResponse.VisitValidateDAGSpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDAG operation middleware
func (sh *strictHandler) DeleteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params DeleteDAGParams) {
	var request DeleteDAGRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDAG(ctx, request.(DeleteDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDAGResponseObject); ok {
		if err := validResponse.VisitDeleteDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGDetails operation middleware
func (sh *strictHandler) GetDAGDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDetailsParams) {
	var request GetDAGDetailsRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGDetails(ctx, request.(GetDAGDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGDAGRunHistory operation middleware
func (sh *strictHandler) GetDAGDAGRunHistory(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDAGRunHistoryParams) {
	var request GetDAGDAGRunHistoryRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGDAGRunHistory(ctx, request.(GetDAGDAGRunHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGDAGRunHistory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGDAGRunHistoryResponseObject); ok {
		if err := validResponse.VisitGetDAGDAGRunHistoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGDAGRunDetails operation middleware
func (sh *strictHandler) GetDAGDAGRunDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, dagRunId DAGRunId, params GetDAGDAGRunDetailsParams) {
	var request GetDAGDAGRunDetailsRequestObject

	request.FileName = fileName
	request.DagRunId = dagRunId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGDAGRunDetails(ctx, request.(GetDAGDAGRunDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGDAGRunDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGDAGRunDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGDAGRunDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// EnqueueDAGDAGRun operation middleware
func (sh *strictHandler) EnqueueDAGDAGRun(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params EnqueueDAGDAGRunParams) {
	var request EnqueueDAGDAGRunRequestObject

	request.FileName = fileName
	request.Params = params

	var body EnqueueDAGDAGRunJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.EnqueueDAGDAGRun(ctx, request.(EnqueueDAGDAGRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EnqueueDAGDAGRun")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(EnqueueDAGDAGRunResponseObject); ok {
		if err := validResponse.VisitEnqueueDAGDAGRunResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RenameDAG operation middleware
func (sh *strictHandler) RenameDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RenameDAGParams) {
	var request RenameDAGRequestObject

	request.FileName = fileName
	request.Params = params

	var body RenameDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RenameDAG(ctx, request.(RenameDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RenameDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RenameDAGResponseObject); ok {
		if err := validResponse.VisitRenameDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGSpec operation middleware
func (sh *strictHandler) GetDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGSpecParams) {
	var request GetDAGSpecRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGSpec(ctx, request.(GetDAGSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGSpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGSpecResponseObject); ok {
		if err := validResponse.VisitGetDAGSpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDAGSpec operation middleware
func (sh *strictHandler) UpdateDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSpecParams) {
	var request UpdateDAGSpecRequestObject

	request.FileName = fileName
	request.Params = params

	var body UpdateDAGSpecJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDAGSpec(ctx, request.(UpdateDAGSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDAGSpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDAGSpecResponseObject); ok {
		if err := validResponse.VisitUpdateDAGSpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExecuteDAG operation middleware
func (sh *strictHandler) ExecuteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params ExecuteDAGParams) {
	var request ExecuteDAGRequestObject

	request.FileName = fileName
	request.Params = params

	var body ExecuteDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExecuteDAG(ctx, request.(ExecuteDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExecuteDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExecuteDAGResponseObject); ok {
		if err := validResponse.VisitExecuteDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StopAllDAGRuns operation middleware
func (sh *strictHandler) StopAllDAGRuns(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params StopAllDAGRunsParams) {
	var request StopAllDAGRunsRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StopAllDAGRuns(ctx, request.(StopAllDAGRunsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StopAllDAGRuns")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StopAllDAGRunsResponseObject); ok {
		if err := validResponse.VisitStopAllDAGRunsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDAGSuspensionState operation middleware
func (sh *strictHandler) UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSuspensionStateParams) {
	var request UpdateDAGSuspensionStateRequestObject

	request.FileName = fileName
	request.Params = params

	var body UpdateDAGSuspensionStateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDAGSuspensionState(ctx, request.(UpdateDAGSuspensionStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDAGSuspensionState")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDAGSuspensionStateResponseObject); ok {
		if err := validResponse.VisitUpdateDAGSuspensionStateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealthStatus operation middleware
func (sh *strictHandler) GetHealthStatus(w http.ResponseWriter, r *http.Request) {
	var request GetHealthStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealthStatus(ctx, request.(GetHealthStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealthStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthStatusResponseObject); ok {
		if err := validResponse.VisitGetHealthStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMetrics operation middleware
func (sh *strictHandler) GetMetrics(w http.ResponseWriter, r *http.Request) {
	var request GetMetricsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMetrics(ctx, request.(GetMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMetrics")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMetricsResponseObject); ok {
		if err := validResponse.VisitGetMetricsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListQueues operation middleware
func (sh *strictHandler) ListQueues(w http.ResponseWriter, r *http.Request, params ListQueuesParams) {
	var request ListQueuesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListQueues(ctx, request.(ListQueuesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListQueues")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListQueuesResponseObject); ok {
		if err := validResponse.VisitListQueuesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCoordinatorStatus operation middleware
func (sh *strictHandler) GetCoordinatorStatus(w http.ResponseWriter, r *http.Request, params GetCoordinatorStatusParams) {
	var request GetCoordinatorStatusRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetCoordinatorStatus(ctx, request.(GetCoordinatorStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCoordinatorStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetCoordinatorStatusResponseObject); ok {
		if err := validResponse.VisitGetCoordinatorStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSchedulerStatus operation middleware
func (sh *strictHandler) GetSchedulerStatus(w http.ResponseWriter, r *http.Request, params GetSchedulerStatusParams) {
	var request GetSchedulerStatusRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSchedulerStatus(ctx, request.(GetSchedulerStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSchedulerStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSchedulerStatusResponseObject); ok {
		if err := validResponse.VisitGetSchedulerStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkers operation middleware
func (sh *strictHandler) GetWorkers(w http.ResponseWriter, r *http.Request, params GetWorkersParams) {
	var request GetWorkersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkers(ctx, request.(GetWorkersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkersResponseObject); ok {
		if err := validResponse.VisitGetWorkersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
