// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	ApiTokenScopes  = "apiToken.Scopes"
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for ErrorCode.
const (
	ErrorCodeAlreadyExists   ErrorCode = "already_exists"
	ErrorCodeAlreadyRunning  ErrorCode = "already_running"
	ErrorCodeBadGateway      ErrorCode = "bad_gateway"
	ErrorCodeBadRequest      ErrorCode = "bad_request"
	ErrorCodeInternalError   ErrorCode = "internal_error"
	ErrorCodeNotFound        ErrorCode = "not_found"
	ErrorCodeNotRunning      ErrorCode = "not_running"
	ErrorCodeRemoteNodeError ErrorCode = "remote_node_error"
	ErrorCodeUnauthorized    ErrorCode = "unauthorized"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusHealthy   HealthResponseStatus = "healthy"
	HealthResponseStatusUnhealthy HealthResponseStatus = "unhealthy"
)

// Defines values for NodeStatus.
const (
	NodeStatusCancelled  NodeStatus = 3
	NodeStatusFailed     NodeStatus = 2
	NodeStatusNotStarted NodeStatus = 0
	NodeStatusRunning    NodeStatus = 1
	NodeStatusSkipped    NodeStatus = 5
	NodeStatusSuccess    NodeStatus = 4
)

// Defines values for NodeStatusLabel.
const (
	NodeStatusLabelCanceled   NodeStatusLabel = "canceled"
	NodeStatusLabelFailed     NodeStatusLabel = "failed"
	NodeStatusLabelFinished   NodeStatusLabel = "finished"
	NodeStatusLabelNotStarted NodeStatusLabel = "not started"
	NodeStatusLabelRunning    NodeStatusLabel = "running"
	NodeStatusLabelSkipped    NodeStatusLabel = "skipped"
)

// Defines values for Status.
const (
	StatusCancelled  Status = 3
	StatusFailed     Status = 2
	StatusNotStarted Status = 0
	StatusQueued     Status = 5
	StatusRunning    Status = 1
	StatusSuccess    Status = 4
)

// Defines values for StatusLabel.
const (
	StatusLabelCancelled  StatusLabel = "cancelled"
	StatusLabelFailed     StatusLabel = "failed"
	StatusLabelFinished   StatusLabel = "finished"
	StatusLabelNotStarted StatusLabel = "not started"
	StatusLabelQueued     StatusLabel = "queued"
	StatusLabelRunning    StatusLabel = "running"
)

// Defines values for StdoutOrStderr.
const (
	StdoutOrStderrStderr StdoutOrStderr = "stderr"
	StdoutOrStderrStdout StdoutOrStderr = "stdout"
)

// ChildWorkflow Metadata for a child workflow
type ChildWorkflow struct {
	// WorkflowId Unique identifier for the workflow
	WorkflowId WorkflowId `json:"workflowId"`
}

// Condition Precondition that must be satisfied before running a step or workflow
type Condition struct {
	// Condition Expression or check to evaluate
	Condition string `json:"condition"`

	// Error Error message if the condition is not met
	Error *string `json:"error,omitempty"`

	// Expected Expected result of the condition evaluation
	Expected *string `json:"expected,omitempty"`

	// Matched Whether the condition was met
	Matched *bool `json:"matched,omitempty"`
}

// DAG Core DAG configuration containing definition and metadata
type DAG struct {
	// DefaultParams Default parameter values in JSON format if not specified at workflow creation
	DefaultParams *string `json:"defaultParams,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description *string `json:"description,omitempty"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"group,omitempty"`

	// Name Logical name of the DAG
	Name string `json:"name"`

	// Params List of parameter names that can be passed to workflows created from this DAG
	Params *[]string `json:"params,omitempty"`

	// Schedule List of scheduling expressions defining when workflows should be created from this DAG
	Schedule *[]Schedule `json:"schedule,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"tags,omitempty"`
}

// DAGDetails Detailed DAG configuration information
type DAGDetails struct {
	// DefaultParams Default parameter values in JSON format if not specified at workflow creation
	DefaultParams *string `json:"defaultParams,omitempty"`

	// Delay Time in seconds to wait before starting a workflow
	Delay *int `json:"delay,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description *string `json:"description,omitempty"`

	// Env List of environment variables to set before executing a workflow
	Env *[]string `json:"env,omitempty"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"group,omitempty"`

	// HandlerOn Configuration for event handlers in a workflow
	HandlerOn *HandlerOn `json:"handlerOn,omitempty"`

	// HistRetentionDays Number of days to retain historical logs
	HistRetentionDays *int `json:"histRetentionDays,omitempty"`

	// LogDir Directory path for storing log files
	LogDir *string `json:"logDir,omitempty"`

	// MaxActiveSteps Maximum number of concurrent workflows allowed from this DAG
	MaxActiveSteps *int `json:"maxActiveSteps,omitempty"`

	// MaxActiveWorkflows Maximum number of concurrent workflows allowed from this DAG
	MaxActiveWorkflows *int `json:"maxActiveWorkflows,omitempty"`

	// Name Unique identifier for the DAG within its group
	Name string `json:"name"`

	// Params List of parameter names that can be passed to workflows created from this DAG
	Params *[]string `json:"params,omitempty"`

	// Preconditions Conditions that must be met before a workflow can start
	Preconditions *[]Condition `json:"preconditions,omitempty"`

	// Schedule List of scheduling expressions defining when workflows should be created from this DAG
	Schedule *[]Schedule `json:"schedule,omitempty"`

	// Steps List of steps to execute in workflows created from this DAG
	Steps *[]Step `json:"steps,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"tags,omitempty"`
}

// DAGFile DAG file with its status information
type DAGFile struct {
	// Dag Core DAG configuration containing definition and metadata
	Dag DAG `json:"dag"`

	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// FileName File ID of the DAG file
	FileName string `json:"fileName"`

	// LatestWorkflow Current status of a workflow
	LatestWorkflow WorkflowSummary `json:"latestWorkflow"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"suspended"`
}

// DAGFileName Name of the DAG file
type DAGFileName = string

// DAGGridItem Grid item for visualizing workflow execution history
type DAGGridItem struct {
	// History Status of the step ordered by time
	History []NodeStatus `json:"history"`

	// Name Name of the step
	Name string `json:"name"`
}

// DAGName Name of the DAG
type DAGName = string

// Error Generic error response object
type Error struct {
	// Code Error code indicating the type of error
	Code ErrorCode `json:"code"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Short error message
	Message string `json:"message"`
}

// ErrorCode Error code indicating the type of error
type ErrorCode string

// HandlerOn Configuration for event handlers in a workflow
type HandlerOn struct {
	// Cancel Individual task definition that performs a specific operation in a workflow
	Cancel *Step `json:"cancel,omitempty"`

	// Exit Individual task definition that performs a specific operation in a workflow
	Exit *Step `json:"exit,omitempty"`

	// Failure Individual task definition that performs a specific operation in a workflow
	Failure *Step `json:"failure,omitempty"`

	// Success Individual task definition that performs a specific operation in a workflow
	Success *Step `json:"success,omitempty"`
}

// HealthResponse Response object for the health check endpoint
type HealthResponse struct {
	// Status Overall health status of the server
	Status HealthResponseStatus `json:"status"`

	// Timestamp Current server time
	Timestamp string `json:"timestamp"`

	// Uptime Server uptime in seconds
	Uptime int `json:"uptime"`

	// Version Current version of the server
	Version string `json:"version"`
}

// HealthResponseStatus Overall health status of the server
type HealthResponseStatus string

// ListTagResponse Response object for listing all tags
type ListTagResponse struct {
	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// Tags List of unique tags
	Tags []string `json:"tags"`
}

// Log Log information for the execution
type Log struct {
	// Content Log content
	Content string `json:"content"`

	// HasMore Whether there are more lines available
	HasMore *bool `json:"hasMore,omitempty"`

	// IsEstimate Whether the line count is an estimate
	IsEstimate *bool `json:"isEstimate,omitempty"`

	// LineCount Number of lines returned
	LineCount *int `json:"lineCount,omitempty"`

	// TotalLines Total number of lines in the log file
	TotalLines *int `json:"totalLines,omitempty"`
}

// Node Status of an individual step within a workflow
type Node struct {
	// Children List of child workflows associated with this step
	Children *[]ChildWorkflow `json:"children,omitempty"`

	// DoneCount Number of successful completions for repeating steps
	DoneCount int `json:"doneCount"`

	// Error Error message if the step failed
	Error *string `json:"error,omitempty"`

	// FinishedAt RFC3339 timestamp when the step finished
	FinishedAt string `json:"finishedAt"`

	// RetryCount Number of retry attempts made for this step
	RetryCount int `json:"retryCount"`

	// StartedAt RFC3339 timestamp when the step started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current node state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Skipped"
	Status NodeStatus `json:"status"`

	// StatusLabel Human-readable status description for the node
	StatusLabel NodeStatusLabel `json:"statusLabel"`

	// Stderr Path to the standard error log file for this step
	Stderr string `json:"stderr"`

	// Stdout Path to the standard output log file for this step
	Stdout string `json:"stdout"`

	// Step Individual task definition that performs a specific operation in a workflow
	Step Step `json:"step"`
}

// NodeStatus Numeric status code indicating current node state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
// 5: "Skipped"
type NodeStatus int

// NodeStatusLabel Human-readable status description for the node
type NodeStatusLabel string

// Pagination defines model for Pagination.
type Pagination struct {
	// CurrentPage current page number
	CurrentPage int `json:"currentPage"`

	// NextPage next page number
	NextPage int `json:"nextPage"`

	// PrevPage previous page number
	PrevPage int `json:"prevPage"`

	// TotalPages total number of pages
	TotalPages int `json:"totalPages"`

	// TotalRecords total number of records
	TotalRecords int `json:"totalRecords"`
}

// RepeatPolicy Configuration for step retry behavior
type RepeatPolicy struct {
	// Interval Time in seconds to wait between retry attempts
	Interval *int `json:"interval,omitempty"`

	// Repeat Whether the step should be retried on failure
	Repeat *bool `json:"repeat,omitempty"`
}

// Schedule Schedule configuration for workflow creation
type Schedule struct {
	// Expression Cron expression or schedule pattern
	Expression string `json:"expression"`
}

// SearchDAGsMatchItem Details of a search match within a DAG definition
type SearchDAGsMatchItem struct {
	// Line Matching line content
	Line string `json:"line"`

	// LineNumber Line number where match was found
	LineNumber int `json:"lineNumber"`

	// StartLine Start line for context
	StartLine int `json:"startLine"`
}

// SearchResultItem Individual search result item for a DAG
type SearchResultItem struct {
	// Dag Core DAG configuration containing definition and metadata
	Dag DAG `json:"dag"`

	// Matches Details of where matches were found
	Matches []SearchDAGsMatchItem `json:"matches"`

	// Name Name of the matching DAG
	Name string `json:"name"`
}

// Status Numeric status code indicating current workflow state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
// 5: "Queued"
type Status int

// StatusLabel Human-readable status description for the workflow
type StatusLabel string

// StdoutOrStderr defines model for StdoutOrStderr.
type StdoutOrStderr string

// Step Individual task definition that performs a specific operation in a workflow
type Step struct {
	// Args List of arguments to pass to the command
	Args *[]string `json:"args,omitempty"`

	// CmdWithArgs Complete command string including arguments to execute
	CmdWithArgs *string `json:"cmdWithArgs,omitempty"`

	// Command Base command to execute without arguments
	Command *string `json:"command,omitempty"`

	// Depends List of step names that must complete before this step can start
	Depends *[]string `json:"depends,omitempty"`

	// Description Human-readable description of what the step does
	Description *string `json:"description,omitempty"`

	// Dir Working directory for executing the step's command
	Dir *string `json:"dir,omitempty"`

	// MailOnError Whether to send email notifications on step failure
	MailOnError *bool `json:"mailOnError,omitempty"`

	// Name Unique identifier for the step within the workflow
	Name string `json:"name"`

	// Output Variable name to store the step's output
	Output *string `json:"output,omitempty"`

	// Params Parameters to pass to the child workflow in JSON format
	Params *string `json:"params,omitempty"`

	// Preconditions Conditions that must be met before the step can start
	Preconditions *[]Condition `json:"preconditions,omitempty"`

	// RepeatPolicy Configuration for step retry behavior
	RepeatPolicy *RepeatPolicy `json:"repeatPolicy,omitempty"`

	// Run The name of the DAG to run as a child workflow
	Run *string `json:"run,omitempty"`

	// Script Script content if the step executes a script file
	Script *string `json:"script,omitempty"`

	// Stderr File path for capturing standard error
	Stderr *string `json:"stderr,omitempty"`

	// Stdout File path for capturing standard output
	Stdout *string `json:"stdout,omitempty"`
}

// UnixTimestamp Unix timestamp in seconds
type UnixTimestamp = int64

// WorkflowDetails defines model for WorkflowDetails.
type WorkflowDetails struct {
	// FinishedAt RFC 3339 timestamp when the workflow finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to the log file
	Log string `json:"log"`

	// Name Name of the DAG
	Name DAGName `json:"name"`

	// Nodes Status of individual steps within the workflow
	Nodes []Node `json:"nodes"`

	// OnCancel Status of an individual step within a workflow
	OnCancel *Node `json:"onCancel,omitempty"`

	// OnExit Status of an individual step within a workflow
	OnExit *Node `json:"onExit,omitempty"`

	// OnFailure Status of an individual step within a workflow
	OnFailure *Node `json:"onFailure,omitempty"`

	// OnSuccess Status of an individual step within a workflow
	OnSuccess *Node `json:"onSuccess,omitempty"`

	// Params Runtime parameters passed to the workflow in JSON format
	Params *string `json:"params,omitempty"`

	// ParentWorkflowId ID of the parent workflow
	ParentWorkflowId *string `json:"parentWorkflowId,omitempty"`

	// ParentWorkflowName Name of the parent workflow
	ParentWorkflowName *string `json:"parentWorkflowName,omitempty"`

	// Pid Process ID of the workflow
	Pid *int `json:"pid,omitempty"`

	// Preconditions List of preconditions that must be met before the workflow can start
	Preconditions *[]Condition `json:"preconditions,omitempty"`

	// QueuedAt RFC 3339 timestamp when the workflow was queued
	QueuedAt *string `json:"queuedAt,omitempty"`

	// RootWorkflowId ID of the root workflow
	RootWorkflowId string `json:"rootWorkflowId"`

	// RootWorkflowName Name of the root workflow
	RootWorkflowName string `json:"rootWorkflowName"`

	// StartedAt RFC 3339 timestamp when the workflow started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current workflow state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Queued"
	Status Status `json:"status"`

	// StatusLabel Human-readable status description for the workflow
	StatusLabel StatusLabel `json:"statusLabel"`

	// WorkflowId Unique identifier for the workflow
	WorkflowId WorkflowId `json:"workflowId"`
}

// WorkflowId Unique identifier for the workflow
type WorkflowId = string

// WorkflowSummary Current status of a workflow
type WorkflowSummary struct {
	// FinishedAt RFC 3339 timestamp when the workflow finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to the log file
	Log string `json:"log"`

	// Name Name of the DAG
	Name DAGName `json:"name"`

	// Params Runtime parameters passed to the workflow in JSON format
	Params *string `json:"params,omitempty"`

	// ParentWorkflowId ID of the parent workflow
	ParentWorkflowId *string `json:"parentWorkflowId,omitempty"`

	// ParentWorkflowName Name of the parent workflow
	ParentWorkflowName *string `json:"parentWorkflowName,omitempty"`

	// Pid Process ID of the workflow
	Pid *int `json:"pid,omitempty"`

	// QueuedAt RFC 3339 timestamp when the workflow was queued
	QueuedAt *string `json:"queuedAt,omitempty"`

	// RootWorkflowId ID of the root workflow
	RootWorkflowId string `json:"rootWorkflowId"`

	// RootWorkflowName Name of the root workflow
	RootWorkflowName string `json:"rootWorkflowName"`

	// StartedAt RFC 3339 timestamp when the workflow started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current workflow state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Queued"
	Status Status `json:"status"`

	// StatusLabel Human-readable status description for the workflow
	StatusLabel StatusLabel `json:"statusLabel"`

	// WorkflowId Unique identifier for the workflow
	WorkflowId WorkflowId `json:"workflowId"`
}

// DateTimeFrom Unix timestamp in seconds
type DateTimeFrom = UnixTimestamp

// DateTimeTo Unix timestamp in seconds
type DateTimeTo = UnixTimestamp

// Head defines model for Head.
type Head = int

// Limit defines model for Limit.
type Limit = int

// Offset defines model for Offset.
type Offset = int

// Page defines model for Page.
type Page = int

// PerPage defines model for PerPage.
type PerPage = int

// RemoteNode defines model for RemoteNode.
type RemoteNode = string

// StepName defines model for StepName.
type StepName = string

// Tail defines model for Tail.
type Tail = int

// WorkflowIdSearch Unique identifier for the workflow
type WorkflowIdSearch = WorkflowId

// WorkflowName defines model for WorkflowName.
type WorkflowName = string

// ListDAGsParams defines parameters for ListDAGs.
type ListDAGsParams struct {
	// Page page number of items to fetch (default is 1)
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage number of items per page (default is 30, max is 100)
	PerPage *PerPage `form:"perPage,omitempty" json:"perPage,omitempty"`

	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Name Filter DAGs by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Tag Filter DAGs by tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`
}

// CreateNewDAGJSONBody defines parameters for CreateNewDAG.
type CreateNewDAGJSONBody struct {
	// Name Name of the DAG
	Name DAGName `json:"name"`
}

// CreateNewDAGParams defines parameters for CreateNewDAG.
type CreateNewDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// SearchDAGsParams defines parameters for SearchDAGs.
type SearchDAGsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Q A search query string
	Q string `form:"q" json:"q"`
}

// GetAllDAGTagsParams defines parameters for GetAllDAGTags.
type GetAllDAGTagsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// DeleteDAGParams defines parameters for DeleteDAG.
type DeleteDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGDetailsParams defines parameters for GetDAGDetails.
type GetDAGDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// RenameDAGJSONBody defines parameters for RenameDAG.
type RenameDAGJSONBody struct {
	// NewFileName New file name for the DAG
	NewFileName string `json:"newFileName"`
}

// RenameDAGParams defines parameters for RenameDAG.
type RenameDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// RetryDAGWorkflowJSONBody defines parameters for RetryDAGWorkflow.
type RetryDAGWorkflowJSONBody struct {
	// WorkflowId ID of the workflow to retry
	WorkflowId string `json:"workflowId"`
}

// RetryDAGWorkflowParams defines parameters for RetryDAGWorkflow.
type RetryDAGWorkflowParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGSpecParams defines parameters for GetDAGSpec.
type GetDAGSpecParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// UpdateDAGSpecJSONBody defines parameters for UpdateDAGSpec.
type UpdateDAGSpecJSONBody struct {
	// Spec The new DAG spec in YAML format
	Spec string `json:"spec"`
}

// UpdateDAGSpecParams defines parameters for UpdateDAGSpec.
type UpdateDAGSpecParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// ExecuteDAGJSONBody defines parameters for ExecuteDAG.
type ExecuteDAGJSONBody struct {
	// Params Parameters to pass to the workflow in JSON format
	Params *string `json:"params,omitempty"`
}

// ExecuteDAGParams defines parameters for ExecuteDAG.
type ExecuteDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// TerminateDAGWorkflowParams defines parameters for TerminateDAGWorkflow.
type TerminateDAGWorkflowParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// UpdateDAGSuspensionStateJSONBody defines parameters for UpdateDAGSuspensionState.
type UpdateDAGSuspensionStateJSONBody struct {
	// Suspend Suspend status to set for the DAG
	Suspend bool `json:"suspend"`
}

// UpdateDAGSuspensionStateParams defines parameters for UpdateDAGSuspensionState.
type UpdateDAGSuspensionStateParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGWorkflowHistoryParams defines parameters for GetDAGWorkflowHistory.
type GetDAGWorkflowHistoryParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGWorkflowDetailsParams defines parameters for GetDAGWorkflowDetails.
type GetDAGWorkflowDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// ListWorkflowsParams defines parameters for ListWorkflows.
type ListWorkflowsParams struct {
	// Status status of the workflow
	Status *Status `form:"status,omitempty" json:"status,omitempty"`

	// FromDate start datetime for filtering workflows in ISO 8601 format with timezone
	FromDate *DateTimeFrom `form:"fromDate,omitempty" json:"fromDate,omitempty"`

	// ToDate end datetime for filtering workflows in ISO 8601 format with timezone
	ToDate *DateTimeTo `form:"toDate,omitempty" json:"toDate,omitempty"`

	// WorkflowId ID of the workflow or 'latest' to get the most recent workflow
	WorkflowId *WorkflowIdSearch `form:"workflowId,omitempty" json:"workflowId,omitempty"`

	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Name Filter workflows by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// ListWorkflowsByNameParams defines parameters for ListWorkflowsByName.
type ListWorkflowsByNameParams struct {
	// Status status of the workflow
	Status *Status `form:"status,omitempty" json:"status,omitempty"`

	// FromDate start datetime for filtering workflows in ISO 8601 format with timezone
	FromDate *DateTimeFrom `form:"fromDate,omitempty" json:"fromDate,omitempty"`

	// ToDate end datetime for filtering workflows in ISO 8601 format with timezone
	ToDate *DateTimeTo `form:"toDate,omitempty" json:"toDate,omitempty"`

	// WorkflowId ID of the workflow or 'latest' to get the most recent workflow
	WorkflowId *WorkflowIdSearch `form:"workflowId,omitempty" json:"workflowId,omitempty"`

	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetWorkflowDetailsParams defines parameters for GetWorkflowDetails.
type GetWorkflowDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetChildWorkflowDetailsParams defines parameters for GetChildWorkflowDetails.
type GetChildWorkflowDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetChildWorkflowLogParams defines parameters for GetChildWorkflowLog.
type GetChildWorkflowLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Tail Number of lines to return from the end of the file
	Tail *Tail `form:"tail,omitempty" json:"tail,omitempty"`

	// Head Number of lines to return from the beginning of the file
	Head *Head `form:"head,omitempty" json:"head,omitempty"`

	// Offset Line number to start reading from (1-based)
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of lines to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetChildWorkflowStepLogParams defines parameters for GetChildWorkflowStepLog.
type GetChildWorkflowStepLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Tail Number of lines to return from the end of the file
	Tail *Tail `form:"tail,omitempty" json:"tail,omitempty"`

	// Head Number of lines to return from the beginning of the file
	Head *Head `form:"head,omitempty" json:"head,omitempty"`

	// Offset Line number to start reading from (1-based)
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of lines to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// StdoutOrStderr Whether to return stdout or stderr logs
	StdoutOrStderr *StdoutOrStderr `form:"stdoutOrStderr,omitempty" json:"stdoutOrStderr,omitempty"`
}

// UpdateChildWorkflowStepStatusJSONBody defines parameters for UpdateChildWorkflowStepStatus.
type UpdateChildWorkflowStepStatusJSONBody struct {
	// Status Numeric status code indicating current node state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Skipped"
	Status NodeStatus `json:"status"`
}

// UpdateChildWorkflowStepStatusParams defines parameters for UpdateChildWorkflowStepStatus.
type UpdateChildWorkflowStepStatusParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetWorkflowLogParams defines parameters for GetWorkflowLog.
type GetWorkflowLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Tail Number of lines to return from the end of the file
	Tail *Tail `form:"tail,omitempty" json:"tail,omitempty"`

	// Head Number of lines to return from the beginning of the file
	Head *Head `form:"head,omitempty" json:"head,omitempty"`

	// Offset Line number to start reading from (1-based)
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of lines to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// RetryWorkflowJSONBody defines parameters for RetryWorkflow.
type RetryWorkflowJSONBody struct {
	// WorkflowId ID of the workflow to retry
	WorkflowId string `json:"workflowId"`
}

// RetryWorkflowParams defines parameters for RetryWorkflow.
type RetryWorkflowParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetWorkflowStepLogParams defines parameters for GetWorkflowStepLog.
type GetWorkflowStepLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Tail Number of lines to return from the end of the file
	Tail *Tail `form:"tail,omitempty" json:"tail,omitempty"`

	// Head Number of lines to return from the beginning of the file
	Head *Head `form:"head,omitempty" json:"head,omitempty"`

	// Offset Line number to start reading from (1-based)
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of lines to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// StdoutOrStderr Whether to return stdout or stderr logs
	StdoutOrStderr *StdoutOrStderr `form:"stdoutOrStderr,omitempty" json:"stdoutOrStderr,omitempty"`
}

// UpdateWorkflowStepStatusJSONBody defines parameters for UpdateWorkflowStepStatus.
type UpdateWorkflowStepStatusJSONBody struct {
	// Status Numeric status code indicating current node state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Skipped"
	Status NodeStatus `json:"status"`
}

// UpdateWorkflowStepStatusParams defines parameters for UpdateWorkflowStepStatus.
type UpdateWorkflowStepStatusParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// TerminateWorkflowParams defines parameters for TerminateWorkflow.
type TerminateWorkflowParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// CreateNewDAGJSONRequestBody defines body for CreateNewDAG for application/json ContentType.
type CreateNewDAGJSONRequestBody CreateNewDAGJSONBody

// RenameDAGJSONRequestBody defines body for RenameDAG for application/json ContentType.
type RenameDAGJSONRequestBody RenameDAGJSONBody

// RetryDAGWorkflowJSONRequestBody defines body for RetryDAGWorkflow for application/json ContentType.
type RetryDAGWorkflowJSONRequestBody RetryDAGWorkflowJSONBody

// UpdateDAGSpecJSONRequestBody defines body for UpdateDAGSpec for application/json ContentType.
type UpdateDAGSpecJSONRequestBody UpdateDAGSpecJSONBody

// ExecuteDAGJSONRequestBody defines body for ExecuteDAG for application/json ContentType.
type ExecuteDAGJSONRequestBody ExecuteDAGJSONBody

// UpdateDAGSuspensionStateJSONRequestBody defines body for UpdateDAGSuspensionState for application/json ContentType.
type UpdateDAGSuspensionStateJSONRequestBody UpdateDAGSuspensionStateJSONBody

// UpdateChildWorkflowStepStatusJSONRequestBody defines body for UpdateChildWorkflowStepStatus for application/json ContentType.
type UpdateChildWorkflowStepStatusJSONRequestBody UpdateChildWorkflowStepStatusJSONBody

// RetryWorkflowJSONRequestBody defines body for RetryWorkflow for application/json ContentType.
type RetryWorkflowJSONRequestBody RetryWorkflowJSONBody

// UpdateWorkflowStepStatusJSONRequestBody defines body for UpdateWorkflowStepStatus for application/json ContentType.
type UpdateWorkflowStepStatusJSONRequestBody UpdateWorkflowStepStatusJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all available DAGs
	// (GET /dags)
	ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams)
	// Create a new DAG definition
	// (POST /dags)
	CreateNewDAG(w http.ResponseWriter, r *http.Request, params CreateNewDAGParams)
	// Search DAGs
	// (GET /dags/search)
	SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams)
	// List all available DAG tags
	// (GET /dags/tags)
	GetAllDAGTags(w http.ResponseWriter, r *http.Request, params GetAllDAGTagsParams)
	// Delete an existing DAG
	// (DELETE /dags/{fileName})
	DeleteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params DeleteDAGParams)
	// Retrieve comprehensive DAG information
	// (GET /dags/{fileName})
	GetDAGDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDetailsParams)
	// Change DAG file ID
	// (POST /dags/{fileName}/rename)
	RenameDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RenameDAGParams)
	// Retry workflow execution
	// (POST /dags/{fileName}/retry)
	RetryDAGWorkflow(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RetryDAGWorkflowParams)
	// Retrieve DAG specification
	// (GET /dags/{fileName}/spec)
	GetDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGSpecParams)
	// Update DAG spec
	// (PUT /dags/{fileName}/spec)
	UpdateDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSpecParams)
	// Create and execute a workflow from DAG
	// (POST /dags/{fileName}/start)
	ExecuteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params ExecuteDAGParams)
	// Terminate a running workflow
	// (POST /dags/{fileName}/stop)
	TerminateDAGWorkflow(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params TerminateDAGWorkflowParams)
	// Toggle DAG suspension state
	// (POST /dags/{fileName}/suspend)
	UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSuspensionStateParams)
	// Retrieve execution history of a DAG
	// (GET /dags/{fileName}/workflows)
	GetDAGWorkflowHistory(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGWorkflowHistoryParams)
	// Get detailed status of a specific workflow
	// (GET /dags/{fileName}/workflows/{workflowId})
	GetDAGWorkflowDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, workflowId WorkflowId, params GetDAGWorkflowDetailsParams)
	// Check server health status
	// (GET /health)
	GetHealthStatus(w http.ResponseWriter, r *http.Request)
	// List all workflows
	// (GET /workflows)
	ListWorkflows(w http.ResponseWriter, r *http.Request, params ListWorkflowsParams)
	// List all workflows with a specific name
	// (GET /workflows/{name})
	ListWorkflowsByName(w http.ResponseWriter, r *http.Request, name WorkflowName, params ListWorkflowsByNameParams)
	// Retrieve detailed status of a workflow
	// (GET /workflows/{name}/{workflowId})
	GetWorkflowDetails(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, params GetWorkflowDetailsParams)
	// Retrieve detailed status of a child workflow
	// (GET /workflows/{name}/{workflowId}/children/{childWorkflowId})
	GetChildWorkflowDetails(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, childWorkflowId string, params GetChildWorkflowDetailsParams)
	// Retrieve log for a specific child workflow
	// (GET /workflows/{name}/{workflowId}/children/{childWorkflowId}/log)
	GetChildWorkflowLog(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, childWorkflowId string, params GetChildWorkflowLogParams)
	// Retrieve log for a specific step in a child workflow
	// (GET /workflows/{name}/{workflowId}/children/{childWorkflowId}/steps/{stepName}/log)
	GetChildWorkflowStepLog(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, childWorkflowId string, stepName StepName, params GetChildWorkflowStepLogParams)
	// Manually update a step's execution status in a child workflow
	// (PATCH /workflows/{name}/{workflowId}/children/{childWorkflowId}/steps/{stepName}/status)
	UpdateChildWorkflowStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, childWorkflowId string, stepName StepName, params UpdateChildWorkflowStepStatusParams)
	// Retrieve full execution log of a workflow
	// (GET /workflows/{name}/{workflowId}/log)
	GetWorkflowLog(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, params GetWorkflowLogParams)
	// Retry workflow execution
	// (POST /workflows/{name}/{workflowId}/retry)
	RetryWorkflow(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, params RetryWorkflowParams)
	// Retrieve log for a specific step in a workflow
	// (GET /workflows/{name}/{workflowId}/steps/{stepName}/log)
	GetWorkflowStepLog(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, stepName StepName, params GetWorkflowStepLogParams)
	// Manually update a step's execution status
	// (PATCH /workflows/{name}/{workflowId}/steps/{stepName}/status)
	UpdateWorkflowStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, stepName StepName, params UpdateWorkflowStepStatusParams)
	// Terminate a running workflow
	// (POST /workflows/{name}/{workflowId}/stop)
	TerminateWorkflow(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, params TerminateWorkflowParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all available DAGs
// (GET /dags)
func (_ Unimplemented) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new DAG definition
// (POST /dags)
func (_ Unimplemented) CreateNewDAG(w http.ResponseWriter, r *http.Request, params CreateNewDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search DAGs
// (GET /dags/search)
func (_ Unimplemented) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all available DAG tags
// (GET /dags/tags)
func (_ Unimplemented) GetAllDAGTags(w http.ResponseWriter, r *http.Request, params GetAllDAGTagsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an existing DAG
// (DELETE /dags/{fileName})
func (_ Unimplemented) DeleteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params DeleteDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve comprehensive DAG information
// (GET /dags/{fileName})
func (_ Unimplemented) GetDAGDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change DAG file ID
// (POST /dags/{fileName}/rename)
func (_ Unimplemented) RenameDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RenameDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retry workflow execution
// (POST /dags/{fileName}/retry)
func (_ Unimplemented) RetryDAGWorkflow(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RetryDAGWorkflowParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve DAG specification
// (GET /dags/{fileName}/spec)
func (_ Unimplemented) GetDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGSpecParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update DAG spec
// (PUT /dags/{fileName}/spec)
func (_ Unimplemented) UpdateDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSpecParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create and execute a workflow from DAG
// (POST /dags/{fileName}/start)
func (_ Unimplemented) ExecuteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params ExecuteDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Terminate a running workflow
// (POST /dags/{fileName}/stop)
func (_ Unimplemented) TerminateDAGWorkflow(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params TerminateDAGWorkflowParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Toggle DAG suspension state
// (POST /dags/{fileName}/suspend)
func (_ Unimplemented) UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSuspensionStateParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve execution history of a DAG
// (GET /dags/{fileName}/workflows)
func (_ Unimplemented) GetDAGWorkflowHistory(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGWorkflowHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get detailed status of a specific workflow
// (GET /dags/{fileName}/workflows/{workflowId})
func (_ Unimplemented) GetDAGWorkflowDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, workflowId WorkflowId, params GetDAGWorkflowDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Check server health status
// (GET /health)
func (_ Unimplemented) GetHealthStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all workflows
// (GET /workflows)
func (_ Unimplemented) ListWorkflows(w http.ResponseWriter, r *http.Request, params ListWorkflowsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all workflows with a specific name
// (GET /workflows/{name})
func (_ Unimplemented) ListWorkflowsByName(w http.ResponseWriter, r *http.Request, name WorkflowName, params ListWorkflowsByNameParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve detailed status of a workflow
// (GET /workflows/{name}/{workflowId})
func (_ Unimplemented) GetWorkflowDetails(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, params GetWorkflowDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve detailed status of a child workflow
// (GET /workflows/{name}/{workflowId}/children/{childWorkflowId})
func (_ Unimplemented) GetChildWorkflowDetails(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, childWorkflowId string, params GetChildWorkflowDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve log for a specific child workflow
// (GET /workflows/{name}/{workflowId}/children/{childWorkflowId}/log)
func (_ Unimplemented) GetChildWorkflowLog(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, childWorkflowId string, params GetChildWorkflowLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve log for a specific step in a child workflow
// (GET /workflows/{name}/{workflowId}/children/{childWorkflowId}/steps/{stepName}/log)
func (_ Unimplemented) GetChildWorkflowStepLog(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, childWorkflowId string, stepName StepName, params GetChildWorkflowStepLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Manually update a step's execution status in a child workflow
// (PATCH /workflows/{name}/{workflowId}/children/{childWorkflowId}/steps/{stepName}/status)
func (_ Unimplemented) UpdateChildWorkflowStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, childWorkflowId string, stepName StepName, params UpdateChildWorkflowStepStatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve full execution log of a workflow
// (GET /workflows/{name}/{workflowId}/log)
func (_ Unimplemented) GetWorkflowLog(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, params GetWorkflowLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retry workflow execution
// (POST /workflows/{name}/{workflowId}/retry)
func (_ Unimplemented) RetryWorkflow(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, params RetryWorkflowParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve log for a specific step in a workflow
// (GET /workflows/{name}/{workflowId}/steps/{stepName}/log)
func (_ Unimplemented) GetWorkflowStepLog(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, stepName StepName, params GetWorkflowStepLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Manually update a step's execution status
// (PATCH /workflows/{name}/{workflowId}/steps/{stepName}/status)
func (_ Unimplemented) UpdateWorkflowStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, stepName StepName, params UpdateWorkflowStepStatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Terminate a running workflow
// (POST /workflows/{name}/{workflowId}/stop)
func (_ Unimplemented) TerminateWorkflow(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, params TerminateWorkflowParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListDAGs operation middleware
func (siw *ServerInterfaceWrapper) ListDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDAGsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", r.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "perPage", Err: err})
		return
	}

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateNewDAG operation middleware
func (siw *ServerInterfaceWrapper) CreateNewDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateNewDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNewDAG(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchDAGs operation middleware
func (siw *ServerInterfaceWrapper) SearchDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchDAGsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Required query parameter "q" -------------

	if paramValue := r.URL.Query().Get("q"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "q"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllDAGTags operation middleware
func (siw *ServerInterfaceWrapper) GetAllDAGTags(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllDAGTagsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllDAGTags(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteDAG operation middleware
func (siw *ServerInterfaceWrapper) DeleteDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDAG(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGDetails(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RenameDAG operation middleware
func (siw *ServerInterfaceWrapper) RenameDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params RenameDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RenameDAG(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RetryDAGWorkflow operation middleware
func (siw *ServerInterfaceWrapper) RetryDAGWorkflow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params RetryDAGWorkflowParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetryDAGWorkflow(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGSpec operation middleware
func (siw *ServerInterfaceWrapper) GetDAGSpec(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGSpecParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGSpec(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDAGSpec operation middleware
func (siw *ServerInterfaceWrapper) UpdateDAGSpec(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateDAGSpecParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDAGSpec(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ExecuteDAG operation middleware
func (siw *ServerInterfaceWrapper) ExecuteDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ExecuteDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExecuteDAG(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// TerminateDAGWorkflow operation middleware
func (siw *ServerInterfaceWrapper) TerminateDAGWorkflow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params TerminateDAGWorkflowParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TerminateDAGWorkflow(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDAGSuspensionState operation middleware
func (siw *ServerInterfaceWrapper) UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateDAGSuspensionStateParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDAGSuspensionState(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGWorkflowHistory operation middleware
func (siw *ServerInterfaceWrapper) GetDAGWorkflowHistory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGWorkflowHistoryParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGWorkflowHistory(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGWorkflowDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGWorkflowDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	// ------------- Path parameter "workflowId" -------------
	var workflowId WorkflowId

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGWorkflowDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGWorkflowDetails(w, r, fileName, workflowId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealthStatus operation middleware
func (siw *ServerInterfaceWrapper) GetHealthStatus(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealthStatus(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListWorkflows operation middleware
func (siw *ServerInterfaceWrapper) ListWorkflows(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWorkflowsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "fromDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromDate", r.URL.Query(), &params.FromDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fromDate", Err: err})
		return
	}

	// ------------- Optional query parameter "toDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "toDate", r.URL.Query(), &params.ToDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toDate", Err: err})
		return
	}

	// ------------- Optional query parameter "workflowId" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflowId", r.URL.Query(), &params.WorkflowId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWorkflows(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListWorkflowsByName operation middleware
func (siw *ServerInterfaceWrapper) ListWorkflowsByName(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name WorkflowName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWorkflowsByNameParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "fromDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromDate", r.URL.Query(), &params.FromDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fromDate", Err: err})
		return
	}

	// ------------- Optional query parameter "toDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "toDate", r.URL.Query(), &params.ToDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toDate", Err: err})
		return
	}

	// ------------- Optional query parameter "workflowId" -------------

	err = runtime.BindQueryParameter("form", true, false, "workflowId", r.URL.Query(), &params.WorkflowId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWorkflowsByName(w, r, name, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWorkflowDetails operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflowDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "workflowId" -------------
	var workflowId WorkflowId

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkflowDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflowDetails(w, r, name, workflowId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetChildWorkflowDetails operation middleware
func (siw *ServerInterfaceWrapper) GetChildWorkflowDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "workflowId" -------------
	var workflowId WorkflowId

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	// ------------- Path parameter "childWorkflowId" -------------
	var childWorkflowId string

	err = runtime.BindStyledParameterWithOptions("simple", "childWorkflowId", chi.URLParam(r, "childWorkflowId"), &childWorkflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "childWorkflowId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChildWorkflowDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChildWorkflowDetails(w, r, name, workflowId, childWorkflowId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetChildWorkflowLog operation middleware
func (siw *ServerInterfaceWrapper) GetChildWorkflowLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "workflowId" -------------
	var workflowId WorkflowId

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	// ------------- Path parameter "childWorkflowId" -------------
	var childWorkflowId string

	err = runtime.BindStyledParameterWithOptions("simple", "childWorkflowId", chi.URLParam(r, "childWorkflowId"), &childWorkflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "childWorkflowId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChildWorkflowLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", r.URL.Query(), &params.Tail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tail", Err: err})
		return
	}

	// ------------- Optional query parameter "head" -------------

	err = runtime.BindQueryParameter("form", true, false, "head", r.URL.Query(), &params.Head)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "head", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChildWorkflowLog(w, r, name, workflowId, childWorkflowId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetChildWorkflowStepLog operation middleware
func (siw *ServerInterfaceWrapper) GetChildWorkflowStepLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "workflowId" -------------
	var workflowId WorkflowId

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	// ------------- Path parameter "childWorkflowId" -------------
	var childWorkflowId string

	err = runtime.BindStyledParameterWithOptions("simple", "childWorkflowId", chi.URLParam(r, "childWorkflowId"), &childWorkflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "childWorkflowId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChildWorkflowStepLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", r.URL.Query(), &params.Tail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tail", Err: err})
		return
	}

	// ------------- Optional query parameter "head" -------------

	err = runtime.BindQueryParameter("form", true, false, "head", r.URL.Query(), &params.Head)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "head", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "stdoutOrStderr" -------------

	err = runtime.BindQueryParameter("form", true, false, "stdoutOrStderr", r.URL.Query(), &params.StdoutOrStderr)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stdoutOrStderr", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChildWorkflowStepLog(w, r, name, workflowId, childWorkflowId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateChildWorkflowStepStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateChildWorkflowStepStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "workflowId" -------------
	var workflowId WorkflowId

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	// ------------- Path parameter "childWorkflowId" -------------
	var childWorkflowId string

	err = runtime.BindStyledParameterWithOptions("simple", "childWorkflowId", chi.URLParam(r, "childWorkflowId"), &childWorkflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "childWorkflowId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateChildWorkflowStepStatusParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateChildWorkflowStepStatus(w, r, name, workflowId, childWorkflowId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWorkflowLog operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflowLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "workflowId" -------------
	var workflowId WorkflowId

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkflowLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", r.URL.Query(), &params.Tail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tail", Err: err})
		return
	}

	// ------------- Optional query parameter "head" -------------

	err = runtime.BindQueryParameter("form", true, false, "head", r.URL.Query(), &params.Head)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "head", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflowLog(w, r, name, workflowId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RetryWorkflow operation middleware
func (siw *ServerInterfaceWrapper) RetryWorkflow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "workflowId" -------------
	var workflowId WorkflowId

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params RetryWorkflowParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetryWorkflow(w, r, name, workflowId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWorkflowStepLog operation middleware
func (siw *ServerInterfaceWrapper) GetWorkflowStepLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "workflowId" -------------
	var workflowId WorkflowId

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkflowStepLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", r.URL.Query(), &params.Tail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tail", Err: err})
		return
	}

	// ------------- Optional query parameter "head" -------------

	err = runtime.BindQueryParameter("form", true, false, "head", r.URL.Query(), &params.Head)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "head", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "stdoutOrStderr" -------------

	err = runtime.BindQueryParameter("form", true, false, "stdoutOrStderr", r.URL.Query(), &params.StdoutOrStderr)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stdoutOrStderr", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkflowStepLog(w, r, name, workflowId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateWorkflowStepStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateWorkflowStepStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "workflowId" -------------
	var workflowId WorkflowId

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateWorkflowStepStatusParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateWorkflowStepStatus(w, r, name, workflowId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// TerminateWorkflow operation middleware
func (siw *ServerInterfaceWrapper) TerminateWorkflow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "workflowId" -------------
	var workflowId WorkflowId

	err = runtime.BindStyledParameterWithOptions("simple", "workflowId", chi.URLParam(r, "workflowId"), &workflowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workflowId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params TerminateWorkflowParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TerminateWorkflow(w, r, name, workflowId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags", wrapper.ListDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags", wrapper.CreateNewDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/search", wrapper.SearchDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/tags", wrapper.GetAllDAGTags)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/dags/{fileName}", wrapper.DeleteDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileName}", wrapper.GetDAGDetails)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/rename", wrapper.RenameDAG)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/retry", wrapper.RetryDAGWorkflow)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileName}/spec", wrapper.GetDAGSpec)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/dags/{fileName}/spec", wrapper.UpdateDAGSpec)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/start", wrapper.ExecuteDAG)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/stop", wrapper.TerminateDAGWorkflow)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/suspend", wrapper.UpdateDAGSuspensionState)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileName}/workflows", wrapper.GetDAGWorkflowHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileName}/workflows/{workflowId}", wrapper.GetDAGWorkflowDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealthStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/workflows", wrapper.ListWorkflows)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/workflows/{name}", wrapper.ListWorkflowsByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/workflows/{name}/{workflowId}", wrapper.GetWorkflowDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/workflows/{name}/{workflowId}/children/{childWorkflowId}", wrapper.GetChildWorkflowDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/workflows/{name}/{workflowId}/children/{childWorkflowId}/log", wrapper.GetChildWorkflowLog)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/workflows/{name}/{workflowId}/children/{childWorkflowId}/steps/{stepName}/log", wrapper.GetChildWorkflowStepLog)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/workflows/{name}/{workflowId}/children/{childWorkflowId}/steps/{stepName}/status", wrapper.UpdateChildWorkflowStepStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/workflows/{name}/{workflowId}/log", wrapper.GetWorkflowLog)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/workflows/{name}/{workflowId}/retry", wrapper.RetryWorkflow)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/workflows/{name}/{workflowId}/steps/{stepName}/log", wrapper.GetWorkflowStepLog)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/workflows/{name}/{workflowId}/steps/{stepName}/status", wrapper.UpdateWorkflowStepStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/workflows/{name}/{workflowId}/stop", wrapper.TerminateWorkflow)
	})

	return r
}

type ListDAGsRequestObject struct {
	Params ListDAGsParams
}

type ListDAGsResponseObject interface {
	VisitListDAGsResponse(w http.ResponseWriter) error
}

type ListDAGs200JSONResponse struct {
	// Dags List of DAG definitions with their status and metadata
	Dags []DAGFile `json:"dags"`

	// Errors List of errors encountered during the request
	Errors     []string   `json:"errors"`
	Pagination Pagination `json:"pagination"`
}

func (response ListDAGs200JSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListDAGsdefaultJSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateNewDAGRequestObject struct {
	Params CreateNewDAGParams
	Body   *CreateNewDAGJSONRequestBody
}

type CreateNewDAGResponseObject interface {
	VisitCreateNewDAGResponse(w http.ResponseWriter) error
}

type CreateNewDAG201JSONResponse struct {
	// Name Name of the newly created DAG
	Name string `json:"name"`
}

func (response CreateNewDAG201JSONResponse) VisitCreateNewDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateNewDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateNewDAGdefaultJSONResponse) VisitCreateNewDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SearchDAGsRequestObject struct {
	Params SearchDAGsParams
}

type SearchDAGsResponseObject interface {
	VisitSearchDAGsResponse(w http.ResponseWriter) error
}

type SearchDAGs200JSONResponse struct {
	// Errors Errors encountered during the search
	Errors []string `json:"errors"`

	// Results Search results matching the query
	Results []SearchResultItem `json:"results"`
}

func (response SearchDAGs200JSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SearchDAGsdefaultJSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAllDAGTagsRequestObject struct {
	Params GetAllDAGTagsParams
}

type GetAllDAGTagsResponseObject interface {
	VisitGetAllDAGTagsResponse(w http.ResponseWriter) error
}

type GetAllDAGTags200JSONResponse ListTagResponse

func (response GetAllDAGTags200JSONResponse) VisitGetAllDAGTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllDAGTagsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetAllDAGTagsdefaultJSONResponse) VisitGetAllDAGTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteDAGRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   DeleteDAGParams
}

type DeleteDAGResponseObject interface {
	VisitDeleteDAGResponse(w http.ResponseWriter) error
}

type DeleteDAG204Response struct {
}

func (response DeleteDAG204Response) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteDAG404JSONResponse Error

func (response DeleteDAG404JSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteDAGdefaultJSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGDetailsRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   GetDAGDetailsParams
}

type GetDAGDetailsResponseObject interface {
	VisitGetDAGDetailsResponse(w http.ResponseWriter) error
}

type GetDAGDetails200JSONResponse struct {
	// Dag Detailed DAG configuration information
	Dag *DAGDetails `json:"dag,omitempty"`

	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// LatestWorkflow Detailed status of a workflow including child workflow nodes
	LatestWorkflow WorkflowDetails `json:"latestWorkflow"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"suspended"`
}

func (response GetDAGDetails200JSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGDetailsdefaultJSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RenameDAGRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   RenameDAGParams
	Body     *RenameDAGJSONRequestBody
}

type RenameDAGResponseObject interface {
	VisitRenameDAGResponse(w http.ResponseWriter) error
}

type RenameDAG200Response struct {
}

func (response RenameDAG200Response) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RenameDAG400JSONResponse Error

func (response RenameDAG400JSONResponse) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RenameDAG404JSONResponse Error

func (response RenameDAG404JSONResponse) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RenameDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RenameDAGdefaultJSONResponse) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetryDAGWorkflowRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   RetryDAGWorkflowParams
	Body     *RetryDAGWorkflowJSONRequestBody
}

type RetryDAGWorkflowResponseObject interface {
	VisitRetryDAGWorkflowResponse(w http.ResponseWriter) error
}

type RetryDAGWorkflow200Response struct {
}

func (response RetryDAGWorkflow200Response) VisitRetryDAGWorkflowResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RetryDAGWorkflowdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RetryDAGWorkflowdefaultJSONResponse) VisitRetryDAGWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGSpecRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   GetDAGSpecParams
}

type GetDAGSpecResponseObject interface {
	VisitGetDAGSpecResponse(w http.ResponseWriter) error
}

type GetDAGSpec200JSONResponse struct {
	// Dag Detailed DAG configuration information
	Dag *DAGDetails `json:"dag,omitempty"`

	// Errors List of errors in the spec
	Errors []string `json:"errors"`

	// Spec The DAG spec in YAML format
	Spec string `json:"spec"`
}

func (response GetDAGSpec200JSONResponse) VisitGetDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGSpecdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGSpecdefaultJSONResponse) VisitGetDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateDAGSpecRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   UpdateDAGSpecParams
	Body     *UpdateDAGSpecJSONRequestBody
}

type UpdateDAGSpecResponseObject interface {
	VisitUpdateDAGSpecResponse(w http.ResponseWriter) error
}

type UpdateDAGSpec200JSONResponse struct {
	// Errors List of errors in the spec
	Errors []string `json:"errors"`
}

func (response UpdateDAGSpec200JSONResponse) VisitUpdateDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGSpecdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateDAGSpecdefaultJSONResponse) VisitUpdateDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExecuteDAGRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   ExecuteDAGParams
	Body     *ExecuteDAGJSONRequestBody
}

type ExecuteDAGResponseObject interface {
	VisitExecuteDAGResponse(w http.ResponseWriter) error
}

type ExecuteDAG200JSONResponse struct {
	// WorkflowId ID of the created workflow
	WorkflowId string `json:"workflowId"`
}

func (response ExecuteDAG200JSONResponse) VisitExecuteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ExecuteDAGdefaultJSONResponse) VisitExecuteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TerminateDAGWorkflowRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   TerminateDAGWorkflowParams
}

type TerminateDAGWorkflowResponseObject interface {
	VisitTerminateDAGWorkflowResponse(w http.ResponseWriter) error
}

type TerminateDAGWorkflow200Response struct {
}

func (response TerminateDAGWorkflow200Response) VisitTerminateDAGWorkflowResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type TerminateDAGWorkflowdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response TerminateDAGWorkflowdefaultJSONResponse) VisitTerminateDAGWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateDAGSuspensionStateRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   UpdateDAGSuspensionStateParams
	Body     *UpdateDAGSuspensionStateJSONRequestBody
}

type UpdateDAGSuspensionStateResponseObject interface {
	VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error
}

type UpdateDAGSuspensionState200Response struct {
}

func (response UpdateDAGSuspensionState200Response) VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateDAGSuspensionState404JSONResponse Error

func (response UpdateDAGSuspensionState404JSONResponse) VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGSuspensionStatedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateDAGSuspensionStatedefaultJSONResponse) VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGWorkflowHistoryRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   GetDAGWorkflowHistoryParams
}

type GetDAGWorkflowHistoryResponseObject interface {
	VisitGetDAGWorkflowHistoryResponse(w http.ResponseWriter) error
}

type GetDAGWorkflowHistory200JSONResponse struct {
	// GridData Grid data for visualization
	GridData []DAGGridItem `json:"gridData"`

	// Workflows List of historical workflows created from this DAG
	Workflows []WorkflowDetails `json:"workflows"`
}

func (response GetDAGWorkflowHistory200JSONResponse) VisitGetDAGWorkflowHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGWorkflowHistorydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGWorkflowHistorydefaultJSONResponse) VisitGetDAGWorkflowHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGWorkflowDetailsRequestObject struct {
	FileName   DAGFileName `json:"fileName"`
	WorkflowId WorkflowId  `json:"workflowId"`
	Params     GetDAGWorkflowDetailsParams
}

type GetDAGWorkflowDetailsResponseObject interface {
	VisitGetDAGWorkflowDetailsResponse(w http.ResponseWriter) error
}

type GetDAGWorkflowDetails200JSONResponse struct {
	// Workflow Detailed status of a workflow including child workflow nodes
	Workflow WorkflowDetails `json:"workflow"`
}

func (response GetDAGWorkflowDetails200JSONResponse) VisitGetDAGWorkflowDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGWorkflowDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGWorkflowDetailsdefaultJSONResponse) VisitGetDAGWorkflowDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealthStatusRequestObject struct {
}

type GetHealthStatusResponseObject interface {
	VisitGetHealthStatusResponse(w http.ResponseWriter) error
}

type GetHealthStatus200JSONResponse HealthResponse

func (response GetHealthStatus200JSONResponse) VisitGetHealthStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthStatusdefaultResponse struct {
	StatusCode int
}

func (response GetHealthStatusdefaultResponse) VisitGetHealthStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type ListWorkflowsRequestObject struct {
	Params ListWorkflowsParams
}

type ListWorkflowsResponseObject interface {
	VisitListWorkflowsResponse(w http.ResponseWriter) error
}

type ListWorkflows200JSONResponse struct {
	// Workflows List of workflows with their status and metadata
	Workflows []WorkflowSummary `json:"workflows"`
}

func (response ListWorkflows200JSONResponse) VisitListWorkflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListWorkflowsdefaultJSONResponse) VisitListWorkflowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListWorkflowsByNameRequestObject struct {
	Name   WorkflowName `json:"name"`
	Params ListWorkflowsByNameParams
}

type ListWorkflowsByNameResponseObject interface {
	VisitListWorkflowsByNameResponse(w http.ResponseWriter) error
}

type ListWorkflowsByName200JSONResponse struct {
	// Workflows List of workflows with their status and metadata
	Workflows []WorkflowSummary `json:"workflows"`
}

func (response ListWorkflowsByName200JSONResponse) VisitListWorkflowsByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListWorkflowsByNamedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListWorkflowsByNamedefaultJSONResponse) VisitListWorkflowsByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetWorkflowDetailsRequestObject struct {
	Name       DAGName    `json:"name"`
	WorkflowId WorkflowId `json:"workflowId"`
	Params     GetWorkflowDetailsParams
}

type GetWorkflowDetailsResponseObject interface {
	VisitGetWorkflowDetailsResponse(w http.ResponseWriter) error
}

type GetWorkflowDetails200JSONResponse struct {
	// WorkflowDetails Detailed status of a workflow including child workflow nodes
	WorkflowDetails WorkflowDetails `json:"workflowDetails"`
}

func (response GetWorkflowDetails200JSONResponse) VisitGetWorkflowDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowDetails404JSONResponse Error

func (response GetWorkflowDetails404JSONResponse) VisitGetWorkflowDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetWorkflowDetailsdefaultJSONResponse) VisitGetWorkflowDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetChildWorkflowDetailsRequestObject struct {
	Name            DAGName    `json:"name"`
	WorkflowId      WorkflowId `json:"workflowId"`
	ChildWorkflowId string     `json:"childWorkflowId"`
	Params          GetChildWorkflowDetailsParams
}

type GetChildWorkflowDetailsResponseObject interface {
	VisitGetChildWorkflowDetailsResponse(w http.ResponseWriter) error
}

type GetChildWorkflowDetails200JSONResponse struct {
	// WorkflowDetails Detailed status of a workflow including child workflow nodes
	WorkflowDetails WorkflowDetails `json:"workflowDetails"`
}

func (response GetChildWorkflowDetails200JSONResponse) VisitGetChildWorkflowDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChildWorkflowDetails404JSONResponse Error

func (response GetChildWorkflowDetails404JSONResponse) VisitGetChildWorkflowDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetChildWorkflowDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetChildWorkflowDetailsdefaultJSONResponse) VisitGetChildWorkflowDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetChildWorkflowLogRequestObject struct {
	Name            DAGName    `json:"name"`
	WorkflowId      WorkflowId `json:"workflowId"`
	ChildWorkflowId string     `json:"childWorkflowId"`
	Params          GetChildWorkflowLogParams
}

type GetChildWorkflowLogResponseObject interface {
	VisitGetChildWorkflowLogResponse(w http.ResponseWriter) error
}

type GetChildWorkflowLog200JSONResponse Log

func (response GetChildWorkflowLog200JSONResponse) VisitGetChildWorkflowLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChildWorkflowLog404JSONResponse Error

func (response GetChildWorkflowLog404JSONResponse) VisitGetChildWorkflowLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetChildWorkflowLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetChildWorkflowLogdefaultJSONResponse) VisitGetChildWorkflowLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetChildWorkflowStepLogRequestObject struct {
	Name            DAGName    `json:"name"`
	WorkflowId      WorkflowId `json:"workflowId"`
	ChildWorkflowId string     `json:"childWorkflowId"`
	StepName        StepName   `json:"stepName"`
	Params          GetChildWorkflowStepLogParams
}

type GetChildWorkflowStepLogResponseObject interface {
	VisitGetChildWorkflowStepLogResponse(w http.ResponseWriter) error
}

type GetChildWorkflowStepLog200JSONResponse Log

func (response GetChildWorkflowStepLog200JSONResponse) VisitGetChildWorkflowStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChildWorkflowStepLog404JSONResponse Error

func (response GetChildWorkflowStepLog404JSONResponse) VisitGetChildWorkflowStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetChildWorkflowStepLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetChildWorkflowStepLogdefaultJSONResponse) VisitGetChildWorkflowStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateChildWorkflowStepStatusRequestObject struct {
	Name            DAGName    `json:"name"`
	WorkflowId      WorkflowId `json:"workflowId"`
	ChildWorkflowId string     `json:"childWorkflowId"`
	StepName        StepName   `json:"stepName"`
	Params          UpdateChildWorkflowStepStatusParams
	Body            *UpdateChildWorkflowStepStatusJSONRequestBody
}

type UpdateChildWorkflowStepStatusResponseObject interface {
	VisitUpdateChildWorkflowStepStatusResponse(w http.ResponseWriter) error
}

type UpdateChildWorkflowStepStatus200Response struct {
}

func (response UpdateChildWorkflowStepStatus200Response) VisitUpdateChildWorkflowStepStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateChildWorkflowStepStatus400JSONResponse Error

func (response UpdateChildWorkflowStepStatus400JSONResponse) VisitUpdateChildWorkflowStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChildWorkflowStepStatus404JSONResponse Error

func (response UpdateChildWorkflowStepStatus404JSONResponse) VisitUpdateChildWorkflowStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChildWorkflowStepStatusdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateChildWorkflowStepStatusdefaultJSONResponse) VisitUpdateChildWorkflowStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetWorkflowLogRequestObject struct {
	Name       DAGName    `json:"name"`
	WorkflowId WorkflowId `json:"workflowId"`
	Params     GetWorkflowLogParams
}

type GetWorkflowLogResponseObject interface {
	VisitGetWorkflowLogResponse(w http.ResponseWriter) error
}

type GetWorkflowLog200JSONResponse Log

func (response GetWorkflowLog200JSONResponse) VisitGetWorkflowLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowLog404JSONResponse Error

func (response GetWorkflowLog404JSONResponse) VisitGetWorkflowLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetWorkflowLogdefaultJSONResponse) VisitGetWorkflowLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetryWorkflowRequestObject struct {
	Name       DAGName    `json:"name"`
	WorkflowId WorkflowId `json:"workflowId"`
	Params     RetryWorkflowParams
	Body       *RetryWorkflowJSONRequestBody
}

type RetryWorkflowResponseObject interface {
	VisitRetryWorkflowResponse(w http.ResponseWriter) error
}

type RetryWorkflow200Response struct {
}

func (response RetryWorkflow200Response) VisitRetryWorkflowResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RetryWorkflowdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RetryWorkflowdefaultJSONResponse) VisitRetryWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetWorkflowStepLogRequestObject struct {
	Name       DAGName    `json:"name"`
	WorkflowId WorkflowId `json:"workflowId"`
	StepName   StepName   `json:"stepName"`
	Params     GetWorkflowStepLogParams
}

type GetWorkflowStepLogResponseObject interface {
	VisitGetWorkflowStepLogResponse(w http.ResponseWriter) error
}

type GetWorkflowStepLog200JSONResponse Log

func (response GetWorkflowStepLog200JSONResponse) VisitGetWorkflowStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowStepLog404JSONResponse Error

func (response GetWorkflowStepLog404JSONResponse) VisitGetWorkflowStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkflowStepLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetWorkflowStepLogdefaultJSONResponse) VisitGetWorkflowStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateWorkflowStepStatusRequestObject struct {
	Name       DAGName    `json:"name"`
	WorkflowId WorkflowId `json:"workflowId"`
	StepName   StepName   `json:"stepName"`
	Params     UpdateWorkflowStepStatusParams
	Body       *UpdateWorkflowStepStatusJSONRequestBody
}

type UpdateWorkflowStepStatusResponseObject interface {
	VisitUpdateWorkflowStepStatusResponse(w http.ResponseWriter) error
}

type UpdateWorkflowStepStatus200Response struct {
}

func (response UpdateWorkflowStepStatus200Response) VisitUpdateWorkflowStepStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateWorkflowStepStatus400JSONResponse Error

func (response UpdateWorkflowStepStatus400JSONResponse) VisitUpdateWorkflowStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkflowStepStatus404JSONResponse Error

func (response UpdateWorkflowStepStatus404JSONResponse) VisitUpdateWorkflowStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateWorkflowStepStatusdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateWorkflowStepStatusdefaultJSONResponse) VisitUpdateWorkflowStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TerminateWorkflowRequestObject struct {
	Name       DAGName    `json:"name"`
	WorkflowId WorkflowId `json:"workflowId"`
	Params     TerminateWorkflowParams
}

type TerminateWorkflowResponseObject interface {
	VisitTerminateWorkflowResponse(w http.ResponseWriter) error
}

type TerminateWorkflow200Response struct {
}

func (response TerminateWorkflow200Response) VisitTerminateWorkflowResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type TerminateWorkflowdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response TerminateWorkflowdefaultJSONResponse) VisitTerminateWorkflowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all available DAGs
	// (GET /dags)
	ListDAGs(ctx context.Context, request ListDAGsRequestObject) (ListDAGsResponseObject, error)
	// Create a new DAG definition
	// (POST /dags)
	CreateNewDAG(ctx context.Context, request CreateNewDAGRequestObject) (CreateNewDAGResponseObject, error)
	// Search DAGs
	// (GET /dags/search)
	SearchDAGs(ctx context.Context, request SearchDAGsRequestObject) (SearchDAGsResponseObject, error)
	// List all available DAG tags
	// (GET /dags/tags)
	GetAllDAGTags(ctx context.Context, request GetAllDAGTagsRequestObject) (GetAllDAGTagsResponseObject, error)
	// Delete an existing DAG
	// (DELETE /dags/{fileName})
	DeleteDAG(ctx context.Context, request DeleteDAGRequestObject) (DeleteDAGResponseObject, error)
	// Retrieve comprehensive DAG information
	// (GET /dags/{fileName})
	GetDAGDetails(ctx context.Context, request GetDAGDetailsRequestObject) (GetDAGDetailsResponseObject, error)
	// Change DAG file ID
	// (POST /dags/{fileName}/rename)
	RenameDAG(ctx context.Context, request RenameDAGRequestObject) (RenameDAGResponseObject, error)
	// Retry workflow execution
	// (POST /dags/{fileName}/retry)
	RetryDAGWorkflow(ctx context.Context, request RetryDAGWorkflowRequestObject) (RetryDAGWorkflowResponseObject, error)
	// Retrieve DAG specification
	// (GET /dags/{fileName}/spec)
	GetDAGSpec(ctx context.Context, request GetDAGSpecRequestObject) (GetDAGSpecResponseObject, error)
	// Update DAG spec
	// (PUT /dags/{fileName}/spec)
	UpdateDAGSpec(ctx context.Context, request UpdateDAGSpecRequestObject) (UpdateDAGSpecResponseObject, error)
	// Create and execute a workflow from DAG
	// (POST /dags/{fileName}/start)
	ExecuteDAG(ctx context.Context, request ExecuteDAGRequestObject) (ExecuteDAGResponseObject, error)
	// Terminate a running workflow
	// (POST /dags/{fileName}/stop)
	TerminateDAGWorkflow(ctx context.Context, request TerminateDAGWorkflowRequestObject) (TerminateDAGWorkflowResponseObject, error)
	// Toggle DAG suspension state
	// (POST /dags/{fileName}/suspend)
	UpdateDAGSuspensionState(ctx context.Context, request UpdateDAGSuspensionStateRequestObject) (UpdateDAGSuspensionStateResponseObject, error)
	// Retrieve execution history of a DAG
	// (GET /dags/{fileName}/workflows)
	GetDAGWorkflowHistory(ctx context.Context, request GetDAGWorkflowHistoryRequestObject) (GetDAGWorkflowHistoryResponseObject, error)
	// Get detailed status of a specific workflow
	// (GET /dags/{fileName}/workflows/{workflowId})
	GetDAGWorkflowDetails(ctx context.Context, request GetDAGWorkflowDetailsRequestObject) (GetDAGWorkflowDetailsResponseObject, error)
	// Check server health status
	// (GET /health)
	GetHealthStatus(ctx context.Context, request GetHealthStatusRequestObject) (GetHealthStatusResponseObject, error)
	// List all workflows
	// (GET /workflows)
	ListWorkflows(ctx context.Context, request ListWorkflowsRequestObject) (ListWorkflowsResponseObject, error)
	// List all workflows with a specific name
	// (GET /workflows/{name})
	ListWorkflowsByName(ctx context.Context, request ListWorkflowsByNameRequestObject) (ListWorkflowsByNameResponseObject, error)
	// Retrieve detailed status of a workflow
	// (GET /workflows/{name}/{workflowId})
	GetWorkflowDetails(ctx context.Context, request GetWorkflowDetailsRequestObject) (GetWorkflowDetailsResponseObject, error)
	// Retrieve detailed status of a child workflow
	// (GET /workflows/{name}/{workflowId}/children/{childWorkflowId})
	GetChildWorkflowDetails(ctx context.Context, request GetChildWorkflowDetailsRequestObject) (GetChildWorkflowDetailsResponseObject, error)
	// Retrieve log for a specific child workflow
	// (GET /workflows/{name}/{workflowId}/children/{childWorkflowId}/log)
	GetChildWorkflowLog(ctx context.Context, request GetChildWorkflowLogRequestObject) (GetChildWorkflowLogResponseObject, error)
	// Retrieve log for a specific step in a child workflow
	// (GET /workflows/{name}/{workflowId}/children/{childWorkflowId}/steps/{stepName}/log)
	GetChildWorkflowStepLog(ctx context.Context, request GetChildWorkflowStepLogRequestObject) (GetChildWorkflowStepLogResponseObject, error)
	// Manually update a step's execution status in a child workflow
	// (PATCH /workflows/{name}/{workflowId}/children/{childWorkflowId}/steps/{stepName}/status)
	UpdateChildWorkflowStepStatus(ctx context.Context, request UpdateChildWorkflowStepStatusRequestObject) (UpdateChildWorkflowStepStatusResponseObject, error)
	// Retrieve full execution log of a workflow
	// (GET /workflows/{name}/{workflowId}/log)
	GetWorkflowLog(ctx context.Context, request GetWorkflowLogRequestObject) (GetWorkflowLogResponseObject, error)
	// Retry workflow execution
	// (POST /workflows/{name}/{workflowId}/retry)
	RetryWorkflow(ctx context.Context, request RetryWorkflowRequestObject) (RetryWorkflowResponseObject, error)
	// Retrieve log for a specific step in a workflow
	// (GET /workflows/{name}/{workflowId}/steps/{stepName}/log)
	GetWorkflowStepLog(ctx context.Context, request GetWorkflowStepLogRequestObject) (GetWorkflowStepLogResponseObject, error)
	// Manually update a step's execution status
	// (PATCH /workflows/{name}/{workflowId}/steps/{stepName}/status)
	UpdateWorkflowStepStatus(ctx context.Context, request UpdateWorkflowStepStatusRequestObject) (UpdateWorkflowStepStatusResponseObject, error)
	// Terminate a running workflow
	// (POST /workflows/{name}/{workflowId}/stop)
	TerminateWorkflow(ctx context.Context, request TerminateWorkflowRequestObject) (TerminateWorkflowResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListDAGs operation middleware
func (sh *strictHandler) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	var request ListDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListDAGs(ctx, request.(ListDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListDAGsResponseObject); ok {
		if err := validResponse.VisitListDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateNewDAG operation middleware
func (sh *strictHandler) CreateNewDAG(w http.ResponseWriter, r *http.Request, params CreateNewDAGParams) {
	var request CreateNewDAGRequestObject

	request.Params = params

	var body CreateNewDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateNewDAG(ctx, request.(CreateNewDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateNewDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateNewDAGResponseObject); ok {
		if err := validResponse.VisitCreateNewDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchDAGs operation middleware
func (sh *strictHandler) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	var request SearchDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchDAGs(ctx, request.(SearchDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchDAGsResponseObject); ok {
		if err := validResponse.VisitSearchDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllDAGTags operation middleware
func (sh *strictHandler) GetAllDAGTags(w http.ResponseWriter, r *http.Request, params GetAllDAGTagsParams) {
	var request GetAllDAGTagsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllDAGTags(ctx, request.(GetAllDAGTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllDAGTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllDAGTagsResponseObject); ok {
		if err := validResponse.VisitGetAllDAGTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDAG operation middleware
func (sh *strictHandler) DeleteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params DeleteDAGParams) {
	var request DeleteDAGRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDAG(ctx, request.(DeleteDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDAGResponseObject); ok {
		if err := validResponse.VisitDeleteDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGDetails operation middleware
func (sh *strictHandler) GetDAGDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDetailsParams) {
	var request GetDAGDetailsRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGDetails(ctx, request.(GetDAGDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RenameDAG operation middleware
func (sh *strictHandler) RenameDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RenameDAGParams) {
	var request RenameDAGRequestObject

	request.FileName = fileName
	request.Params = params

	var body RenameDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RenameDAG(ctx, request.(RenameDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RenameDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RenameDAGResponseObject); ok {
		if err := validResponse.VisitRenameDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RetryDAGWorkflow operation middleware
func (sh *strictHandler) RetryDAGWorkflow(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RetryDAGWorkflowParams) {
	var request RetryDAGWorkflowRequestObject

	request.FileName = fileName
	request.Params = params

	var body RetryDAGWorkflowJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RetryDAGWorkflow(ctx, request.(RetryDAGWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RetryDAGWorkflow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RetryDAGWorkflowResponseObject); ok {
		if err := validResponse.VisitRetryDAGWorkflowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGSpec operation middleware
func (sh *strictHandler) GetDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGSpecParams) {
	var request GetDAGSpecRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGSpec(ctx, request.(GetDAGSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGSpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGSpecResponseObject); ok {
		if err := validResponse.VisitGetDAGSpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDAGSpec operation middleware
func (sh *strictHandler) UpdateDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSpecParams) {
	var request UpdateDAGSpecRequestObject

	request.FileName = fileName
	request.Params = params

	var body UpdateDAGSpecJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDAGSpec(ctx, request.(UpdateDAGSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDAGSpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDAGSpecResponseObject); ok {
		if err := validResponse.VisitUpdateDAGSpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExecuteDAG operation middleware
func (sh *strictHandler) ExecuteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params ExecuteDAGParams) {
	var request ExecuteDAGRequestObject

	request.FileName = fileName
	request.Params = params

	var body ExecuteDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExecuteDAG(ctx, request.(ExecuteDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExecuteDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExecuteDAGResponseObject); ok {
		if err := validResponse.VisitExecuteDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TerminateDAGWorkflow operation middleware
func (sh *strictHandler) TerminateDAGWorkflow(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params TerminateDAGWorkflowParams) {
	var request TerminateDAGWorkflowRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TerminateDAGWorkflow(ctx, request.(TerminateDAGWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TerminateDAGWorkflow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TerminateDAGWorkflowResponseObject); ok {
		if err := validResponse.VisitTerminateDAGWorkflowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDAGSuspensionState operation middleware
func (sh *strictHandler) UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSuspensionStateParams) {
	var request UpdateDAGSuspensionStateRequestObject

	request.FileName = fileName
	request.Params = params

	var body UpdateDAGSuspensionStateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDAGSuspensionState(ctx, request.(UpdateDAGSuspensionStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDAGSuspensionState")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDAGSuspensionStateResponseObject); ok {
		if err := validResponse.VisitUpdateDAGSuspensionStateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGWorkflowHistory operation middleware
func (sh *strictHandler) GetDAGWorkflowHistory(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGWorkflowHistoryParams) {
	var request GetDAGWorkflowHistoryRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGWorkflowHistory(ctx, request.(GetDAGWorkflowHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGWorkflowHistory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGWorkflowHistoryResponseObject); ok {
		if err := validResponse.VisitGetDAGWorkflowHistoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGWorkflowDetails operation middleware
func (sh *strictHandler) GetDAGWorkflowDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, workflowId WorkflowId, params GetDAGWorkflowDetailsParams) {
	var request GetDAGWorkflowDetailsRequestObject

	request.FileName = fileName
	request.WorkflowId = workflowId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGWorkflowDetails(ctx, request.(GetDAGWorkflowDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGWorkflowDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGWorkflowDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGWorkflowDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealthStatus operation middleware
func (sh *strictHandler) GetHealthStatus(w http.ResponseWriter, r *http.Request) {
	var request GetHealthStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealthStatus(ctx, request.(GetHealthStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealthStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthStatusResponseObject); ok {
		if err := validResponse.VisitGetHealthStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListWorkflows operation middleware
func (sh *strictHandler) ListWorkflows(w http.ResponseWriter, r *http.Request, params ListWorkflowsParams) {
	var request ListWorkflowsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListWorkflows(ctx, request.(ListWorkflowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListWorkflows")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListWorkflowsResponseObject); ok {
		if err := validResponse.VisitListWorkflowsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListWorkflowsByName operation middleware
func (sh *strictHandler) ListWorkflowsByName(w http.ResponseWriter, r *http.Request, name WorkflowName, params ListWorkflowsByNameParams) {
	var request ListWorkflowsByNameRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListWorkflowsByName(ctx, request.(ListWorkflowsByNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListWorkflowsByName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListWorkflowsByNameResponseObject); ok {
		if err := validResponse.VisitListWorkflowsByNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkflowDetails operation middleware
func (sh *strictHandler) GetWorkflowDetails(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, params GetWorkflowDetailsParams) {
	var request GetWorkflowDetailsRequestObject

	request.Name = name
	request.WorkflowId = workflowId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkflowDetails(ctx, request.(GetWorkflowDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkflowDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkflowDetailsResponseObject); ok {
		if err := validResponse.VisitGetWorkflowDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChildWorkflowDetails operation middleware
func (sh *strictHandler) GetChildWorkflowDetails(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, childWorkflowId string, params GetChildWorkflowDetailsParams) {
	var request GetChildWorkflowDetailsRequestObject

	request.Name = name
	request.WorkflowId = workflowId
	request.ChildWorkflowId = childWorkflowId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetChildWorkflowDetails(ctx, request.(GetChildWorkflowDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChildWorkflowDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetChildWorkflowDetailsResponseObject); ok {
		if err := validResponse.VisitGetChildWorkflowDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChildWorkflowLog operation middleware
func (sh *strictHandler) GetChildWorkflowLog(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, childWorkflowId string, params GetChildWorkflowLogParams) {
	var request GetChildWorkflowLogRequestObject

	request.Name = name
	request.WorkflowId = workflowId
	request.ChildWorkflowId = childWorkflowId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetChildWorkflowLog(ctx, request.(GetChildWorkflowLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChildWorkflowLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetChildWorkflowLogResponseObject); ok {
		if err := validResponse.VisitGetChildWorkflowLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChildWorkflowStepLog operation middleware
func (sh *strictHandler) GetChildWorkflowStepLog(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, childWorkflowId string, stepName StepName, params GetChildWorkflowStepLogParams) {
	var request GetChildWorkflowStepLogRequestObject

	request.Name = name
	request.WorkflowId = workflowId
	request.ChildWorkflowId = childWorkflowId
	request.StepName = stepName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetChildWorkflowStepLog(ctx, request.(GetChildWorkflowStepLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChildWorkflowStepLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetChildWorkflowStepLogResponseObject); ok {
		if err := validResponse.VisitGetChildWorkflowStepLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateChildWorkflowStepStatus operation middleware
func (sh *strictHandler) UpdateChildWorkflowStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, childWorkflowId string, stepName StepName, params UpdateChildWorkflowStepStatusParams) {
	var request UpdateChildWorkflowStepStatusRequestObject

	request.Name = name
	request.WorkflowId = workflowId
	request.ChildWorkflowId = childWorkflowId
	request.StepName = stepName
	request.Params = params

	var body UpdateChildWorkflowStepStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateChildWorkflowStepStatus(ctx, request.(UpdateChildWorkflowStepStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateChildWorkflowStepStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateChildWorkflowStepStatusResponseObject); ok {
		if err := validResponse.VisitUpdateChildWorkflowStepStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkflowLog operation middleware
func (sh *strictHandler) GetWorkflowLog(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, params GetWorkflowLogParams) {
	var request GetWorkflowLogRequestObject

	request.Name = name
	request.WorkflowId = workflowId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkflowLog(ctx, request.(GetWorkflowLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkflowLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkflowLogResponseObject); ok {
		if err := validResponse.VisitGetWorkflowLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RetryWorkflow operation middleware
func (sh *strictHandler) RetryWorkflow(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, params RetryWorkflowParams) {
	var request RetryWorkflowRequestObject

	request.Name = name
	request.WorkflowId = workflowId
	request.Params = params

	var body RetryWorkflowJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RetryWorkflow(ctx, request.(RetryWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RetryWorkflow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RetryWorkflowResponseObject); ok {
		if err := validResponse.VisitRetryWorkflowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkflowStepLog operation middleware
func (sh *strictHandler) GetWorkflowStepLog(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, stepName StepName, params GetWorkflowStepLogParams) {
	var request GetWorkflowStepLogRequestObject

	request.Name = name
	request.WorkflowId = workflowId
	request.StepName = stepName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkflowStepLog(ctx, request.(GetWorkflowStepLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkflowStepLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkflowStepLogResponseObject); ok {
		if err := validResponse.VisitGetWorkflowStepLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateWorkflowStepStatus operation middleware
func (sh *strictHandler) UpdateWorkflowStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, stepName StepName, params UpdateWorkflowStepStatusParams) {
	var request UpdateWorkflowStepStatusRequestObject

	request.Name = name
	request.WorkflowId = workflowId
	request.StepName = stepName
	request.Params = params

	var body UpdateWorkflowStepStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateWorkflowStepStatus(ctx, request.(UpdateWorkflowStepStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateWorkflowStepStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateWorkflowStepStatusResponseObject); ok {
		if err := validResponse.VisitUpdateWorkflowStepStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TerminateWorkflow operation middleware
func (sh *strictHandler) TerminateWorkflow(w http.ResponseWriter, r *http.Request, name DAGName, workflowId WorkflowId, params TerminateWorkflowParams) {
	var request TerminateWorkflowRequestObject

	request.Name = name
	request.WorkflowId = workflowId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TerminateWorkflow(ctx, request.(TerminateWorkflowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TerminateWorkflow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TerminateWorkflowResponseObject); ok {
		if err := validResponse.VisitTerminateWorkflowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
