// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	ApiTokenScopes  = "apiToken.Scopes"
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for DAGAction.
const (
	DAGActionMarkFailed  DAGAction = "mark-failed"
	DAGActionMarkSuccess DAGAction = "mark-success"
	DAGActionRename      DAGAction = "rename"
	DAGActionRetry       DAGAction = "retry"
	DAGActionSave        DAGAction = "save"
	DAGActionStart       DAGAction = "start"
	DAGActionStop        DAGAction = "stop"
	DAGActionSuspend     DAGAction = "suspend"
)

// Defines values for ErrorCode.
const (
	ErrorCodeAlreadyExists   ErrorCode = "already_exists"
	ErrorCodeAlreadyRunning  ErrorCode = "already_running"
	ErrorCodeBadGateway      ErrorCode = "bad_gateway"
	ErrorCodeBadRequest      ErrorCode = "bad_request"
	ErrorCodeInternalError   ErrorCode = "internal_error"
	ErrorCodeNotFound        ErrorCode = "not_found"
	ErrorCodeNotRunning      ErrorCode = "not_running"
	ErrorCodeRemoteNodeError ErrorCode = "remote_node_error"
	ErrorCodeUnauthorized    ErrorCode = "unauthorized"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusHealthy   HealthResponseStatus = "healthy"
	HealthResponseStatusUnhealthy HealthResponseStatus = "unhealthy"
)

// Defines values for NodeStatus.
const (
	NodeStatusCancelled  NodeStatus = 3
	NodeStatusFailed     NodeStatus = 2
	NodeStatusNotStarted NodeStatus = 0
	NodeStatusRunning    NodeStatus = 1
	NodeStatusSkipped    NodeStatus = 5
	NodeStatusSuccess    NodeStatus = 4
)

// Defines values for NodeStatusText.
const (
	NodeStatusTextCanceled   NodeStatusText = "canceled"
	NodeStatusTextFailed     NodeStatusText = "failed"
	NodeStatusTextFinished   NodeStatusText = "finished"
	NodeStatusTextNotStarted NodeStatusText = "not started"
	NodeStatusTextRunning    NodeStatusText = "running"
	NodeStatusTextSkipped    NodeStatusText = "skipped"
)

// Defines values for Status.
const (
	StatusCancelled  Status = 3
	StatusFailed     Status = 2
	StatusNotStarted Status = 0
	StatusRunning    Status = 1
	StatusSuccess    Status = 4
)

// Defines values for StatusText.
const (
	StatusTextCancelled  StatusText = "cancelled"
	StatusTextFailed     StatusText = "failed"
	StatusTextFinished   StatusText = "finished"
	StatusTextNotStarted StatusText = "not started"
	StatusTextRunning    StatusText = "running"
)

// DAG Core DAG configuration containing workflow definition and metadata
type DAG struct {
	// DefaultParams Default parameter values in JSON format if not specified at runtime
	DefaultParams *string `json:"defaultParams,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description *string `json:"description,omitempty"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"group,omitempty"`

	// Location Physical name of the DAG file
	Location string `json:"location"`

	// Name Logical name of the DAG
	Name string `json:"name"`

	// Params List of parameter names that can be passed to the DAG at runtime
	Params *[]string `json:"params,omitempty"`

	// Schedule List of scheduling expressions defining when the DAG should run
	Schedule *[]Schedule `json:"schedule,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"tags,omitempty"`
}

// DAGAction Action to be performed on the DAG. Possible values include:
// - start: Start the DAG
// - suspend: Suspend the DAG
// - stop: Stop the DAG
// - retry: Retry the last run
// - mark-success: Mark the last run as successful
// - mark-failed: Mark the last run as failed
// - save: Save the current state of the DAG
// - rename: Rename the DAG
type DAGAction string

// DAGDetails Detailed DAG configuration information
type DAGDetails struct {
	// DefaultParams Default parameter values in JSON format if not specified at runtime
	DefaultParams *string `json:"defaultParams,omitempty"`

	// Delay Time in seconds to wait before starting the DAG
	Delay *int `json:"delay,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description *string `json:"description,omitempty"`

	// Env List of environment variables to set before executing
	Env *[]string `json:"env,omitempty"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"group,omitempty"`

	// HandlerOn Configuration for event handlers in a DAG
	HandlerOn *HandlerOn `json:"handlerOn,omitempty"`

	// HistRetentionDays Number of days to retain historical logs
	HistRetentionDays *int `json:"histRetentionDays,omitempty"`

	// Location Path to the DAG file
	Location string `json:"location"`

	// LogDir Directory path for storing log files
	LogDir *string `json:"logDir,omitempty"`

	// MaxActiveRuns Maximum number of concurrent steps to run
	MaxActiveRuns *int `json:"maxActiveRuns,omitempty"`

	// Name Unique identifier for the DAG within its group
	Name string `json:"name"`

	// Params List of parameter names that can be passed to the DAG at runtime
	Params *[]string `json:"params,omitempty"`

	// Preconditions Conditions that must be met before the DAG can start
	Preconditions *[]Precondition `json:"preconditions,omitempty"`

	// Schedule List of scheduling expressions defining when the DAG should run
	Schedule *[]Schedule `json:"schedule,omitempty"`

	// Steps List of steps to execute in the DAG
	Steps *[]Step `json:"steps,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"tags,omitempty"`
}

// DAGFile DAG file with its status information
type DAGFile struct {
	// Dag Core DAG configuration containing workflow definition and metadata
	Dag DAG `json:"dag"`

	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// LatestRun Current status of a DAG run
	LatestRun RunSummary `json:"latestRun"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"suspended"`
}

// DAGLocation location of the DAG file
type DAGLocation = string

// DAGLogGridItem Grid item for log visualization
type DAGLogGridItem struct {
	// History Status of the step ordered by time
	History []NodeStatus `json:"history"`

	// Name Name of the step
	Name string `json:"name"`
}

// DAGName Name of the DAG
type DAGName = string

// Error Generic error response object
type Error struct {
	// Code Error code indicating the type of error
	Code ErrorCode `json:"code"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Short error message
	Message string `json:"message"`
}

// ErrorCode Error code indicating the type of error
type ErrorCode string

// HandlerOn Configuration for event handlers in a DAG
type HandlerOn struct {
	// Cancel Individual task within a DAG that performs a specific operation
	Cancel *Step `json:"cancel,omitempty"`

	// Exit Individual task within a DAG that performs a specific operation
	Exit *Step `json:"exit,omitempty"`

	// Failure Individual task within a DAG that performs a specific operation
	Failure *Step `json:"failure,omitempty"`

	// Success Individual task within a DAG that performs a specific operation
	Success *Step `json:"success,omitempty"`
}

// HealthResponse Response object for the health check endpoint
type HealthResponse struct {
	// Status Overall health status of the server
	Status HealthResponseStatus `json:"status"`

	// Timestamp Current server time
	Timestamp string `json:"timestamp"`

	// Uptime Server uptime in seconds
	Uptime int `json:"uptime"`

	// Version Current version of the server
	Version string `json:"version"`
}

// HealthResponseStatus Overall health status of the server
type HealthResponseStatus string

// ListTagResponse Response object for listing all tags
type ListTagResponse struct {
	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// Tags List of unique tags
	Tags []string `json:"tags"`
}

// Log Log information for the scheduler
type Log struct {
	// Content Log content
	Content string `json:"content"`
}

// Node Status of an individual step within a DAG run
type Node struct {
	// DoneCount Number of successful completions for repeating steps
	DoneCount int `json:"doneCount"`

	// Error Error message if the step failed
	Error *string `json:"error,omitempty"`

	// FinishedAt RFC3339 timestamp when the step finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to step-specific log file
	Log string `json:"log"`

	// RetryCount Number of retry attempts made for this step
	RetryCount int `json:"retryCount"`

	// StartedAt RFC3339 timestamp when the step started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current node state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Skipped"
	Status NodeStatus `json:"status"`

	// StatusText Human-readable status description for the node
	StatusText NodeStatusText `json:"statusText"`

	// Step Individual task within a DAG that performs a specific operation
	Step Step `json:"step"`
}

// NodeStatus Numeric status code indicating current node state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
// 5: "Skipped"
type NodeStatus int

// NodeStatusText Human-readable status description for the node
type NodeStatusText string

// Pagination defines model for Pagination.
type Pagination struct {
	// CurrentPage current page number
	CurrentPage int `json:"currentPage"`

	// NextPage next page number
	NextPage int `json:"nextPage"`

	// PrevPage previous page number
	PrevPage int `json:"prevPage"`

	// TotalPages total number of pages
	TotalPages int `json:"totalPages"`

	// TotalRecords total number of records
	TotalRecords int `json:"totalRecords"`
}

// PostDAGActionResponse Response object for posting an action to a DAG
type PostDAGActionResponse struct {
	// NewName New DAG name, if the action resulted in a new DAG
	NewName *string `json:"NewName,omitempty"`
}

// Precondition Precondition that must be satisfied before running a step or DAG
type Precondition struct {
	// Condition Expression or check to evaluate
	Condition *string `json:"condition,omitempty"`

	// Expected Expected result of the condition evaluation
	Expected *string `json:"expected,omitempty"`
}

// RepeatPolicy Configuration for step retry behavior
type RepeatPolicy struct {
	// Interval Time in seconds to wait between retry attempts
	Interval *int `json:"interval,omitempty"`

	// Repeat Whether the step should be retried on failure
	Repeat *bool `json:"repeat,omitempty"`
}

// RequestId Unique identifier for the request
type RequestId = string

// RunDetails defines model for RunDetails.
type RunDetails struct {
	// FinishedAt RFC 3339 timestamp when the DAG run finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to the log file
	Log string `json:"log"`

	// Name Name of the DAG
	Name DAGName `json:"name"`

	// Nodes Status of individual steps within the DAG
	Nodes []Node `json:"nodes"`

	// OnCancel Status of an individual step within a DAG run
	OnCancel *Node `json:"onCancel,omitempty"`

	// OnExit Status of an individual step within a DAG run
	OnExit *Node `json:"onExit,omitempty"`

	// OnFailure Status of an individual step within a DAG run
	OnFailure *Node `json:"onFailure,omitempty"`

	// OnSuccess Status of an individual step within a DAG run
	OnSuccess *Node `json:"onSuccess,omitempty"`

	// Params Runtime parameters passed to the DAG in JSON format
	Params *string `json:"params,omitempty"`

	// Pid Process ID of the DAG run
	Pid *int `json:"pid,omitempty"`

	// RequestId Unique identifier for the request
	RequestId RequestId `json:"requestId"`

	// StartedAt RFC 3339 timestamp when the DAG run started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current run state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	Status Status `json:"status"`

	// StatusText Human-readable status description for the DAG run
	StatusText StatusText `json:"statusText"`
}

// RunSummary Current status of a DAG run
type RunSummary struct {
	// FinishedAt RFC 3339 timestamp when the DAG run finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to the log file
	Log string `json:"log"`

	// Name Name of the DAG
	Name DAGName `json:"name"`

	// Params Runtime parameters passed to the DAG in JSON format
	Params *string `json:"params,omitempty"`

	// Pid Process ID of the DAG run
	Pid *int `json:"pid,omitempty"`

	// RequestId Unique identifier for the request
	RequestId RequestId `json:"requestId"`

	// StartedAt RFC 3339 timestamp when the DAG run started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current run state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	Status Status `json:"status"`

	// StatusText Human-readable status description for the DAG run
	StatusText StatusText `json:"statusText"`
}

// Schedule Schedule configuration for DAG run
type Schedule struct {
	// Expression Cron expression or schedule pattern
	Expression string `json:"expression"`
}

// SearchDAGsMatchItem Details of a search match within a DAG
type SearchDAGsMatchItem struct {
	// Line Matching line content
	Line string `json:"line"`

	// LineNumber Line number where match was found
	LineNumber int `json:"lineNumber"`

	// StartLine Start line for context
	StartLine int `json:"startLine"`
}

// SearchDAGsResultItem Individual search result item for a DAG
type SearchDAGsResultItem struct {
	// Dag Core DAG configuration containing workflow definition and metadata
	Dag DAG `json:"dag"`

	// Matches Details of where matches were found
	Matches []SearchDAGsMatchItem `json:"matches"`

	// Name Name of the matching DAG
	Name string `json:"name"`
}

// Status Numeric status code indicating current run state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
type Status int

// StatusText Human-readable status description for the DAG run
type StatusText string

// Step Individual task within a DAG that performs a specific operation
type Step struct {
	// Args List of arguments to pass to the command
	Args *[]string `json:"args,omitempty"`

	// CmdWithArgs Complete command string including arguments to execute
	CmdWithArgs *string `json:"cmdWithArgs,omitempty"`

	// Command Base command to execute without arguments
	Command *string `json:"command,omitempty"`

	// Depends List of step names that must complete before this step can start
	Depends *[]string `json:"depends,omitempty"`

	// Description Human-readable description of what the step does
	Description *string `json:"description,omitempty"`

	// Dir Working directory for executing the step's command
	Dir *string `json:"dir,omitempty"`

	// MailOnError Whether to send email notifications on step failure
	MailOnError *bool `json:"mailOnError,omitempty"`

	// Name Unique identifier for the step within the DAG
	Name string `json:"name"`

	// Output Variable name to store the step's output
	Output *string `json:"output,omitempty"`

	// Params Parameters to pass to the sub DAG in JSON format
	Params *string `json:"params,omitempty"`

	// Preconditions Conditions that must be met before the step can start
	Preconditions *[]Precondition `json:"preconditions,omitempty"`

	// RepeatPolicy Configuration for step retry behavior
	RepeatPolicy *RepeatPolicy `json:"repeatPolicy,omitempty"`

	// Run Sub DAG to run
	Run *string `json:"run,omitempty"`

	// Script Script content if the step executes a script file
	Script *string `json:"script,omitempty"`

	// Stderr File path for capturing standard error
	Stderr *string `json:"stderr,omitempty"`

	// Stdout File path for capturing standard output
	Stdout *string `json:"stdout,omitempty"`
}

// Page defines model for Page.
type Page = int

// PerPage defines model for PerPage.
type PerPage = int

// RemoteNode defines model for RemoteNode.
type RemoteNode = string

// StepName defines model for StepName.
type StepName = string

// ListDAGsParams defines parameters for ListDAGs.
type ListDAGsParams struct {
	// Page page number of items to fetch (default is 1)
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage number of items per page (default is 30, max is 100)
	PerPage *PerPage `form:"perPage,omitempty" json:"perPage,omitempty"`

	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Name Filter DAGs by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Tag Filter DAGs by tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`
}

// CreateDAGJSONBody defines parameters for CreateDAG.
type CreateDAGJSONBody struct {
	// Name Name of the DAG
	Name DAGName `json:"name"`
}

// CreateDAGParams defines parameters for CreateDAG.
type CreateDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// SearchDAGsParams defines parameters for SearchDAGs.
type SearchDAGsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Q A search query string
	Q string `form:"q" json:"q"`
}

// ListTagsParams defines parameters for ListTags.
type ListTagsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// DeleteDAGParams defines parameters for DeleteDAG.
type DeleteDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGDetailsParams defines parameters for GetDAGDetails.
type GetDAGDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// PostDAGActionJSONBody defines parameters for PostDAGAction.
type PostDAGActionJSONBody struct {
	// Action Action to be performed on the DAG. Possible values include:
	// - start: Start the DAG
	// - suspend: Suspend the DAG
	// - stop: Stop the DAG
	// - retry: Retry the last run
	// - mark-success: Mark the last run as successful
	// - mark-failed: Mark the last run as failed
	// - save: Save the current state of the DAG
	// - rename: Rename the DAG
	Action DAGAction `json:"action"`

	// Params Additional parameters for the action in JSON format
	Params *string `json:"params,omitempty"`

	// RequestId Unique request ID for the action
	RequestId *string `json:"requestId,omitempty"`

	// Step Step name if the action targets a specific step
	Step *string `json:"step,omitempty"`

	// Value Optional extra value for the action
	Value *string `json:"value,omitempty"`
}

// PostDAGActionParams defines parameters for PostDAGAction.
type PostDAGActionParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGRunHistoryParams defines parameters for GetDAGRunHistory.
type GetDAGRunHistoryParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGRunStatusParams defines parameters for GetDAGRunStatus.
type GetDAGRunStatusParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGSpecParams defines parameters for GetDAGSpec.
type GetDAGSpecParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// UpdateDAGSpecJSONBody defines parameters for UpdateDAGSpec.
type UpdateDAGSpecJSONBody struct {
	// Spec The new DAG spec
	Spec string `json:"spec"`
}

// UpdateDAGSpecParams defines parameters for UpdateDAGSpec.
type UpdateDAGSpecParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// StartDAGJSONBody defines parameters for StartDAG.
type StartDAGJSONBody struct {
	// Params Parameters to pass to the DAG in JSON format
	Params *string `json:"params,omitempty"`
}

// StartDAGParams defines parameters for StartDAG.
type StartDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// StopDAGParams defines parameters for StopDAG.
type StopDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetRunLogParams defines parameters for GetRunLog.
type GetRunLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetStepLogParams defines parameters for GetStepLog.
type GetStepLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// CreateDAGJSONRequestBody defines body for CreateDAG for application/json ContentType.
type CreateDAGJSONRequestBody CreateDAGJSONBody

// PostDAGActionJSONRequestBody defines body for PostDAGAction for application/json ContentType.
type PostDAGActionJSONRequestBody PostDAGActionJSONBody

// UpdateDAGSpecJSONRequestBody defines body for UpdateDAGSpec for application/json ContentType.
type UpdateDAGSpecJSONRequestBody UpdateDAGSpecJSONBody

// StartDAGJSONRequestBody defines body for StartDAG for application/json ContentType.
type StartDAGJSONRequestBody StartDAGJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List DAGs
	// (GET /dags)
	ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams)
	// Create a new DAG
	// (POST /dags)
	CreateDAG(w http.ResponseWriter, r *http.Request, params CreateDAGParams)
	// Search DAGs
	// (GET /dags/search)
	SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams)
	// List all tags
	// (GET /dags/tags)
	ListTags(w http.ResponseWriter, r *http.Request, params ListTagsParams)
	// Delete a DAG
	// (DELETE /dags/{dagLocation})
	DeleteDAG(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params DeleteDAGParams)
	// Get DAG details
	// (GET /dags/{dagLocation})
	GetDAGDetails(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params GetDAGDetailsParams)
	// Perform an action on a DAG
	// (POST /dags/{dagLocation})
	PostDAGAction(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params PostDAGActionParams)
	// Get history of DAG runs
	// (GET /dags/{dagLocation}/runs)
	GetDAGRunHistory(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params GetDAGRunHistoryParams)
	// Get latest run status
	// (GET /dags/{dagLocation}/runs/{requestId})
	GetDAGRunStatus(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, requestId RequestId, params GetDAGRunStatusParams)
	// Get DAG Spec
	// (GET /dags/{dagLocation}/spec)
	GetDAGSpec(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params GetDAGSpecParams)
	// Update DAG Spec
	// (PUT /dags/{dagLocation}/spec)
	UpdateDAGSpec(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params UpdateDAGSpecParams)
	// Start a DAG
	// (POST /dags/{dagLocation}/start)
	StartDAG(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params StartDAGParams)
	// Stop a DAG
	// (POST /dags/{dagLocation}/stop)
	StopDAG(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params StopDAGParams)
	// Health check endpoint
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// Get content of a log file
	// (GET /runs/{dagName}/{requestId}/log)
	GetRunLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, params GetRunLogParams)
	// Get content of a step log file
	// (GET /runs/{dagName}/{requestId}/{stepName}/log)
	GetStepLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, stepName StepName, params GetStepLogParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List DAGs
// (GET /dags)
func (_ Unimplemented) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new DAG
// (POST /dags)
func (_ Unimplemented) CreateDAG(w http.ResponseWriter, r *http.Request, params CreateDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search DAGs
// (GET /dags/search)
func (_ Unimplemented) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all tags
// (GET /dags/tags)
func (_ Unimplemented) ListTags(w http.ResponseWriter, r *http.Request, params ListTagsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a DAG
// (DELETE /dags/{dagLocation})
func (_ Unimplemented) DeleteDAG(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params DeleteDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get DAG details
// (GET /dags/{dagLocation})
func (_ Unimplemented) GetDAGDetails(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params GetDAGDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Perform an action on a DAG
// (POST /dags/{dagLocation})
func (_ Unimplemented) PostDAGAction(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params PostDAGActionParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get history of DAG runs
// (GET /dags/{dagLocation}/runs)
func (_ Unimplemented) GetDAGRunHistory(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params GetDAGRunHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get latest run status
// (GET /dags/{dagLocation}/runs/{requestId})
func (_ Unimplemented) GetDAGRunStatus(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, requestId RequestId, params GetDAGRunStatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get DAG Spec
// (GET /dags/{dagLocation}/spec)
func (_ Unimplemented) GetDAGSpec(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params GetDAGSpecParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update DAG Spec
// (PUT /dags/{dagLocation}/spec)
func (_ Unimplemented) UpdateDAGSpec(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params UpdateDAGSpecParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Start a DAG
// (POST /dags/{dagLocation}/start)
func (_ Unimplemented) StartDAG(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params StartDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Stop a DAG
// (POST /dags/{dagLocation}/stop)
func (_ Unimplemented) StopDAG(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params StopDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check endpoint
// (GET /health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get content of a log file
// (GET /runs/{dagName}/{requestId}/log)
func (_ Unimplemented) GetRunLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, params GetRunLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get content of a step log file
// (GET /runs/{dagName}/{requestId}/{stepName}/log)
func (_ Unimplemented) GetStepLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, stepName StepName, params GetStepLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListDAGs operation middleware
func (siw *ServerInterfaceWrapper) ListDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDAGsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", r.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "perPage", Err: err})
		return
	}

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateDAG operation middleware
func (siw *ServerInterfaceWrapper) CreateDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDAG(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchDAGs operation middleware
func (siw *ServerInterfaceWrapper) SearchDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchDAGsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Required query parameter "q" -------------

	if paramValue := r.URL.Query().Get("q"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "q"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTagsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTags(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteDAG operation middleware
func (siw *ServerInterfaceWrapper) DeleteDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagLocation" -------------
	var dagLocation DAGLocation

	err = runtime.BindStyledParameterWithOptions("simple", "dagLocation", chi.URLParam(r, "dagLocation"), &dagLocation, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagLocation", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDAG(w, r, dagLocation, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagLocation" -------------
	var dagLocation DAGLocation

	err = runtime.BindStyledParameterWithOptions("simple", "dagLocation", chi.URLParam(r, "dagLocation"), &dagLocation, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagLocation", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGDetails(w, r, dagLocation, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PostDAGAction operation middleware
func (siw *ServerInterfaceWrapper) PostDAGAction(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagLocation" -------------
	var dagLocation DAGLocation

	err = runtime.BindStyledParameterWithOptions("simple", "dagLocation", chi.URLParam(r, "dagLocation"), &dagLocation, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagLocation", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDAGActionParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDAGAction(w, r, dagLocation, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGRunHistory operation middleware
func (siw *ServerInterfaceWrapper) GetDAGRunHistory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagLocation" -------------
	var dagLocation DAGLocation

	err = runtime.BindStyledParameterWithOptions("simple", "dagLocation", chi.URLParam(r, "dagLocation"), &dagLocation, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagLocation", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGRunHistoryParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGRunHistory(w, r, dagLocation, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGRunStatus operation middleware
func (siw *ServerInterfaceWrapper) GetDAGRunStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagLocation" -------------
	var dagLocation DAGLocation

	err = runtime.BindStyledParameterWithOptions("simple", "dagLocation", chi.URLParam(r, "dagLocation"), &dagLocation, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagLocation", Err: err})
		return
	}

	// ------------- Path parameter "requestId" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithOptions("simple", "requestId", chi.URLParam(r, "requestId"), &requestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGRunStatusParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGRunStatus(w, r, dagLocation, requestId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGSpec operation middleware
func (siw *ServerInterfaceWrapper) GetDAGSpec(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagLocation" -------------
	var dagLocation DAGLocation

	err = runtime.BindStyledParameterWithOptions("simple", "dagLocation", chi.URLParam(r, "dagLocation"), &dagLocation, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagLocation", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGSpecParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGSpec(w, r, dagLocation, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDAGSpec operation middleware
func (siw *ServerInterfaceWrapper) UpdateDAGSpec(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagLocation" -------------
	var dagLocation DAGLocation

	err = runtime.BindStyledParameterWithOptions("simple", "dagLocation", chi.URLParam(r, "dagLocation"), &dagLocation, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagLocation", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateDAGSpecParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDAGSpec(w, r, dagLocation, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// StartDAG operation middleware
func (siw *ServerInterfaceWrapper) StartDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagLocation" -------------
	var dagLocation DAGLocation

	err = runtime.BindStyledParameterWithOptions("simple", "dagLocation", chi.URLParam(r, "dagLocation"), &dagLocation, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagLocation", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params StartDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StartDAG(w, r, dagLocation, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// StopDAG operation middleware
func (siw *ServerInterfaceWrapper) StopDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagLocation" -------------
	var dagLocation DAGLocation

	err = runtime.BindStyledParameterWithOptions("simple", "dagLocation", chi.URLParam(r, "dagLocation"), &dagLocation, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagLocation", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params StopDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.StopDAG(w, r, dagLocation, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunLog operation middleware
func (siw *ServerInterfaceWrapper) GetRunLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagName" -------------
	var dagName DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "dagName", chi.URLParam(r, "dagName"), &dagName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagName", Err: err})
		return
	}

	// ------------- Path parameter "requestId" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithOptions("simple", "requestId", chi.URLParam(r, "requestId"), &requestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRunLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunLog(w, r, dagName, requestId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStepLog operation middleware
func (siw *ServerInterfaceWrapper) GetStepLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagName" -------------
	var dagName DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "dagName", chi.URLParam(r, "dagName"), &dagName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagName", Err: err})
		return
	}

	// ------------- Path parameter "requestId" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithOptions("simple", "requestId", chi.URLParam(r, "requestId"), &requestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStepLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStepLog(w, r, dagName, requestId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags", wrapper.ListDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags", wrapper.CreateDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/search", wrapper.SearchDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/tags", wrapper.ListTags)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/dags/{dagLocation}", wrapper.DeleteDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{dagLocation}", wrapper.GetDAGDetails)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{dagLocation}", wrapper.PostDAGAction)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{dagLocation}/runs", wrapper.GetDAGRunHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{dagLocation}/runs/{requestId}", wrapper.GetDAGRunStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{dagLocation}/spec", wrapper.GetDAGSpec)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/dags/{dagLocation}/spec", wrapper.UpdateDAGSpec)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{dagLocation}/start", wrapper.StartDAG)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{dagLocation}/stop", wrapper.StopDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/runs/{dagName}/{requestId}/log", wrapper.GetRunLog)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/runs/{dagName}/{requestId}/{stepName}/log", wrapper.GetStepLog)
	})

	return r
}

type ListDAGsRequestObject struct {
	Params ListDAGsParams
}

type ListDAGsResponseObject interface {
	VisitListDAGsResponse(w http.ResponseWriter) error
}

type ListDAGs200JSONResponse struct {
	// Dags List of DAGs with their status and metadata
	Dags []DAGFile `json:"dags"`

	// Errors List of errors encountered during the request
	Errors     []string   `json:"errors"`
	Pagination Pagination `json:"pagination"`
}

func (response ListDAGs200JSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListDAGsdefaultJSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateDAGRequestObject struct {
	Params CreateDAGParams
	Body   *CreateDAGJSONRequestBody
}

type CreateDAGResponseObject interface {
	VisitCreateDAGResponse(w http.ResponseWriter) error
}

type CreateDAG201JSONResponse struct {
	// Name Name of the newly created DAG
	Name string `json:"name"`
}

func (response CreateDAG201JSONResponse) VisitCreateDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateDAGdefaultJSONResponse) VisitCreateDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SearchDAGsRequestObject struct {
	Params SearchDAGsParams
}

type SearchDAGsResponseObject interface {
	VisitSearchDAGsResponse(w http.ResponseWriter) error
}

type SearchDAGs200JSONResponse struct {
	// Errors Errors encountered during the search
	Errors []string `json:"errors"`

	// Results Search results matching the query
	Results []SearchDAGsResultItem `json:"results"`
}

func (response SearchDAGs200JSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SearchDAGsdefaultJSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListTagsRequestObject struct {
	Params ListTagsParams
}

type ListTagsResponseObject interface {
	VisitListTagsResponse(w http.ResponseWriter) error
}

type ListTags200JSONResponse ListTagResponse

func (response ListTags200JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTagsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListTagsdefaultJSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteDAGRequestObject struct {
	DagLocation DAGLocation `json:"dagLocation"`
	Params      DeleteDAGParams
}

type DeleteDAGResponseObject interface {
	VisitDeleteDAGResponse(w http.ResponseWriter) error
}

type DeleteDAG204Response struct {
}

func (response DeleteDAG204Response) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteDAG404JSONResponse Error

func (response DeleteDAG404JSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteDAGdefaultJSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGDetailsRequestObject struct {
	DagLocation DAGLocation `json:"dagLocation"`
	Params      GetDAGDetailsParams
}

type GetDAGDetailsResponseObject interface {
	VisitGetDAGDetailsResponse(w http.ResponseWriter) error
}

type GetDAGDetails200JSONResponse struct {
	// Dag Detailed DAG configuration information
	Dag *DAGDetails `json:"dag,omitempty"`

	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// LatestRun Detailed status of a DAG run including child nodes
	LatestRun RunDetails `json:"latestRun"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"suspended"`
}

func (response GetDAGDetails200JSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGDetailsdefaultJSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostDAGActionRequestObject struct {
	DagLocation DAGLocation `json:"dagLocation"`
	Params      PostDAGActionParams
	Body        *PostDAGActionJSONRequestBody
}

type PostDAGActionResponseObject interface {
	VisitPostDAGActionResponse(w http.ResponseWriter) error
}

type PostDAGAction200JSONResponse PostDAGActionResponse

func (response PostDAGAction200JSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostDAGActiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PostDAGActiondefaultJSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGRunHistoryRequestObject struct {
	DagLocation DAGLocation `json:"dagLocation"`
	Params      GetDAGRunHistoryParams
}

type GetDAGRunHistoryResponseObject interface {
	VisitGetDAGRunHistoryResponse(w http.ResponseWriter) error
}

type GetDAGRunHistory200JSONResponse struct {
	// GridData Grid data for visualization
	GridData []DAGLogGridItem `json:"gridData"`

	// Runs List of historical runs for the DAG
	Runs []RunDetails `json:"runs"`
}

func (response GetDAGRunHistory200JSONResponse) VisitGetDAGRunHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunHistorydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGRunHistorydefaultJSONResponse) VisitGetDAGRunHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGRunStatusRequestObject struct {
	DagLocation DAGLocation `json:"dagLocation"`
	RequestId   RequestId   `json:"requestId"`
	Params      GetDAGRunStatusParams
}

type GetDAGRunStatusResponseObject interface {
	VisitGetDAGRunStatusResponse(w http.ResponseWriter) error
}

type GetDAGRunStatus200JSONResponse struct {
	// Run Detailed status of a DAG run including child nodes
	Run RunDetails `json:"run"`
}

func (response GetDAGRunStatus200JSONResponse) VisitGetDAGRunStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunStatusdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGRunStatusdefaultJSONResponse) VisitGetDAGRunStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGSpecRequestObject struct {
	DagLocation DAGLocation `json:"dagLocation"`
	Params      GetDAGSpecParams
}

type GetDAGSpecResponseObject interface {
	VisitGetDAGSpecResponse(w http.ResponseWriter) error
}

type GetDAGSpec200JSONResponse struct {
	// Dag Detailed DAG configuration information
	Dag *DAGDetails `json:"dag,omitempty"`

	// Errors List of errors in the spec
	Errors []string `json:"errors"`

	// Spec The DAG spec
	Spec string `json:"spec"`
}

func (response GetDAGSpec200JSONResponse) VisitGetDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGSpecdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGSpecdefaultJSONResponse) VisitGetDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateDAGSpecRequestObject struct {
	DagLocation DAGLocation `json:"dagLocation"`
	Params      UpdateDAGSpecParams
	Body        *UpdateDAGSpecJSONRequestBody
}

type UpdateDAGSpecResponseObject interface {
	VisitUpdateDAGSpecResponse(w http.ResponseWriter) error
}

type UpdateDAGSpec200Response struct {
}

func (response UpdateDAGSpec200Response) VisitUpdateDAGSpecResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateDAGSpec400JSONResponse struct {
	// Errors List of errors in the spec
	Errors []string `json:"errors"`
}

func (response UpdateDAGSpec400JSONResponse) VisitUpdateDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGSpecdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateDAGSpecdefaultJSONResponse) VisitUpdateDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type StartDAGRequestObject struct {
	DagLocation DAGLocation `json:"dagLocation"`
	Params      StartDAGParams
	Body        *StartDAGJSONRequestBody
}

type StartDAGResponseObject interface {
	VisitStartDAGResponse(w http.ResponseWriter) error
}

type StartDAG200Response struct {
}

func (response StartDAG200Response) VisitStartDAGResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type StartDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response StartDAGdefaultJSONResponse) VisitStartDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type StopDAGRequestObject struct {
	DagLocation DAGLocation `json:"dagLocation"`
	Params      StopDAGParams
}

type StopDAGResponseObject interface {
	VisitStopDAGResponse(w http.ResponseWriter) error
}

type StopDAG200Response struct {
}

func (response StopDAG200Response) VisitStopDAGResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type StopDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response StopDAGdefaultJSONResponse) VisitStopDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse HealthResponse

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthdefaultResponse struct {
	StatusCode int
}

func (response GetHealthdefaultResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetRunLogRequestObject struct {
	DagName   DAGName   `json:"dagName"`
	RequestId RequestId `json:"requestId"`
	Params    GetRunLogParams
}

type GetRunLogResponseObject interface {
	VisitGetRunLogResponse(w http.ResponseWriter) error
}

type GetRunLog200JSONResponse Log

func (response GetRunLog200JSONResponse) VisitGetRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRunLog404JSONResponse Error

func (response GetRunLog404JSONResponse) VisitGetRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRunLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetRunLogdefaultJSONResponse) VisitGetRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetStepLogRequestObject struct {
	DagName   DAGName   `json:"dagName"`
	RequestId RequestId `json:"requestId"`
	StepName  StepName  `json:"stepName"`
	Params    GetStepLogParams
}

type GetStepLogResponseObject interface {
	VisitGetStepLogResponse(w http.ResponseWriter) error
}

type GetStepLog200JSONResponse Log

func (response GetStepLog200JSONResponse) VisitGetStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStepLog404JSONResponse Error

func (response GetStepLog404JSONResponse) VisitGetStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetStepLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetStepLogdefaultJSONResponse) VisitGetStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List DAGs
	// (GET /dags)
	ListDAGs(ctx context.Context, request ListDAGsRequestObject) (ListDAGsResponseObject, error)
	// Create a new DAG
	// (POST /dags)
	CreateDAG(ctx context.Context, request CreateDAGRequestObject) (CreateDAGResponseObject, error)
	// Search DAGs
	// (GET /dags/search)
	SearchDAGs(ctx context.Context, request SearchDAGsRequestObject) (SearchDAGsResponseObject, error)
	// List all tags
	// (GET /dags/tags)
	ListTags(ctx context.Context, request ListTagsRequestObject) (ListTagsResponseObject, error)
	// Delete a DAG
	// (DELETE /dags/{dagLocation})
	DeleteDAG(ctx context.Context, request DeleteDAGRequestObject) (DeleteDAGResponseObject, error)
	// Get DAG details
	// (GET /dags/{dagLocation})
	GetDAGDetails(ctx context.Context, request GetDAGDetailsRequestObject) (GetDAGDetailsResponseObject, error)
	// Perform an action on a DAG
	// (POST /dags/{dagLocation})
	PostDAGAction(ctx context.Context, request PostDAGActionRequestObject) (PostDAGActionResponseObject, error)
	// Get history of DAG runs
	// (GET /dags/{dagLocation}/runs)
	GetDAGRunHistory(ctx context.Context, request GetDAGRunHistoryRequestObject) (GetDAGRunHistoryResponseObject, error)
	// Get latest run status
	// (GET /dags/{dagLocation}/runs/{requestId})
	GetDAGRunStatus(ctx context.Context, request GetDAGRunStatusRequestObject) (GetDAGRunStatusResponseObject, error)
	// Get DAG Spec
	// (GET /dags/{dagLocation}/spec)
	GetDAGSpec(ctx context.Context, request GetDAGSpecRequestObject) (GetDAGSpecResponseObject, error)
	// Update DAG Spec
	// (PUT /dags/{dagLocation}/spec)
	UpdateDAGSpec(ctx context.Context, request UpdateDAGSpecRequestObject) (UpdateDAGSpecResponseObject, error)
	// Start a DAG
	// (POST /dags/{dagLocation}/start)
	StartDAG(ctx context.Context, request StartDAGRequestObject) (StartDAGResponseObject, error)
	// Stop a DAG
	// (POST /dags/{dagLocation}/stop)
	StopDAG(ctx context.Context, request StopDAGRequestObject) (StopDAGResponseObject, error)
	// Health check endpoint
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Get content of a log file
	// (GET /runs/{dagName}/{requestId}/log)
	GetRunLog(ctx context.Context, request GetRunLogRequestObject) (GetRunLogResponseObject, error)
	// Get content of a step log file
	// (GET /runs/{dagName}/{requestId}/{stepName}/log)
	GetStepLog(ctx context.Context, request GetStepLogRequestObject) (GetStepLogResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListDAGs operation middleware
func (sh *strictHandler) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	var request ListDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListDAGs(ctx, request.(ListDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListDAGsResponseObject); ok {
		if err := validResponse.VisitListDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateDAG operation middleware
func (sh *strictHandler) CreateDAG(w http.ResponseWriter, r *http.Request, params CreateDAGParams) {
	var request CreateDAGRequestObject

	request.Params = params

	var body CreateDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDAG(ctx, request.(CreateDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateDAGResponseObject); ok {
		if err := validResponse.VisitCreateDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchDAGs operation middleware
func (sh *strictHandler) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	var request SearchDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchDAGs(ctx, request.(SearchDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchDAGsResponseObject); ok {
		if err := validResponse.VisitSearchDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTags operation middleware
func (sh *strictHandler) ListTags(w http.ResponseWriter, r *http.Request, params ListTagsParams) {
	var request ListTagsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTags(ctx, request.(ListTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTagsResponseObject); ok {
		if err := validResponse.VisitListTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDAG operation middleware
func (sh *strictHandler) DeleteDAG(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params DeleteDAGParams) {
	var request DeleteDAGRequestObject

	request.DagLocation = dagLocation
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDAG(ctx, request.(DeleteDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDAGResponseObject); ok {
		if err := validResponse.VisitDeleteDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGDetails operation middleware
func (sh *strictHandler) GetDAGDetails(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params GetDAGDetailsParams) {
	var request GetDAGDetailsRequestObject

	request.DagLocation = dagLocation
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGDetails(ctx, request.(GetDAGDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostDAGAction operation middleware
func (sh *strictHandler) PostDAGAction(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params PostDAGActionParams) {
	var request PostDAGActionRequestObject

	request.DagLocation = dagLocation
	request.Params = params

	var body PostDAGActionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostDAGAction(ctx, request.(PostDAGActionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDAGAction")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostDAGActionResponseObject); ok {
		if err := validResponse.VisitPostDAGActionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGRunHistory operation middleware
func (sh *strictHandler) GetDAGRunHistory(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params GetDAGRunHistoryParams) {
	var request GetDAGRunHistoryRequestObject

	request.DagLocation = dagLocation
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGRunHistory(ctx, request.(GetDAGRunHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGRunHistory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGRunHistoryResponseObject); ok {
		if err := validResponse.VisitGetDAGRunHistoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGRunStatus operation middleware
func (sh *strictHandler) GetDAGRunStatus(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, requestId RequestId, params GetDAGRunStatusParams) {
	var request GetDAGRunStatusRequestObject

	request.DagLocation = dagLocation
	request.RequestId = requestId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGRunStatus(ctx, request.(GetDAGRunStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGRunStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGRunStatusResponseObject); ok {
		if err := validResponse.VisitGetDAGRunStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGSpec operation middleware
func (sh *strictHandler) GetDAGSpec(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params GetDAGSpecParams) {
	var request GetDAGSpecRequestObject

	request.DagLocation = dagLocation
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGSpec(ctx, request.(GetDAGSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGSpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGSpecResponseObject); ok {
		if err := validResponse.VisitGetDAGSpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDAGSpec operation middleware
func (sh *strictHandler) UpdateDAGSpec(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params UpdateDAGSpecParams) {
	var request UpdateDAGSpecRequestObject

	request.DagLocation = dagLocation
	request.Params = params

	var body UpdateDAGSpecJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDAGSpec(ctx, request.(UpdateDAGSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDAGSpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDAGSpecResponseObject); ok {
		if err := validResponse.VisitUpdateDAGSpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StartDAG operation middleware
func (sh *strictHandler) StartDAG(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params StartDAGParams) {
	var request StartDAGRequestObject

	request.DagLocation = dagLocation
	request.Params = params

	var body StartDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StartDAG(ctx, request.(StartDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StartDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StartDAGResponseObject); ok {
		if err := validResponse.VisitStartDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// StopDAG operation middleware
func (sh *strictHandler) StopDAG(w http.ResponseWriter, r *http.Request, dagLocation DAGLocation, params StopDAGParams) {
	var request StopDAGRequestObject

	request.DagLocation = dagLocation
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.StopDAG(ctx, request.(StopDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StopDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(StopDAGResponseObject); ok {
		if err := validResponse.VisitStopDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(w http.ResponseWriter, r *http.Request) {
	var request GetHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRunLog operation middleware
func (sh *strictHandler) GetRunLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, params GetRunLogParams) {
	var request GetRunLogRequestObject

	request.DagName = dagName
	request.RequestId = requestId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRunLog(ctx, request.(GetRunLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRunLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRunLogResponseObject); ok {
		if err := validResponse.VisitGetRunLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStepLog operation middleware
func (sh *strictHandler) GetStepLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, stepName StepName, params GetStepLogParams) {
	var request GetStepLogRequestObject

	request.DagName = dagName
	request.RequestId = requestId
	request.StepName = stepName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetStepLog(ctx, request.(GetStepLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStepLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetStepLogResponseObject); ok {
		if err := validResponse.VisitGetStepLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
