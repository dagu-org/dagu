// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	ApiTokenScopes  = "apiToken.Scopes"
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for ErrorCode.
const (
	ErrorCodeAlreadyExists   ErrorCode = "already_exists"
	ErrorCodeAlreadyRunning  ErrorCode = "already_running"
	ErrorCodeBadGateway      ErrorCode = "bad_gateway"
	ErrorCodeBadRequest      ErrorCode = "bad_request"
	ErrorCodeInternalError   ErrorCode = "internal_error"
	ErrorCodeNotFound        ErrorCode = "not_found"
	ErrorCodeNotRunning      ErrorCode = "not_running"
	ErrorCodeRemoteNodeError ErrorCode = "remote_node_error"
	ErrorCodeUnauthorized    ErrorCode = "unauthorized"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusHealthy   HealthResponseStatus = "healthy"
	HealthResponseStatusUnhealthy HealthResponseStatus = "unhealthy"
)

// Defines values for NodeStatus.
const (
	NodeStatusCancelled  NodeStatus = 3
	NodeStatusFailed     NodeStatus = 2
	NodeStatusNotStarted NodeStatus = 0
	NodeStatusRunning    NodeStatus = 1
	NodeStatusSkipped    NodeStatus = 5
	NodeStatusSuccess    NodeStatus = 4
)

// Defines values for NodeStatusLabel.
const (
	NodeStatusLabelCanceled   NodeStatusLabel = "canceled"
	NodeStatusLabelFailed     NodeStatusLabel = "failed"
	NodeStatusLabelFinished   NodeStatusLabel = "finished"
	NodeStatusLabelNotStarted NodeStatusLabel = "not started"
	NodeStatusLabelRunning    NodeStatusLabel = "running"
	NodeStatusLabelSkipped    NodeStatusLabel = "skipped"
)

// Defines values for Status.
const (
	StatusCancelled  Status = 3
	StatusFailed     Status = 2
	StatusNotStarted Status = 0
	StatusRunning    Status = 1
	StatusSuccess    Status = 4
)

// Defines values for StatusLabel.
const (
	StatusLabelCancelled  StatusLabel = "cancelled"
	StatusLabelFailed     StatusLabel = "failed"
	StatusLabelFinished   StatusLabel = "finished"
	StatusLabelNotStarted StatusLabel = "not started"
	StatusLabelRunning    StatusLabel = "running"
)

// DAG Core DAG configuration containing workflow definition and metadata
type DAG struct {
	// DefaultParams Default parameter values in JSON format if not specified at runtime
	DefaultParams *string `json:"defaultParams,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description *string `json:"description,omitempty"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"group,omitempty"`

	// Name Logical name of the DAG
	Name string `json:"name"`

	// Params List of parameter names that can be passed to the DAG at runtime
	Params *[]string `json:"params,omitempty"`

	// Schedule List of scheduling expressions defining when the DAG should run
	Schedule *[]Schedule `json:"schedule,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"tags,omitempty"`
}

// DAGDetails Detailed DAG configuration information
type DAGDetails struct {
	// DefaultParams Default parameter values in JSON format if not specified at runtime
	DefaultParams *string `json:"defaultParams,omitempty"`

	// Delay Time in seconds to wait before starting the DAG
	Delay *int `json:"delay,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description *string `json:"description,omitempty"`

	// Env List of environment variables to set before executing
	Env *[]string `json:"env,omitempty"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"group,omitempty"`

	// HandlerOn Configuration for event handlers in a DAG
	HandlerOn *HandlerOn `json:"handlerOn,omitempty"`

	// HistRetentionDays Number of days to retain historical logs
	HistRetentionDays *int `json:"histRetentionDays,omitempty"`

	// LogDir Directory path for storing log files
	LogDir *string `json:"logDir,omitempty"`

	// MaxActiveRuns Maximum number of concurrent steps to run
	MaxActiveRuns *int `json:"maxActiveRuns,omitempty"`

	// Name Unique identifier for the DAG within its group
	Name string `json:"name"`

	// Params List of parameter names that can be passed to the DAG at runtime
	Params *[]string `json:"params,omitempty"`

	// Preconditions Conditions that must be met before the DAG can start
	Preconditions *[]Precondition `json:"preconditions,omitempty"`

	// Schedule List of scheduling expressions defining when the DAG should run
	Schedule *[]Schedule `json:"schedule,omitempty"`

	// Steps List of steps to execute in the DAG
	Steps *[]Step `json:"steps,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"tags,omitempty"`
}

// DAGFile DAG file with its status information
type DAGFile struct {
	// Dag Core DAG configuration containing workflow definition and metadata
	Dag DAG `json:"dag"`

	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// FileName File ID of the DAG file
	FileName string `json:"fileName"`

	// LatestRun Current status of a DAG run
	LatestRun RunSummary `json:"latestRun"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"suspended"`
}

// DAGFileName Name of the DAG file
type DAGFileName = string

// DAGGridItem Grid item for log visualization
type DAGGridItem struct {
	// History Status of the step ordered by time
	History []NodeStatus `json:"history"`

	// Name Name of the step
	Name string `json:"name"`
}

// DAGName Name of the DAG
type DAGName = string

// Error Generic error response object
type Error struct {
	// Code Error code indicating the type of error
	Code ErrorCode `json:"code"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Short error message
	Message string `json:"message"`
}

// ErrorCode Error code indicating the type of error
type ErrorCode string

// HandlerOn Configuration for event handlers in a DAG
type HandlerOn struct {
	// Cancel Individual task within a DAG that performs a specific operation
	Cancel *Step `json:"cancel,omitempty"`

	// Exit Individual task within a DAG that performs a specific operation
	Exit *Step `json:"exit,omitempty"`

	// Failure Individual task within a DAG that performs a specific operation
	Failure *Step `json:"failure,omitempty"`

	// Success Individual task within a DAG that performs a specific operation
	Success *Step `json:"success,omitempty"`
}

// HealthResponse Response object for the health check endpoint
type HealthResponse struct {
	// Status Overall health status of the server
	Status HealthResponseStatus `json:"status"`

	// Timestamp Current server time
	Timestamp string `json:"timestamp"`

	// Uptime Server uptime in seconds
	Uptime int `json:"uptime"`

	// Version Current version of the server
	Version string `json:"version"`
}

// HealthResponseStatus Overall health status of the server
type HealthResponseStatus string

// ListTagResponse Response object for listing all tags
type ListTagResponse struct {
	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// Tags List of unique tags
	Tags []string `json:"tags"`
}

// Log Log information for the scheduler
type Log struct {
	// Content Log content
	Content string `json:"content"`

	// HasMore Whether there are more lines available
	HasMore *bool `json:"hasMore,omitempty"`

	// IsEstimate Whether the line count is an estimate
	IsEstimate *bool `json:"isEstimate,omitempty"`

	// LineCount Number of lines returned
	LineCount *int `json:"lineCount,omitempty"`

	// TotalLines Total number of lines in the log file
	TotalLines *int `json:"totalLines,omitempty"`
}

// Node Status of an individual step within a DAG run
type Node struct {
	// DoneCount Number of successful completions for repeating steps
	DoneCount int `json:"doneCount"`

	// Error Error message if the step failed
	Error *string `json:"error,omitempty"`

	// FinishedAt RFC3339 timestamp when the step finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to step-specific log file
	Log string `json:"log"`

	// RetryCount Number of retry attempts made for this step
	RetryCount int `json:"retryCount"`

	// StartedAt RFC3339 timestamp when the step started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current node state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Skipped"
	Status NodeStatus `json:"status"`

	// StatusLabel Human-readable status description for the node
	StatusLabel NodeStatusLabel `json:"statusLabel"`

	// Step Individual task within a DAG that performs a specific operation
	Step Step `json:"step"`

	// SubRuns List of sub-runs associated with this step
	SubRuns *[]SubRun `json:"subRuns,omitempty"`
}

// NodeStatus Numeric status code indicating current node state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
// 5: "Skipped"
type NodeStatus int

// NodeStatusLabel Human-readable status description for the node
type NodeStatusLabel string

// Pagination defines model for Pagination.
type Pagination struct {
	// CurrentPage current page number
	CurrentPage int `json:"currentPage"`

	// NextPage next page number
	NextPage int `json:"nextPage"`

	// PrevPage previous page number
	PrevPage int `json:"prevPage"`

	// TotalPages total number of pages
	TotalPages int `json:"totalPages"`

	// TotalRecords total number of records
	TotalRecords int `json:"totalRecords"`
}

// Precondition Precondition that must be satisfied before running a step or DAG
type Precondition struct {
	// Condition Expression or check to evaluate
	Condition *string `json:"condition,omitempty"`

	// Expected Expected result of the condition evaluation
	Expected *string `json:"expected,omitempty"`
}

// RepeatPolicy Configuration for step retry behavior
type RepeatPolicy struct {
	// Interval Time in seconds to wait between retry attempts
	Interval *int `json:"interval,omitempty"`

	// Repeat Whether the step should be retried on failure
	Repeat *bool `json:"repeat,omitempty"`
}

// RequestId Unique identifier for the request
type RequestId = string

// RunDetails defines model for RunDetails.
type RunDetails struct {
	// FinishedAt RFC 3339 timestamp when the DAG run finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to the log file
	Log string `json:"log"`

	// Name Name of the DAG
	Name DAGName `json:"name"`

	// Nodes Status of individual steps within the DAG
	Nodes []Node `json:"nodes"`

	// OnCancel Status of an individual step within a DAG run
	OnCancel *Node `json:"onCancel,omitempty"`

	// OnExit Status of an individual step within a DAG run
	OnExit *Node `json:"onExit,omitempty"`

	// OnFailure Status of an individual step within a DAG run
	OnFailure *Node `json:"onFailure,omitempty"`

	// OnSuccess Status of an individual step within a DAG run
	OnSuccess *Node `json:"onSuccess,omitempty"`

	// Params Runtime parameters passed to the DAG in JSON format
	Params *string `json:"params,omitempty"`

	// Pid Process ID of the DAG run
	Pid *int `json:"pid,omitempty"`

	// RequestId Unique identifier for the request
	RequestId RequestId `json:"requestId"`

	// StartedAt RFC 3339 timestamp when the DAG run started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current run state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	Status Status `json:"status"`

	// StatusLabel Human-readable status description for the DAG run
	StatusLabel StatusLabel `json:"statusLabel"`
}

// RunSummary Current status of a DAG run
type RunSummary struct {
	// FinishedAt RFC 3339 timestamp when the DAG run finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to the log file
	Log string `json:"log"`

	// Name Name of the DAG
	Name DAGName `json:"name"`

	// Params Runtime parameters passed to the DAG in JSON format
	Params *string `json:"params,omitempty"`

	// Pid Process ID of the DAG run
	Pid *int `json:"pid,omitempty"`

	// RequestId Unique identifier for the request
	RequestId RequestId `json:"requestId"`

	// StartedAt RFC 3339 timestamp when the DAG run started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current run state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	Status Status `json:"status"`

	// StatusLabel Human-readable status description for the DAG run
	StatusLabel StatusLabel `json:"statusLabel"`
}

// Schedule Schedule configuration for DAG run
type Schedule struct {
	// Expression Cron expression or schedule pattern
	Expression string `json:"expression"`
}

// SearchDAGsMatchItem Details of a search match within a DAG
type SearchDAGsMatchItem struct {
	// Line Matching line content
	Line string `json:"line"`

	// LineNumber Line number where match was found
	LineNumber int `json:"lineNumber"`

	// StartLine Start line for context
	StartLine int `json:"startLine"`
}

// SearchResultItem Individual search result item for a DAG
type SearchResultItem struct {
	// Dag Core DAG configuration containing workflow definition and metadata
	Dag DAG `json:"dag"`

	// Matches Details of where matches were found
	Matches []SearchDAGsMatchItem `json:"matches"`

	// Name Name of the matching DAG
	Name string `json:"name"`
}

// Status Numeric status code indicating current run state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
type Status int

// StatusLabel Human-readable status description for the DAG run
type StatusLabel string

// Step Individual task within a DAG that performs a specific operation
type Step struct {
	// Args List of arguments to pass to the command
	Args *[]string `json:"args,omitempty"`

	// CmdWithArgs Complete command string including arguments to execute
	CmdWithArgs *string `json:"cmdWithArgs,omitempty"`

	// Command Base command to execute without arguments
	Command *string `json:"command,omitempty"`

	// Depends List of step names that must complete before this step can start
	Depends *[]string `json:"depends,omitempty"`

	// Description Human-readable description of what the step does
	Description *string `json:"description,omitempty"`

	// Dir Working directory for executing the step's command
	Dir *string `json:"dir,omitempty"`

	// MailOnError Whether to send email notifications on step failure
	MailOnError *bool `json:"mailOnError,omitempty"`

	// Name Unique identifier for the step within the DAG
	Name string `json:"name"`

	// Output Variable name to store the step's output
	Output *string `json:"output,omitempty"`

	// Params Parameters to pass to the sub-run in JSON format
	Params *string `json:"params,omitempty"`

	// Preconditions Conditions that must be met before the step can start
	Preconditions *[]Precondition `json:"preconditions,omitempty"`

	// RepeatPolicy Configuration for step retry behavior
	RepeatPolicy *RepeatPolicy `json:"repeatPolicy,omitempty"`

	// Run The name of the DAG to run as a sub-run
	Run *string `json:"run,omitempty"`

	// Script Script content if the step executes a script file
	Script *string `json:"script,omitempty"`

	// Stderr File path for capturing standard error
	Stderr *string `json:"stderr,omitempty"`

	// Stdout File path for capturing standard output
	Stdout *string `json:"stdout,omitempty"`
}

// SubRun Metadata for a sub run
type SubRun struct {
	// RequestId Unique identifier for the request
	RequestId RequestId `json:"requestId"`
}

// Head defines model for Head.
type Head = int

// Limit defines model for Limit.
type Limit = int

// Offset defines model for Offset.
type Offset = int

// Page defines model for Page.
type Page = int

// PerPage defines model for PerPage.
type PerPage = int

// RemoteNode defines model for RemoteNode.
type RemoteNode = string

// StepName defines model for StepName.
type StepName = string

// Tail defines model for Tail.
type Tail = int

// ListDAGsParams defines parameters for ListDAGs.
type ListDAGsParams struct {
	// Page page number of items to fetch (default is 1)
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage number of items per page (default is 30, max is 100)
	PerPage *PerPage `form:"perPage,omitempty" json:"perPage,omitempty"`

	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Name Filter DAGs by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Tag Filter DAGs by tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`
}

// CreateNewDAGJSONBody defines parameters for CreateNewDAG.
type CreateNewDAGJSONBody struct {
	// Name Name of the DAG
	Name DAGName `json:"name"`
}

// CreateNewDAGParams defines parameters for CreateNewDAG.
type CreateNewDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// SearchDAGsParams defines parameters for SearchDAGs.
type SearchDAGsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Q A search query string
	Q string `form:"q" json:"q"`
}

// GetAllDAGTagsParams defines parameters for GetAllDAGTags.
type GetAllDAGTagsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// DeleteDAGParams defines parameters for DeleteDAG.
type DeleteDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGDetailsParams defines parameters for GetDAGDetails.
type GetDAGDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// RenameDAGJSONBody defines parameters for RenameDAG.
type RenameDAGJSONBody struct {
	// NewFileName New file name for the DAG
	NewFileName string `json:"newFileName"`
}

// RenameDAGParams defines parameters for RenameDAG.
type RenameDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// RetryDAGRunJSONBody defines parameters for RetryDAGRun.
type RetryDAGRunJSONBody struct {
	// RequestId Request ID of the DAG run to retry
	RequestId string `json:"requestId"`
}

// RetryDAGRunParams defines parameters for RetryDAGRun.
type RetryDAGRunParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGRunHistoryParams defines parameters for GetDAGRunHistory.
type GetDAGRunHistoryParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGRunDetailsParams defines parameters for GetDAGRunDetails.
type GetDAGRunDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGSpecParams defines parameters for GetDAGSpec.
type GetDAGSpecParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// UpdateDAGSpecJSONBody defines parameters for UpdateDAGSpec.
type UpdateDAGSpecJSONBody struct {
	// Spec The new DAG spec
	Spec string `json:"spec"`
}

// UpdateDAGSpecParams defines parameters for UpdateDAGSpec.
type UpdateDAGSpecParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// ExecuteDAGJSONBody defines parameters for ExecuteDAG.
type ExecuteDAGJSONBody struct {
	// Params Parameters to pass to the DAG in JSON format
	Params *string `json:"params,omitempty"`
}

// ExecuteDAGParams defines parameters for ExecuteDAG.
type ExecuteDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// TerminateDAGRunParams defines parameters for TerminateDAGRun.
type TerminateDAGRunParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// UpdateDAGSuspensionStateJSONBody defines parameters for UpdateDAGSuspensionState.
type UpdateDAGSuspensionStateJSONBody struct {
	// Suspend Suspend status to set for the DAG
	Suspend bool `json:"suspend"`
}

// UpdateDAGSuspensionStateParams defines parameters for UpdateDAGSuspensionState.
type UpdateDAGSuspensionStateParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetRunDetailsParams defines parameters for GetRunDetails.
type GetRunDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetRunLogParams defines parameters for GetRunLog.
type GetRunLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Tail Number of lines to return from the end of the file
	Tail *Tail `form:"tail,omitempty" json:"tail,omitempty"`

	// Head Number of lines to return from the beginning of the file
	Head *Head `form:"head,omitempty" json:"head,omitempty"`

	// Offset Line number to start reading from (1-based)
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of lines to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetRunStepLogParams defines parameters for GetRunStepLog.
type GetRunStepLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Tail Number of lines to return from the end of the file
	Tail *Tail `form:"tail,omitempty" json:"tail,omitempty"`

	// Head Number of lines to return from the beginning of the file
	Head *Head `form:"head,omitempty" json:"head,omitempty"`

	// Offset Line number to start reading from (1-based)
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of lines to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// UpdateRunStepStatusJSONBody defines parameters for UpdateRunStepStatus.
type UpdateRunStepStatusJSONBody struct {
	// Status Numeric status code indicating current node state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Skipped"
	Status NodeStatus `json:"status"`
}

// UpdateRunStepStatusParams defines parameters for UpdateRunStepStatus.
type UpdateRunStepStatusParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetSubRunDetailsParams defines parameters for GetSubRunDetails.
type GetSubRunDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetSubRunLogParams defines parameters for GetSubRunLog.
type GetSubRunLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Tail Number of lines to return from the end of the file
	Tail *Tail `form:"tail,omitempty" json:"tail,omitempty"`

	// Head Number of lines to return from the beginning of the file
	Head *Head `form:"head,omitempty" json:"head,omitempty"`

	// Offset Line number to start reading from (1-based)
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of lines to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSubRunStepLogParams defines parameters for GetSubRunStepLog.
type GetSubRunStepLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Tail Number of lines to return from the end of the file
	Tail *Tail `form:"tail,omitempty" json:"tail,omitempty"`

	// Head Number of lines to return from the beginning of the file
	Head *Head `form:"head,omitempty" json:"head,omitempty"`

	// Offset Line number to start reading from (1-based)
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of lines to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// UpdateSubRunStepStatusJSONBody defines parameters for UpdateSubRunStepStatus.
type UpdateSubRunStepStatusJSONBody struct {
	// Status Numeric status code indicating current node state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Skipped"
	Status NodeStatus `json:"status"`
}

// UpdateSubRunStepStatusParams defines parameters for UpdateSubRunStepStatus.
type UpdateSubRunStepStatusParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// CreateNewDAGJSONRequestBody defines body for CreateNewDAG for application/json ContentType.
type CreateNewDAGJSONRequestBody CreateNewDAGJSONBody

// RenameDAGJSONRequestBody defines body for RenameDAG for application/json ContentType.
type RenameDAGJSONRequestBody RenameDAGJSONBody

// RetryDAGRunJSONRequestBody defines body for RetryDAGRun for application/json ContentType.
type RetryDAGRunJSONRequestBody RetryDAGRunJSONBody

// UpdateDAGSpecJSONRequestBody defines body for UpdateDAGSpec for application/json ContentType.
type UpdateDAGSpecJSONRequestBody UpdateDAGSpecJSONBody

// ExecuteDAGJSONRequestBody defines body for ExecuteDAG for application/json ContentType.
type ExecuteDAGJSONRequestBody ExecuteDAGJSONBody

// UpdateDAGSuspensionStateJSONRequestBody defines body for UpdateDAGSuspensionState for application/json ContentType.
type UpdateDAGSuspensionStateJSONRequestBody UpdateDAGSuspensionStateJSONBody

// UpdateRunStepStatusJSONRequestBody defines body for UpdateRunStepStatus for application/json ContentType.
type UpdateRunStepStatusJSONRequestBody UpdateRunStepStatusJSONBody

// UpdateSubRunStepStatusJSONRequestBody defines body for UpdateSubRunStepStatus for application/json ContentType.
type UpdateSubRunStepStatusJSONRequestBody UpdateSubRunStepStatusJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all available DAGs
	// (GET /dags)
	ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams)
	// Create a new DAG definition
	// (POST /dags)
	CreateNewDAG(w http.ResponseWriter, r *http.Request, params CreateNewDAGParams)
	// Search DAGs
	// (GET /dags/search)
	SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams)
	// List all available DAG tags
	// (GET /dags/tags)
	GetAllDAGTags(w http.ResponseWriter, r *http.Request, params GetAllDAGTagsParams)
	// Delete an existing DAG
	// (DELETE /dags/{fileName})
	DeleteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params DeleteDAGParams)
	// Retrieve comprehensive DAG information
	// (GET /dags/{fileName})
	GetDAGDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDetailsParams)
	// Change DAG file ID
	// (POST /dags/{fileName}/rename)
	RenameDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RenameDAGParams)
	// Retry DAG execution
	// (POST /dags/{fileName}/retry)
	RetryDAGRun(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RetryDAGRunParams)
	// Retrieve execution history of a DAG
	// (GET /dags/{fileName}/runs)
	GetDAGRunHistory(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGRunHistoryParams)
	// Get detailed status of a specific DAG run
	// (GET /dags/{fileName}/runs/{requestId})
	GetDAGRunDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, requestId RequestId, params GetDAGRunDetailsParams)
	// Retrieve DAG specification
	// (GET /dags/{fileName}/spec)
	GetDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGSpecParams)
	// Update DAG spec
	// (PUT /dags/{fileName}/spec)
	UpdateDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSpecParams)
	// Initiate DAG execution
	// (POST /dags/{fileName}/start)
	ExecuteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params ExecuteDAGParams)
	// Terminate running DAG execution
	// (POST /dags/{fileName}/stop)
	TerminateDAGRun(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params TerminateDAGRunParams)
	// Toggle DAG suspension state
	// (POST /dags/{fileName}/suspend)
	UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSuspensionStateParams)
	// Check server health status
	// (GET /health)
	GetHealthStatus(w http.ResponseWriter, r *http.Request)
	// Retrieve detailed status of a DAG run
	// (GET /runs/{dagName}/{requestId})
	GetRunDetails(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, params GetRunDetailsParams)
	// Retrieve full execution log of a DAG run
	// (GET /runs/{dagName}/{requestId}/log)
	GetRunLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, params GetRunLogParams)
	// Retrieve log for a specific step in a DAG run
	// (GET /runs/{dagName}/{requestId}/steps/{stepName}/log)
	GetRunStepLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, stepName StepName, params GetRunStepLogParams)
	// Manually update a step's execution status
	// (PATCH /runs/{dagName}/{requestId}/steps/{stepName}/status)
	UpdateRunStepStatus(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, stepName StepName, params UpdateRunStepStatusParams)
	// Retrieve detailed status of a sub run
	// (GET /runs/{dagName}/{requestId}/subs/{subRunRequestId})
	GetSubRunDetails(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, subRunRequestId string, params GetSubRunDetailsParams)
	// Retrieve log for a specific sub run
	// (GET /runs/{dagName}/{requestId}/subs/{subRunRequestId}/log)
	GetSubRunLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, subRunRequestId string, params GetSubRunLogParams)
	// Retrieve log for a specific step in a sub run
	// (GET /runs/{dagName}/{requestId}/subs/{subRunRequestId}/steps/{stepName}/log)
	GetSubRunStepLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, subRunRequestId string, stepName StepName, params GetSubRunStepLogParams)
	// Manually update a step's execution status in a sub run
	// (PATCH /runs/{dagName}/{requestId}/subs/{subRunRequestId}/steps/{stepName}/status)
	UpdateSubRunStepStatus(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, subRunRequestId string, stepName StepName, params UpdateSubRunStepStatusParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all available DAGs
// (GET /dags)
func (_ Unimplemented) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new DAG definition
// (POST /dags)
func (_ Unimplemented) CreateNewDAG(w http.ResponseWriter, r *http.Request, params CreateNewDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search DAGs
// (GET /dags/search)
func (_ Unimplemented) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all available DAG tags
// (GET /dags/tags)
func (_ Unimplemented) GetAllDAGTags(w http.ResponseWriter, r *http.Request, params GetAllDAGTagsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an existing DAG
// (DELETE /dags/{fileName})
func (_ Unimplemented) DeleteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params DeleteDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve comprehensive DAG information
// (GET /dags/{fileName})
func (_ Unimplemented) GetDAGDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change DAG file ID
// (POST /dags/{fileName}/rename)
func (_ Unimplemented) RenameDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RenameDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retry DAG execution
// (POST /dags/{fileName}/retry)
func (_ Unimplemented) RetryDAGRun(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RetryDAGRunParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve execution history of a DAG
// (GET /dags/{fileName}/runs)
func (_ Unimplemented) GetDAGRunHistory(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGRunHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get detailed status of a specific DAG run
// (GET /dags/{fileName}/runs/{requestId})
func (_ Unimplemented) GetDAGRunDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, requestId RequestId, params GetDAGRunDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve DAG specification
// (GET /dags/{fileName}/spec)
func (_ Unimplemented) GetDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGSpecParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update DAG spec
// (PUT /dags/{fileName}/spec)
func (_ Unimplemented) UpdateDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSpecParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Initiate DAG execution
// (POST /dags/{fileName}/start)
func (_ Unimplemented) ExecuteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params ExecuteDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Terminate running DAG execution
// (POST /dags/{fileName}/stop)
func (_ Unimplemented) TerminateDAGRun(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params TerminateDAGRunParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Toggle DAG suspension state
// (POST /dags/{fileName}/suspend)
func (_ Unimplemented) UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSuspensionStateParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Check server health status
// (GET /health)
func (_ Unimplemented) GetHealthStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve detailed status of a DAG run
// (GET /runs/{dagName}/{requestId})
func (_ Unimplemented) GetRunDetails(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, params GetRunDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve full execution log of a DAG run
// (GET /runs/{dagName}/{requestId}/log)
func (_ Unimplemented) GetRunLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, params GetRunLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve log for a specific step in a DAG run
// (GET /runs/{dagName}/{requestId}/steps/{stepName}/log)
func (_ Unimplemented) GetRunStepLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, stepName StepName, params GetRunStepLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Manually update a step's execution status
// (PATCH /runs/{dagName}/{requestId}/steps/{stepName}/status)
func (_ Unimplemented) UpdateRunStepStatus(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, stepName StepName, params UpdateRunStepStatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve detailed status of a sub run
// (GET /runs/{dagName}/{requestId}/subs/{subRunRequestId})
func (_ Unimplemented) GetSubRunDetails(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, subRunRequestId string, params GetSubRunDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve log for a specific sub run
// (GET /runs/{dagName}/{requestId}/subs/{subRunRequestId}/log)
func (_ Unimplemented) GetSubRunLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, subRunRequestId string, params GetSubRunLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve log for a specific step in a sub run
// (GET /runs/{dagName}/{requestId}/subs/{subRunRequestId}/steps/{stepName}/log)
func (_ Unimplemented) GetSubRunStepLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, subRunRequestId string, stepName StepName, params GetSubRunStepLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Manually update a step's execution status in a sub run
// (PATCH /runs/{dagName}/{requestId}/subs/{subRunRequestId}/steps/{stepName}/status)
func (_ Unimplemented) UpdateSubRunStepStatus(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, subRunRequestId string, stepName StepName, params UpdateSubRunStepStatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListDAGs operation middleware
func (siw *ServerInterfaceWrapper) ListDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDAGsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", r.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "perPage", Err: err})
		return
	}

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateNewDAG operation middleware
func (siw *ServerInterfaceWrapper) CreateNewDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateNewDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNewDAG(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchDAGs operation middleware
func (siw *ServerInterfaceWrapper) SearchDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchDAGsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Required query parameter "q" -------------

	if paramValue := r.URL.Query().Get("q"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "q"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllDAGTags operation middleware
func (siw *ServerInterfaceWrapper) GetAllDAGTags(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllDAGTagsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllDAGTags(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteDAG operation middleware
func (siw *ServerInterfaceWrapper) DeleteDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDAG(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGDetails(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RenameDAG operation middleware
func (siw *ServerInterfaceWrapper) RenameDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params RenameDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RenameDAG(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RetryDAGRun operation middleware
func (siw *ServerInterfaceWrapper) RetryDAGRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params RetryDAGRunParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetryDAGRun(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGRunHistory operation middleware
func (siw *ServerInterfaceWrapper) GetDAGRunHistory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGRunHistoryParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGRunHistory(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGRunDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGRunDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	// ------------- Path parameter "requestId" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithOptions("simple", "requestId", chi.URLParam(r, "requestId"), &requestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGRunDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGRunDetails(w, r, fileName, requestId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGSpec operation middleware
func (siw *ServerInterfaceWrapper) GetDAGSpec(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGSpecParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGSpec(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDAGSpec operation middleware
func (siw *ServerInterfaceWrapper) UpdateDAGSpec(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateDAGSpecParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDAGSpec(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ExecuteDAG operation middleware
func (siw *ServerInterfaceWrapper) ExecuteDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ExecuteDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExecuteDAG(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// TerminateDAGRun operation middleware
func (siw *ServerInterfaceWrapper) TerminateDAGRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params TerminateDAGRunParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TerminateDAGRun(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDAGSuspensionState operation middleware
func (siw *ServerInterfaceWrapper) UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateDAGSuspensionStateParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDAGSuspensionState(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealthStatus operation middleware
func (siw *ServerInterfaceWrapper) GetHealthStatus(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealthStatus(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunDetails operation middleware
func (siw *ServerInterfaceWrapper) GetRunDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagName" -------------
	var dagName DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "dagName", chi.URLParam(r, "dagName"), &dagName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagName", Err: err})
		return
	}

	// ------------- Path parameter "requestId" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithOptions("simple", "requestId", chi.URLParam(r, "requestId"), &requestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRunDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunDetails(w, r, dagName, requestId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunLog operation middleware
func (siw *ServerInterfaceWrapper) GetRunLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagName" -------------
	var dagName DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "dagName", chi.URLParam(r, "dagName"), &dagName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagName", Err: err})
		return
	}

	// ------------- Path parameter "requestId" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithOptions("simple", "requestId", chi.URLParam(r, "requestId"), &requestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRunLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", r.URL.Query(), &params.Tail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tail", Err: err})
		return
	}

	// ------------- Optional query parameter "head" -------------

	err = runtime.BindQueryParameter("form", true, false, "head", r.URL.Query(), &params.Head)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "head", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunLog(w, r, dagName, requestId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRunStepLog operation middleware
func (siw *ServerInterfaceWrapper) GetRunStepLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagName" -------------
	var dagName DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "dagName", chi.URLParam(r, "dagName"), &dagName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagName", Err: err})
		return
	}

	// ------------- Path parameter "requestId" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithOptions("simple", "requestId", chi.URLParam(r, "requestId"), &requestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRunStepLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", r.URL.Query(), &params.Tail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tail", Err: err})
		return
	}

	// ------------- Optional query parameter "head" -------------

	err = runtime.BindQueryParameter("form", true, false, "head", r.URL.Query(), &params.Head)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "head", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRunStepLog(w, r, dagName, requestId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateRunStepStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateRunStepStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagName" -------------
	var dagName DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "dagName", chi.URLParam(r, "dagName"), &dagName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagName", Err: err})
		return
	}

	// ------------- Path parameter "requestId" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithOptions("simple", "requestId", chi.URLParam(r, "requestId"), &requestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateRunStepStatusParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateRunStepStatus(w, r, dagName, requestId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubRunDetails operation middleware
func (siw *ServerInterfaceWrapper) GetSubRunDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagName" -------------
	var dagName DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "dagName", chi.URLParam(r, "dagName"), &dagName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagName", Err: err})
		return
	}

	// ------------- Path parameter "requestId" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithOptions("simple", "requestId", chi.URLParam(r, "requestId"), &requestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	// ------------- Path parameter "subRunRequestId" -------------
	var subRunRequestId string

	err = runtime.BindStyledParameterWithOptions("simple", "subRunRequestId", chi.URLParam(r, "subRunRequestId"), &subRunRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subRunRequestId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubRunDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubRunDetails(w, r, dagName, requestId, subRunRequestId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubRunLog operation middleware
func (siw *ServerInterfaceWrapper) GetSubRunLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagName" -------------
	var dagName DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "dagName", chi.URLParam(r, "dagName"), &dagName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagName", Err: err})
		return
	}

	// ------------- Path parameter "requestId" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithOptions("simple", "requestId", chi.URLParam(r, "requestId"), &requestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	// ------------- Path parameter "subRunRequestId" -------------
	var subRunRequestId string

	err = runtime.BindStyledParameterWithOptions("simple", "subRunRequestId", chi.URLParam(r, "subRunRequestId"), &subRunRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subRunRequestId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubRunLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", r.URL.Query(), &params.Tail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tail", Err: err})
		return
	}

	// ------------- Optional query parameter "head" -------------

	err = runtime.BindQueryParameter("form", true, false, "head", r.URL.Query(), &params.Head)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "head", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubRunLog(w, r, dagName, requestId, subRunRequestId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubRunStepLog operation middleware
func (siw *ServerInterfaceWrapper) GetSubRunStepLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagName" -------------
	var dagName DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "dagName", chi.URLParam(r, "dagName"), &dagName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagName", Err: err})
		return
	}

	// ------------- Path parameter "requestId" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithOptions("simple", "requestId", chi.URLParam(r, "requestId"), &requestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	// ------------- Path parameter "subRunRequestId" -------------
	var subRunRequestId string

	err = runtime.BindStyledParameterWithOptions("simple", "subRunRequestId", chi.URLParam(r, "subRunRequestId"), &subRunRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subRunRequestId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubRunStepLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", r.URL.Query(), &params.Tail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tail", Err: err})
		return
	}

	// ------------- Optional query parameter "head" -------------

	err = runtime.BindQueryParameter("form", true, false, "head", r.URL.Query(), &params.Head)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "head", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubRunStepLog(w, r, dagName, requestId, subRunRequestId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateSubRunStepStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateSubRunStepStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagName" -------------
	var dagName DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "dagName", chi.URLParam(r, "dagName"), &dagName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagName", Err: err})
		return
	}

	// ------------- Path parameter "requestId" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithOptions("simple", "requestId", chi.URLParam(r, "requestId"), &requestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	// ------------- Path parameter "subRunRequestId" -------------
	var subRunRequestId string

	err = runtime.BindStyledParameterWithOptions("simple", "subRunRequestId", chi.URLParam(r, "subRunRequestId"), &subRunRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subRunRequestId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateSubRunStepStatusParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateSubRunStepStatus(w, r, dagName, requestId, subRunRequestId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags", wrapper.ListDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags", wrapper.CreateNewDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/search", wrapper.SearchDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/tags", wrapper.GetAllDAGTags)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/dags/{fileName}", wrapper.DeleteDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileName}", wrapper.GetDAGDetails)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/rename", wrapper.RenameDAG)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/retry", wrapper.RetryDAGRun)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileName}/runs", wrapper.GetDAGRunHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileName}/runs/{requestId}", wrapper.GetDAGRunDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileName}/spec", wrapper.GetDAGSpec)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/dags/{fileName}/spec", wrapper.UpdateDAGSpec)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/start", wrapper.ExecuteDAG)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/stop", wrapper.TerminateDAGRun)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/suspend", wrapper.UpdateDAGSuspensionState)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealthStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/runs/{dagName}/{requestId}", wrapper.GetRunDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/runs/{dagName}/{requestId}/log", wrapper.GetRunLog)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/runs/{dagName}/{requestId}/steps/{stepName}/log", wrapper.GetRunStepLog)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/runs/{dagName}/{requestId}/steps/{stepName}/status", wrapper.UpdateRunStepStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/runs/{dagName}/{requestId}/subs/{subRunRequestId}", wrapper.GetSubRunDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/runs/{dagName}/{requestId}/subs/{subRunRequestId}/log", wrapper.GetSubRunLog)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/runs/{dagName}/{requestId}/subs/{subRunRequestId}/steps/{stepName}/log", wrapper.GetSubRunStepLog)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/runs/{dagName}/{requestId}/subs/{subRunRequestId}/steps/{stepName}/status", wrapper.UpdateSubRunStepStatus)
	})

	return r
}

type ListDAGsRequestObject struct {
	Params ListDAGsParams
}

type ListDAGsResponseObject interface {
	VisitListDAGsResponse(w http.ResponseWriter) error
}

type ListDAGs200JSONResponse struct {
	// Dags List of DAGs with their status and metadata
	Dags []DAGFile `json:"dags"`

	// Errors List of errors encountered during the request
	Errors     []string   `json:"errors"`
	Pagination Pagination `json:"pagination"`
}

func (response ListDAGs200JSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListDAGsdefaultJSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateNewDAGRequestObject struct {
	Params CreateNewDAGParams
	Body   *CreateNewDAGJSONRequestBody
}

type CreateNewDAGResponseObject interface {
	VisitCreateNewDAGResponse(w http.ResponseWriter) error
}

type CreateNewDAG201JSONResponse struct {
	// Name Name of the newly created DAG
	Name string `json:"name"`
}

func (response CreateNewDAG201JSONResponse) VisitCreateNewDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateNewDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateNewDAGdefaultJSONResponse) VisitCreateNewDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SearchDAGsRequestObject struct {
	Params SearchDAGsParams
}

type SearchDAGsResponseObject interface {
	VisitSearchDAGsResponse(w http.ResponseWriter) error
}

type SearchDAGs200JSONResponse struct {
	// Errors Errors encountered during the search
	Errors []string `json:"errors"`

	// Results Search results matching the query
	Results []SearchResultItem `json:"results"`
}

func (response SearchDAGs200JSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SearchDAGsdefaultJSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAllDAGTagsRequestObject struct {
	Params GetAllDAGTagsParams
}

type GetAllDAGTagsResponseObject interface {
	VisitGetAllDAGTagsResponse(w http.ResponseWriter) error
}

type GetAllDAGTags200JSONResponse ListTagResponse

func (response GetAllDAGTags200JSONResponse) VisitGetAllDAGTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllDAGTagsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetAllDAGTagsdefaultJSONResponse) VisitGetAllDAGTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteDAGRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   DeleteDAGParams
}

type DeleteDAGResponseObject interface {
	VisitDeleteDAGResponse(w http.ResponseWriter) error
}

type DeleteDAG204Response struct {
}

func (response DeleteDAG204Response) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteDAG404JSONResponse Error

func (response DeleteDAG404JSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteDAGdefaultJSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGDetailsRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   GetDAGDetailsParams
}

type GetDAGDetailsResponseObject interface {
	VisitGetDAGDetailsResponse(w http.ResponseWriter) error
}

type GetDAGDetails200JSONResponse struct {
	// Dag Detailed DAG configuration information
	Dag *DAGDetails `json:"dag,omitempty"`

	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// LatestRun Detailed status of a DAG run including sub-run nodes
	LatestRun RunDetails `json:"latestRun"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"suspended"`
}

func (response GetDAGDetails200JSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGDetailsdefaultJSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RenameDAGRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   RenameDAGParams
	Body     *RenameDAGJSONRequestBody
}

type RenameDAGResponseObject interface {
	VisitRenameDAGResponse(w http.ResponseWriter) error
}

type RenameDAG200Response struct {
}

func (response RenameDAG200Response) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RenameDAG400JSONResponse Error

func (response RenameDAG400JSONResponse) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RenameDAG404JSONResponse Error

func (response RenameDAG404JSONResponse) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RenameDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RenameDAGdefaultJSONResponse) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetryDAGRunRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   RetryDAGRunParams
	Body     *RetryDAGRunJSONRequestBody
}

type RetryDAGRunResponseObject interface {
	VisitRetryDAGRunResponse(w http.ResponseWriter) error
}

type RetryDAGRun200Response struct {
}

func (response RetryDAGRun200Response) VisitRetryDAGRunResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RetryDAGRundefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RetryDAGRundefaultJSONResponse) VisitRetryDAGRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGRunHistoryRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   GetDAGRunHistoryParams
}

type GetDAGRunHistoryResponseObject interface {
	VisitGetDAGRunHistoryResponse(w http.ResponseWriter) error
}

type GetDAGRunHistory200JSONResponse struct {
	// GridData Grid data for visualization
	GridData []DAGGridItem `json:"gridData"`

	// Runs List of historical runs for the DAG
	Runs []RunDetails `json:"runs"`
}

func (response GetDAGRunHistory200JSONResponse) VisitGetDAGRunHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunHistorydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGRunHistorydefaultJSONResponse) VisitGetDAGRunHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGRunDetailsRequestObject struct {
	FileName  DAGFileName `json:"fileName"`
	RequestId RequestId   `json:"requestId"`
	Params    GetDAGRunDetailsParams
}

type GetDAGRunDetailsResponseObject interface {
	VisitGetDAGRunDetailsResponse(w http.ResponseWriter) error
}

type GetDAGRunDetails200JSONResponse struct {
	// Run Detailed status of a DAG run including sub-run nodes
	Run RunDetails `json:"run"`
}

func (response GetDAGRunDetails200JSONResponse) VisitGetDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGRunDetailsdefaultJSONResponse) VisitGetDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGSpecRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   GetDAGSpecParams
}

type GetDAGSpecResponseObject interface {
	VisitGetDAGSpecResponse(w http.ResponseWriter) error
}

type GetDAGSpec200JSONResponse struct {
	// Dag Detailed DAG configuration information
	Dag *DAGDetails `json:"dag,omitempty"`

	// Errors List of errors in the spec
	Errors []string `json:"errors"`

	// Spec The DAG spec
	Spec string `json:"spec"`
}

func (response GetDAGSpec200JSONResponse) VisitGetDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGSpecdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGSpecdefaultJSONResponse) VisitGetDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateDAGSpecRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   UpdateDAGSpecParams
	Body     *UpdateDAGSpecJSONRequestBody
}

type UpdateDAGSpecResponseObject interface {
	VisitUpdateDAGSpecResponse(w http.ResponseWriter) error
}

type UpdateDAGSpec200JSONResponse struct {
	// Errors List of errors in the spec
	Errors []string `json:"errors"`
}

func (response UpdateDAGSpec200JSONResponse) VisitUpdateDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGSpecdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateDAGSpecdefaultJSONResponse) VisitUpdateDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExecuteDAGRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   ExecuteDAGParams
	Body     *ExecuteDAGJSONRequestBody
}

type ExecuteDAGResponseObject interface {
	VisitExecuteDAGResponse(w http.ResponseWriter) error
}

type ExecuteDAG200JSONResponse struct {
	// RequestId Request ID of the initiated DAG run
	RequestId string `json:"requestId"`
}

func (response ExecuteDAG200JSONResponse) VisitExecuteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ExecuteDAGdefaultJSONResponse) VisitExecuteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TerminateDAGRunRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   TerminateDAGRunParams
}

type TerminateDAGRunResponseObject interface {
	VisitTerminateDAGRunResponse(w http.ResponseWriter) error
}

type TerminateDAGRun200Response struct {
}

func (response TerminateDAGRun200Response) VisitTerminateDAGRunResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type TerminateDAGRundefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response TerminateDAGRundefaultJSONResponse) VisitTerminateDAGRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateDAGSuspensionStateRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   UpdateDAGSuspensionStateParams
	Body     *UpdateDAGSuspensionStateJSONRequestBody
}

type UpdateDAGSuspensionStateResponseObject interface {
	VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error
}

type UpdateDAGSuspensionState200Response struct {
}

func (response UpdateDAGSuspensionState200Response) VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateDAGSuspensionState404JSONResponse Error

func (response UpdateDAGSuspensionState404JSONResponse) VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGSuspensionStatedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateDAGSuspensionStatedefaultJSONResponse) VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealthStatusRequestObject struct {
}

type GetHealthStatusResponseObject interface {
	VisitGetHealthStatusResponse(w http.ResponseWriter) error
}

type GetHealthStatus200JSONResponse HealthResponse

func (response GetHealthStatus200JSONResponse) VisitGetHealthStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthStatusdefaultResponse struct {
	StatusCode int
}

func (response GetHealthStatusdefaultResponse) VisitGetHealthStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetRunDetailsRequestObject struct {
	DagName   DAGName   `json:"dagName"`
	RequestId RequestId `json:"requestId"`
	Params    GetRunDetailsParams
}

type GetRunDetailsResponseObject interface {
	VisitGetRunDetailsResponse(w http.ResponseWriter) error
}

type GetRunDetails200JSONResponse struct {
	// RunDetails Detailed status of a DAG run including sub-run nodes
	RunDetails RunDetails `json:"runDetails"`
}

func (response GetRunDetails200JSONResponse) VisitGetRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRunDetails404JSONResponse Error

func (response GetRunDetails404JSONResponse) VisitGetRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRunDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetRunDetailsdefaultJSONResponse) VisitGetRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRunLogRequestObject struct {
	DagName   DAGName   `json:"dagName"`
	RequestId RequestId `json:"requestId"`
	Params    GetRunLogParams
}

type GetRunLogResponseObject interface {
	VisitGetRunLogResponse(w http.ResponseWriter) error
}

type GetRunLog200JSONResponse Log

func (response GetRunLog200JSONResponse) VisitGetRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRunLog404JSONResponse Error

func (response GetRunLog404JSONResponse) VisitGetRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRunLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetRunLogdefaultJSONResponse) VisitGetRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRunStepLogRequestObject struct {
	DagName   DAGName   `json:"dagName"`
	RequestId RequestId `json:"requestId"`
	StepName  StepName  `json:"stepName"`
	Params    GetRunStepLogParams
}

type GetRunStepLogResponseObject interface {
	VisitGetRunStepLogResponse(w http.ResponseWriter) error
}

type GetRunStepLog200JSONResponse Log

func (response GetRunStepLog200JSONResponse) VisitGetRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRunStepLog404JSONResponse Error

func (response GetRunStepLog404JSONResponse) VisitGetRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRunStepLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetRunStepLogdefaultJSONResponse) VisitGetRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateRunStepStatusRequestObject struct {
	DagName   DAGName   `json:"dagName"`
	RequestId RequestId `json:"requestId"`
	StepName  StepName  `json:"stepName"`
	Params    UpdateRunStepStatusParams
	Body      *UpdateRunStepStatusJSONRequestBody
}

type UpdateRunStepStatusResponseObject interface {
	VisitUpdateRunStepStatusResponse(w http.ResponseWriter) error
}

type UpdateRunStepStatus200Response struct {
}

func (response UpdateRunStepStatus200Response) VisitUpdateRunStepStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateRunStepStatus400JSONResponse Error

func (response UpdateRunStepStatus400JSONResponse) VisitUpdateRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRunStepStatus404JSONResponse Error

func (response UpdateRunStepStatus404JSONResponse) VisitUpdateRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRunStepStatusdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateRunStepStatusdefaultJSONResponse) VisitUpdateRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSubRunDetailsRequestObject struct {
	DagName         DAGName   `json:"dagName"`
	RequestId       RequestId `json:"requestId"`
	SubRunRequestId string    `json:"subRunRequestId"`
	Params          GetSubRunDetailsParams
}

type GetSubRunDetailsResponseObject interface {
	VisitGetSubRunDetailsResponse(w http.ResponseWriter) error
}

type GetSubRunDetails200JSONResponse struct {
	// RunDetails Detailed status of a DAG run including sub-run nodes
	RunDetails RunDetails `json:"runDetails"`
}

func (response GetSubRunDetails200JSONResponse) VisitGetSubRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubRunDetails404JSONResponse Error

func (response GetSubRunDetails404JSONResponse) VisitGetSubRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSubRunDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSubRunDetailsdefaultJSONResponse) VisitGetSubRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSubRunLogRequestObject struct {
	DagName         DAGName   `json:"dagName"`
	RequestId       RequestId `json:"requestId"`
	SubRunRequestId string    `json:"subRunRequestId"`
	Params          GetSubRunLogParams
}

type GetSubRunLogResponseObject interface {
	VisitGetSubRunLogResponse(w http.ResponseWriter) error
}

type GetSubRunLog200JSONResponse Log

func (response GetSubRunLog200JSONResponse) VisitGetSubRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubRunLog404JSONResponse Error

func (response GetSubRunLog404JSONResponse) VisitGetSubRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSubRunLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSubRunLogdefaultJSONResponse) VisitGetSubRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSubRunStepLogRequestObject struct {
	DagName         DAGName   `json:"dagName"`
	RequestId       RequestId `json:"requestId"`
	SubRunRequestId string    `json:"subRunRequestId"`
	StepName        StepName  `json:"stepName"`
	Params          GetSubRunStepLogParams
}

type GetSubRunStepLogResponseObject interface {
	VisitGetSubRunStepLogResponse(w http.ResponseWriter) error
}

type GetSubRunStepLog200JSONResponse Log

func (response GetSubRunStepLog200JSONResponse) VisitGetSubRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubRunStepLog404JSONResponse Error

func (response GetSubRunStepLog404JSONResponse) VisitGetSubRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSubRunStepLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSubRunStepLogdefaultJSONResponse) VisitGetSubRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateSubRunStepStatusRequestObject struct {
	DagName         DAGName   `json:"dagName"`
	RequestId       RequestId `json:"requestId"`
	SubRunRequestId string    `json:"subRunRequestId"`
	StepName        StepName  `json:"stepName"`
	Params          UpdateSubRunStepStatusParams
	Body            *UpdateSubRunStepStatusJSONRequestBody
}

type UpdateSubRunStepStatusResponseObject interface {
	VisitUpdateSubRunStepStatusResponse(w http.ResponseWriter) error
}

type UpdateSubRunStepStatus200Response struct {
}

func (response UpdateSubRunStepStatus200Response) VisitUpdateSubRunStepStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateSubRunStepStatus400JSONResponse Error

func (response UpdateSubRunStepStatus400JSONResponse) VisitUpdateSubRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSubRunStepStatus404JSONResponse Error

func (response UpdateSubRunStepStatus404JSONResponse) VisitUpdateSubRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSubRunStepStatusdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateSubRunStepStatusdefaultJSONResponse) VisitUpdateSubRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all available DAGs
	// (GET /dags)
	ListDAGs(ctx context.Context, request ListDAGsRequestObject) (ListDAGsResponseObject, error)
	// Create a new DAG definition
	// (POST /dags)
	CreateNewDAG(ctx context.Context, request CreateNewDAGRequestObject) (CreateNewDAGResponseObject, error)
	// Search DAGs
	// (GET /dags/search)
	SearchDAGs(ctx context.Context, request SearchDAGsRequestObject) (SearchDAGsResponseObject, error)
	// List all available DAG tags
	// (GET /dags/tags)
	GetAllDAGTags(ctx context.Context, request GetAllDAGTagsRequestObject) (GetAllDAGTagsResponseObject, error)
	// Delete an existing DAG
	// (DELETE /dags/{fileName})
	DeleteDAG(ctx context.Context, request DeleteDAGRequestObject) (DeleteDAGResponseObject, error)
	// Retrieve comprehensive DAG information
	// (GET /dags/{fileName})
	GetDAGDetails(ctx context.Context, request GetDAGDetailsRequestObject) (GetDAGDetailsResponseObject, error)
	// Change DAG file ID
	// (POST /dags/{fileName}/rename)
	RenameDAG(ctx context.Context, request RenameDAGRequestObject) (RenameDAGResponseObject, error)
	// Retry DAG execution
	// (POST /dags/{fileName}/retry)
	RetryDAGRun(ctx context.Context, request RetryDAGRunRequestObject) (RetryDAGRunResponseObject, error)
	// Retrieve execution history of a DAG
	// (GET /dags/{fileName}/runs)
	GetDAGRunHistory(ctx context.Context, request GetDAGRunHistoryRequestObject) (GetDAGRunHistoryResponseObject, error)
	// Get detailed status of a specific DAG run
	// (GET /dags/{fileName}/runs/{requestId})
	GetDAGRunDetails(ctx context.Context, request GetDAGRunDetailsRequestObject) (GetDAGRunDetailsResponseObject, error)
	// Retrieve DAG specification
	// (GET /dags/{fileName}/spec)
	GetDAGSpec(ctx context.Context, request GetDAGSpecRequestObject) (GetDAGSpecResponseObject, error)
	// Update DAG spec
	// (PUT /dags/{fileName}/spec)
	UpdateDAGSpec(ctx context.Context, request UpdateDAGSpecRequestObject) (UpdateDAGSpecResponseObject, error)
	// Initiate DAG execution
	// (POST /dags/{fileName}/start)
	ExecuteDAG(ctx context.Context, request ExecuteDAGRequestObject) (ExecuteDAGResponseObject, error)
	// Terminate running DAG execution
	// (POST /dags/{fileName}/stop)
	TerminateDAGRun(ctx context.Context, request TerminateDAGRunRequestObject) (TerminateDAGRunResponseObject, error)
	// Toggle DAG suspension state
	// (POST /dags/{fileName}/suspend)
	UpdateDAGSuspensionState(ctx context.Context, request UpdateDAGSuspensionStateRequestObject) (UpdateDAGSuspensionStateResponseObject, error)
	// Check server health status
	// (GET /health)
	GetHealthStatus(ctx context.Context, request GetHealthStatusRequestObject) (GetHealthStatusResponseObject, error)
	// Retrieve detailed status of a DAG run
	// (GET /runs/{dagName}/{requestId})
	GetRunDetails(ctx context.Context, request GetRunDetailsRequestObject) (GetRunDetailsResponseObject, error)
	// Retrieve full execution log of a DAG run
	// (GET /runs/{dagName}/{requestId}/log)
	GetRunLog(ctx context.Context, request GetRunLogRequestObject) (GetRunLogResponseObject, error)
	// Retrieve log for a specific step in a DAG run
	// (GET /runs/{dagName}/{requestId}/steps/{stepName}/log)
	GetRunStepLog(ctx context.Context, request GetRunStepLogRequestObject) (GetRunStepLogResponseObject, error)
	// Manually update a step's execution status
	// (PATCH /runs/{dagName}/{requestId}/steps/{stepName}/status)
	UpdateRunStepStatus(ctx context.Context, request UpdateRunStepStatusRequestObject) (UpdateRunStepStatusResponseObject, error)
	// Retrieve detailed status of a sub run
	// (GET /runs/{dagName}/{requestId}/subs/{subRunRequestId})
	GetSubRunDetails(ctx context.Context, request GetSubRunDetailsRequestObject) (GetSubRunDetailsResponseObject, error)
	// Retrieve log for a specific sub run
	// (GET /runs/{dagName}/{requestId}/subs/{subRunRequestId}/log)
	GetSubRunLog(ctx context.Context, request GetSubRunLogRequestObject) (GetSubRunLogResponseObject, error)
	// Retrieve log for a specific step in a sub run
	// (GET /runs/{dagName}/{requestId}/subs/{subRunRequestId}/steps/{stepName}/log)
	GetSubRunStepLog(ctx context.Context, request GetSubRunStepLogRequestObject) (GetSubRunStepLogResponseObject, error)
	// Manually update a step's execution status in a sub run
	// (PATCH /runs/{dagName}/{requestId}/subs/{subRunRequestId}/steps/{stepName}/status)
	UpdateSubRunStepStatus(ctx context.Context, request UpdateSubRunStepStatusRequestObject) (UpdateSubRunStepStatusResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListDAGs operation middleware
func (sh *strictHandler) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	var request ListDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListDAGs(ctx, request.(ListDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListDAGsResponseObject); ok {
		if err := validResponse.VisitListDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateNewDAG operation middleware
func (sh *strictHandler) CreateNewDAG(w http.ResponseWriter, r *http.Request, params CreateNewDAGParams) {
	var request CreateNewDAGRequestObject

	request.Params = params

	var body CreateNewDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateNewDAG(ctx, request.(CreateNewDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateNewDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateNewDAGResponseObject); ok {
		if err := validResponse.VisitCreateNewDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchDAGs operation middleware
func (sh *strictHandler) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	var request SearchDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchDAGs(ctx, request.(SearchDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchDAGsResponseObject); ok {
		if err := validResponse.VisitSearchDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllDAGTags operation middleware
func (sh *strictHandler) GetAllDAGTags(w http.ResponseWriter, r *http.Request, params GetAllDAGTagsParams) {
	var request GetAllDAGTagsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllDAGTags(ctx, request.(GetAllDAGTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllDAGTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllDAGTagsResponseObject); ok {
		if err := validResponse.VisitGetAllDAGTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDAG operation middleware
func (sh *strictHandler) DeleteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params DeleteDAGParams) {
	var request DeleteDAGRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDAG(ctx, request.(DeleteDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDAGResponseObject); ok {
		if err := validResponse.VisitDeleteDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGDetails operation middleware
func (sh *strictHandler) GetDAGDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDetailsParams) {
	var request GetDAGDetailsRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGDetails(ctx, request.(GetDAGDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RenameDAG operation middleware
func (sh *strictHandler) RenameDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RenameDAGParams) {
	var request RenameDAGRequestObject

	request.FileName = fileName
	request.Params = params

	var body RenameDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RenameDAG(ctx, request.(RenameDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RenameDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RenameDAGResponseObject); ok {
		if err := validResponse.VisitRenameDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RetryDAGRun operation middleware
func (sh *strictHandler) RetryDAGRun(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RetryDAGRunParams) {
	var request RetryDAGRunRequestObject

	request.FileName = fileName
	request.Params = params

	var body RetryDAGRunJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RetryDAGRun(ctx, request.(RetryDAGRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RetryDAGRun")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RetryDAGRunResponseObject); ok {
		if err := validResponse.VisitRetryDAGRunResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGRunHistory operation middleware
func (sh *strictHandler) GetDAGRunHistory(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGRunHistoryParams) {
	var request GetDAGRunHistoryRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGRunHistory(ctx, request.(GetDAGRunHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGRunHistory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGRunHistoryResponseObject); ok {
		if err := validResponse.VisitGetDAGRunHistoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGRunDetails operation middleware
func (sh *strictHandler) GetDAGRunDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, requestId RequestId, params GetDAGRunDetailsParams) {
	var request GetDAGRunDetailsRequestObject

	request.FileName = fileName
	request.RequestId = requestId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGRunDetails(ctx, request.(GetDAGRunDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGRunDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGRunDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGRunDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGSpec operation middleware
func (sh *strictHandler) GetDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGSpecParams) {
	var request GetDAGSpecRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGSpec(ctx, request.(GetDAGSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGSpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGSpecResponseObject); ok {
		if err := validResponse.VisitGetDAGSpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDAGSpec operation middleware
func (sh *strictHandler) UpdateDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSpecParams) {
	var request UpdateDAGSpecRequestObject

	request.FileName = fileName
	request.Params = params

	var body UpdateDAGSpecJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDAGSpec(ctx, request.(UpdateDAGSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDAGSpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDAGSpecResponseObject); ok {
		if err := validResponse.VisitUpdateDAGSpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExecuteDAG operation middleware
func (sh *strictHandler) ExecuteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params ExecuteDAGParams) {
	var request ExecuteDAGRequestObject

	request.FileName = fileName
	request.Params = params

	var body ExecuteDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExecuteDAG(ctx, request.(ExecuteDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExecuteDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExecuteDAGResponseObject); ok {
		if err := validResponse.VisitExecuteDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TerminateDAGRun operation middleware
func (sh *strictHandler) TerminateDAGRun(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params TerminateDAGRunParams) {
	var request TerminateDAGRunRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TerminateDAGRun(ctx, request.(TerminateDAGRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TerminateDAGRun")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TerminateDAGRunResponseObject); ok {
		if err := validResponse.VisitTerminateDAGRunResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDAGSuspensionState operation middleware
func (sh *strictHandler) UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSuspensionStateParams) {
	var request UpdateDAGSuspensionStateRequestObject

	request.FileName = fileName
	request.Params = params

	var body UpdateDAGSuspensionStateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDAGSuspensionState(ctx, request.(UpdateDAGSuspensionStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDAGSuspensionState")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDAGSuspensionStateResponseObject); ok {
		if err := validResponse.VisitUpdateDAGSuspensionStateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealthStatus operation middleware
func (sh *strictHandler) GetHealthStatus(w http.ResponseWriter, r *http.Request) {
	var request GetHealthStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealthStatus(ctx, request.(GetHealthStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealthStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthStatusResponseObject); ok {
		if err := validResponse.VisitGetHealthStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRunDetails operation middleware
func (sh *strictHandler) GetRunDetails(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, params GetRunDetailsParams) {
	var request GetRunDetailsRequestObject

	request.DagName = dagName
	request.RequestId = requestId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRunDetails(ctx, request.(GetRunDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRunDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRunDetailsResponseObject); ok {
		if err := validResponse.VisitGetRunDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRunLog operation middleware
func (sh *strictHandler) GetRunLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, params GetRunLogParams) {
	var request GetRunLogRequestObject

	request.DagName = dagName
	request.RequestId = requestId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRunLog(ctx, request.(GetRunLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRunLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRunLogResponseObject); ok {
		if err := validResponse.VisitGetRunLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRunStepLog operation middleware
func (sh *strictHandler) GetRunStepLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, stepName StepName, params GetRunStepLogParams) {
	var request GetRunStepLogRequestObject

	request.DagName = dagName
	request.RequestId = requestId
	request.StepName = stepName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRunStepLog(ctx, request.(GetRunStepLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRunStepLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRunStepLogResponseObject); ok {
		if err := validResponse.VisitGetRunStepLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateRunStepStatus operation middleware
func (sh *strictHandler) UpdateRunStepStatus(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, stepName StepName, params UpdateRunStepStatusParams) {
	var request UpdateRunStepStatusRequestObject

	request.DagName = dagName
	request.RequestId = requestId
	request.StepName = stepName
	request.Params = params

	var body UpdateRunStepStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRunStepStatus(ctx, request.(UpdateRunStepStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRunStepStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateRunStepStatusResponseObject); ok {
		if err := validResponse.VisitUpdateRunStepStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubRunDetails operation middleware
func (sh *strictHandler) GetSubRunDetails(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, subRunRequestId string, params GetSubRunDetailsParams) {
	var request GetSubRunDetailsRequestObject

	request.DagName = dagName
	request.RequestId = requestId
	request.SubRunRequestId = subRunRequestId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubRunDetails(ctx, request.(GetSubRunDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubRunDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubRunDetailsResponseObject); ok {
		if err := validResponse.VisitGetSubRunDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubRunLog operation middleware
func (sh *strictHandler) GetSubRunLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, subRunRequestId string, params GetSubRunLogParams) {
	var request GetSubRunLogRequestObject

	request.DagName = dagName
	request.RequestId = requestId
	request.SubRunRequestId = subRunRequestId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubRunLog(ctx, request.(GetSubRunLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubRunLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubRunLogResponseObject); ok {
		if err := validResponse.VisitGetSubRunLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubRunStepLog operation middleware
func (sh *strictHandler) GetSubRunStepLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, subRunRequestId string, stepName StepName, params GetSubRunStepLogParams) {
	var request GetSubRunStepLogRequestObject

	request.DagName = dagName
	request.RequestId = requestId
	request.SubRunRequestId = subRunRequestId
	request.StepName = stepName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubRunStepLog(ctx, request.(GetSubRunStepLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubRunStepLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubRunStepLogResponseObject); ok {
		if err := validResponse.VisitGetSubRunStepLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateSubRunStepStatus operation middleware
func (sh *strictHandler) UpdateSubRunStepStatus(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, subRunRequestId string, stepName StepName, params UpdateSubRunStepStatusParams) {
	var request UpdateSubRunStepStatusRequestObject

	request.DagName = dagName
	request.RequestId = requestId
	request.SubRunRequestId = subRunRequestId
	request.StepName = stepName
	request.Params = params

	var body UpdateSubRunStepStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSubRunStepStatus(ctx, request.(UpdateSubRunStepStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSubRunStepStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateSubRunStepStatusResponseObject); ok {
		if err := validResponse.VisitUpdateSubRunStepStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"qvFa1faS3Fze/G8AAAD//xis969kjQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
