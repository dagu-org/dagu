// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	ApiTokenScopes  = "apiToken.Scopes"
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for DAGAction.
const (
	DAGActionMarkFailed  DAGAction = "mark-failed"
	DAGActionMarkSuccess DAGAction = "mark-success"
	DAGActionRename      DAGAction = "rename"
	DAGActionRetry       DAGAction = "retry"
	DAGActionSave        DAGAction = "save"
	DAGActionStart       DAGAction = "start"
	DAGActionStop        DAGAction = "stop"
	DAGActionSuspend     DAGAction = "suspend"
)

// Defines values for DAGDetailTab.
const (
	DAGDetailTabHistory      DAGDetailTab = "history"
	DAGDetailTabLog          DAGDetailTab = "log"
	DAGDetailTabSchedulerLog DAGDetailTab = "scheduler-log"
	DAGDetailTabSpec         DAGDetailTab = "spec"
	DAGDetailTabStatus       DAGDetailTab = "status"
)

// Defines values for ErrorCode.
const (
	ErrorCodeAlreadyExists   ErrorCode = "already_exists"
	ErrorCodeAlreadyRunning  ErrorCode = "already_running"
	ErrorCodeBadGateway      ErrorCode = "bad_gateway"
	ErrorCodeBadRequest      ErrorCode = "bad_request"
	ErrorCodeInternalError   ErrorCode = "internal_error"
	ErrorCodeNotFound        ErrorCode = "not_found"
	ErrorCodeNotRunning      ErrorCode = "not_running"
	ErrorCodeRemoteNodeError ErrorCode = "remote_node_error"
	ErrorCodeUnauthorized    ErrorCode = "unauthorized"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusHealthy   HealthResponseStatus = "healthy"
	HealthResponseStatusUnhealthy HealthResponseStatus = "unhealthy"
)

// Defines values for NodeStatus.
const (
	NodeStatusN0 NodeStatus = 0
	NodeStatusN1 NodeStatus = 1
	NodeStatusN2 NodeStatus = 2
	NodeStatusN3 NodeStatus = 3
	NodeStatusN4 NodeStatus = 4
	NodeStatusN5 NodeStatus = 5
)

// Defines values for NodeStatusText.
const (
	NodeStatusTextCanceled   NodeStatusText = "canceled"
	NodeStatusTextFailed     NodeStatusText = "failed"
	NodeStatusTextFinished   NodeStatusText = "finished"
	NodeStatusTextNotStarted NodeStatusText = "not started"
	NodeStatusTextRunning    NodeStatusText = "running"
	NodeStatusTextSkipped    NodeStatusText = "skipped"
)

// Defines values for Status.
const (
	StatusN0 Status = 0
	StatusN1 Status = 1
	StatusN2 Status = 2
	StatusN3 Status = 3
	StatusN4 Status = 4
)

// Defines values for StatusText.
const (
	StatusTextCancelled  StatusText = "cancelled"
	StatusTextFailed     StatusText = "failed"
	StatusTextFinished   StatusText = "finished"
	StatusTextNotStarted StatusText = "not started"
	StatusTextRunning    StatusText = "running"
)

// DAG Core DAG configuration containing workflow definition and metadata
type DAG struct {
	// DefaultParams Default parameter values in JSON format if not specified at runtime
	DefaultParams *string `json:"defaultParams,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description *string `json:"description,omitempty"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"group,omitempty"`

	// Name Unique identifier for the DAG within its group
	Name string `json:"name"`

	// Params List of parameter names that can be passed to the DAG at runtime
	Params *[]string `json:"params,omitempty"`

	// Schedule List of scheduling expressions defining when the DAG should run
	Schedule *[]Schedule `json:"schedule,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"tags,omitempty"`
}

// DAGAction Action to be performed on the DAG. Possible values include:
// - start: Start the DAG
// - suspend: Suspend the DAG
// - stop: Stop the DAG
// - retry: Retry the last run
// - mark-success: Mark the last run as successful
// - mark-failed: Mark the last run as failed
// - save: Save the current state of the DAG
// - rename: Rename the DAG
type DAGAction string

// DAGDetailTab Indicates which part of the DAG to retrieve
type DAGDetailTab string

// DAGDetails Detailed DAG configuration information
type DAGDetails struct {
	// DefaultParams Default parameter values in JSON format if not specified at runtime
	DefaultParams *string `json:"defaultParams,omitempty"`

	// Delay Time in seconds to wait before starting the DAG
	Delay *int `json:"delay,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description *string `json:"description,omitempty"`

	// Env List of environment variables to set before executing
	Env *[]string `json:"env,omitempty"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"group,omitempty"`

	// HandlerOn Configuration for event handlers in a DAG
	HandlerOn *HandlerOn `json:"handlerOn,omitempty"`

	// HistRetentionDays Number of days to retain historical logs
	HistRetentionDays *int `json:"histRetentionDays,omitempty"`

	// Location Path to the DAG file
	Location *string `json:"location,omitempty"`

	// LogDir Directory path for storing log files
	LogDir *string `json:"logDir,omitempty"`

	// MaxActiveRuns Maximum number of concurrent steps to run
	MaxActiveRuns *int `json:"maxActiveRuns,omitempty"`

	// Name Unique identifier for the DAG within its group
	Name string `json:"name"`

	// Params List of parameter names that can be passed to the DAG at runtime
	Params *[]string `json:"params,omitempty"`

	// Preconditions Conditions that must be met before the DAG can start
	Preconditions *[]Precondition `json:"preconditions,omitempty"`

	// Schedule List of scheduling expressions defining when the DAG should run
	Schedule *[]Schedule `json:"schedule,omitempty"`

	// Steps List of steps to execute in the DAG
	Steps *[]Step `json:"steps,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"tags,omitempty"`
}

// DAGFile DAG file with its status information
type DAGFile struct {
	// Dag Core DAG configuration containing workflow definition and metadata
	Dag DAG `json:"dag"`

	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// LatestRun Current status of a DAG run
	LatestRun RunSummary `json:"latestRun"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"suspended"`
}

// DAGHistoryData Historical run data for a DAG
type DAGHistoryData struct {
	// GridData Grid data for visualization
	GridData []DAGLogGridItem `json:"gridData"`

	// Runs Detailed status information for each run
	Runs []RunDetails `json:"runs"`
}

// DAGLogGridItem Grid item for log visualization
type DAGLogGridItem struct {
	// History Status of the step ordered by time
	History []NodeStatus `json:"history"`

	// Name Name of the step
	Name string `json:"name"`
}

// DAGName Name of the DAG, must be unique
type DAGName = string

// DAGStatusFileDetails Detailed status information for a DAG instance
type DAGStatusFileDetails struct {
	// Dag Detailed DAG configuration information
	Dag DAGDetails `json:"dag"`

	// Error Error message if the DAG failed to start
	Error *string `json:"error,omitempty"`

	// File Path to the DAG file
	File string `json:"file"`

	// LatestRun Detailed status of a DAG run including child nodes
	LatestRun RunDetails `json:"latestRun"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"suspended"`
}

// Error Generic error response object
type Error struct {
	// Code Error code indicating the type of error
	Code ErrorCode `json:"code"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Short error message
	Message string `json:"message"`
}

// ErrorCode Error code indicating the type of error
type ErrorCode string

// HandlerOn Configuration for event handlers in a DAG
type HandlerOn struct {
	// Cancel Individual task within a DAG that performs a specific operation
	Cancel *Step `json:"cancel,omitempty"`

	// Exit Individual task within a DAG that performs a specific operation
	Exit *Step `json:"exit,omitempty"`

	// Failure Individual task within a DAG that performs a specific operation
	Failure *Step `json:"failure,omitempty"`

	// Success Individual task within a DAG that performs a specific operation
	Success *Step `json:"success,omitempty"`
}

// HealthResponse Response object for the health check endpoint
type HealthResponse struct {
	// Status Overall health status of the server
	Status HealthResponseStatus `json:"status"`

	// Timestamp Current server time
	Timestamp string `json:"timestamp"`

	// Uptime Server uptime in seconds
	Uptime int `json:"uptime"`

	// Version Current version of the server
	Version string `json:"version"`
}

// HealthResponseStatus Overall health status of the server
type HealthResponseStatus string

// ListTagResponse Response object for listing all tags
type ListTagResponse struct {
	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// Tags List of unique tags
	Tags []string `json:"tags"`
}

// Node Status of an individual step within a DAG run
type Node struct {
	// DoneCount Number of successful completions for repeating steps
	DoneCount int `json:"doneCount"`

	// Error Error message if the step failed
	Error *string `json:"error,omitempty"`

	// FinishedAt RFC3339 timestamp when the step finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to step-specific log file
	Log string `json:"log"`

	// RetryCount Number of retry attempts made for this step
	RetryCount int `json:"retryCount"`

	// StartedAt RFC3339 timestamp when the step started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current node state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Skipped"
	Status NodeStatus `json:"status"`

	// StatusText Human-readable status description for the node
	StatusText NodeStatusText `json:"statusText"`

	// Step Individual task within a DAG that performs a specific operation
	Step Step `json:"step"`
}

// NodeStatus Numeric status code indicating current node state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
// 5: "Skipped"
type NodeStatus int

// NodeStatusText Human-readable status description for the node
type NodeStatusText string

// Pagination defines model for Pagination.
type Pagination struct {
	// CurrentPage current page number
	CurrentPage int `json:"currentPage"`

	// NextPage next page number
	NextPage int `json:"nextPage"`

	// PrevPage previous page number
	PrevPage int `json:"prevPage"`

	// TotalPages total number of pages
	TotalPages int `json:"totalPages"`

	// TotalRecords total number of records
	TotalRecords int `json:"totalRecords"`
}

// PostDAGActionResponse Response object for posting an action to a DAG
type PostDAGActionResponse struct {
	// NewName New DAG name, if the action resulted in a new DAG
	NewName *string `json:"NewName,omitempty"`
}

// Precondition Precondition that must be satisfied before running a step or DAG
type Precondition struct {
	// Condition Expression or check to evaluate
	Condition *string `json:"condition,omitempty"`

	// Expected Expected result of the condition evaluation
	Expected *string `json:"expected,omitempty"`
}

// RepeatPolicy Configuration for step retry behavior
type RepeatPolicy struct {
	// Interval Time in seconds to wait between retry attempts
	Interval *int `json:"interval,omitempty"`

	// Repeat Whether the step should be retried on failure
	Repeat *bool `json:"repeat,omitempty"`
}

// RunDetails defines model for RunDetails.
type RunDetails struct {
	// FinishedAt RFC 3339 timestamp when the DAG run finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to the log file
	Log string `json:"log"`

	// Name Name of the DAG being executed
	Name string `json:"name"`

	// Nodes Status of individual steps within the DAG
	Nodes []Node `json:"nodes"`

	// OnCancel Status of an individual step within a DAG run
	OnCancel *Node `json:"onCancel,omitempty"`

	// OnExit Status of an individual step within a DAG run
	OnExit *Node `json:"onExit,omitempty"`

	// OnFailure Status of an individual step within a DAG run
	OnFailure *Node `json:"onFailure,omitempty"`

	// OnSuccess Status of an individual step within a DAG run
	OnSuccess *Node `json:"onSuccess,omitempty"`

	// Params Runtime parameters passed to the DAG in JSON format
	Params *string `json:"params,omitempty"`

	// Pid Process ID of the DAG run
	Pid *int `json:"pid,omitempty"`

	// RequestId Unique identifier for the DAG run request
	RequestId string `json:"requestId"`

	// StartedAt RFC 3339 timestamp when the DAG run started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current run state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	Status Status `json:"status"`

	// StatusText Human-readable status description for the DAG run
	StatusText StatusText `json:"statusText"`
}

// RunSummary Current status of a DAG run
type RunSummary struct {
	// FinishedAt RFC 3339 timestamp when the DAG run finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to the log file
	Log string `json:"log"`

	// Name Name of the DAG being executed
	Name string `json:"name"`

	// Params Runtime parameters passed to the DAG in JSON format
	Params *string `json:"params,omitempty"`

	// Pid Process ID of the DAG run
	Pid *int `json:"pid,omitempty"`

	// RequestId Unique identifier for the DAG run request
	RequestId string `json:"requestId"`

	// StartedAt RFC 3339 timestamp when the DAG run started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current run state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	Status Status `json:"status"`

	// StatusText Human-readable status description for the DAG run
	StatusText StatusText `json:"statusText"`
}

// Schedule Schedule configuration for DAG run
type Schedule struct {
	// Expression Cron expression or schedule pattern
	Expression string `json:"expression"`
}

// SchedulerLog Log information for the scheduler
type SchedulerLog struct {
	// Content Log content
	Content string `json:"content"`

	// LogFile Path to the scheduler log file
	LogFile string `json:"logFile"`
}

// SearchDAGsMatchItem Details of a search match within a DAG
type SearchDAGsMatchItem struct {
	// Line Matching line content
	Line string `json:"line"`

	// LineNumber Line number where match was found
	LineNumber int `json:"lineNumber"`

	// StartLine Start line for context
	StartLine int `json:"startLine"`
}

// SearchDAGsResultItem Individual search result item for a DAG
type SearchDAGsResultItem struct {
	// Dag Core DAG configuration containing workflow definition and metadata
	Dag DAG `json:"dag"`

	// Matches Details of where matches were found
	Matches []SearchDAGsMatchItem `json:"matches"`

	// Name Name of the matching DAG
	Name string `json:"name"`
}

// Status Numeric status code indicating current run state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
type Status int

// StatusText Human-readable status description for the DAG run
type StatusText string

// Step Individual task within a DAG that performs a specific operation
type Step struct {
	// Args List of arguments to pass to the command
	Args *[]string `json:"args,omitempty"`

	// CmdWithArgs Complete command string including arguments to execute
	CmdWithArgs *string `json:"cmdWithArgs,omitempty"`

	// Command Base command to execute without arguments
	Command *string `json:"command,omitempty"`

	// Depends List of step names that must complete before this step can start
	Depends *[]string `json:"depends,omitempty"`

	// Description Human-readable description of what the step does
	Description *string `json:"description,omitempty"`

	// Dir Working directory for executing the step's command
	Dir *string `json:"dir,omitempty"`

	// MailOnError Whether to send email notifications on step failure
	MailOnError *bool `json:"mailOnError,omitempty"`

	// Name Unique identifier for the step within the DAG
	Name string `json:"name"`

	// Output Variable name to store the step's output
	Output *string `json:"output,omitempty"`

	// Params Parameters to pass to the sub DAG in JSON format
	Params *string `json:"params,omitempty"`

	// Preconditions Conditions that must be met before the step can start
	Preconditions *[]Precondition `json:"preconditions,omitempty"`

	// RepeatPolicy Configuration for step retry behavior
	RepeatPolicy *RepeatPolicy `json:"repeatPolicy,omitempty"`

	// Run Sub DAG to run
	Run *string `json:"run,omitempty"`

	// Script Script content if the step executes a script file
	Script *string `json:"script,omitempty"`

	// Stderr File path for capturing standard error
	Stderr *string `json:"stderr,omitempty"`

	// Stdout File path for capturing standard output
	Stdout *string `json:"stdout,omitempty"`
}

// StepLog Log information for a specific step
type StepLog struct {
	// Content Log content
	Content string `json:"content"`

	// LogFile Path to the log file
	LogFile string `json:"logFile"`

	// Step Status of an individual step within a DAG run
	Step Node `json:"step"`
}

// Page defines model for Page.
type Page = int

// PerPage defines model for PerPage.
type PerPage = int

// ListDAGsParams defines parameters for ListDAGs.
type ListDAGsParams struct {
	// Page page number of items to fetch (default is 1)
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage number of items per page (default is 30, max is 100)
	PerPage *PerPage `form:"perPage,omitempty" json:"perPage,omitempty"`

	// Name Filter DAGs by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Tag Filter DAGs by tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`
}

// CreateDAGJSONBody defines parameters for CreateDAG.
type CreateDAGJSONBody struct {
	// Name Name of the DAG, must be unique
	Name DAGName `json:"name"`
}

// SearchDAGsParams defines parameters for SearchDAGs.
type SearchDAGsParams struct {
	// Q A search query string
	Q string `form:"q" json:"q"`
}

// GetDAGDetailsParams defines parameters for GetDAGDetails.
type GetDAGDetailsParams struct {
	// Tab Specific part of the DAG to retrieve
	Tab *DAGDetailTab `form:"tab,omitempty" json:"tab,omitempty"`

	// RequestId Specific file related to the DAG
	RequestId *string `form:"requestId,omitempty" json:"requestId,omitempty"`

	// Step Step name within the DAG
	Step *string `form:"step,omitempty" json:"step,omitempty"`
}

// PostDAGActionJSONBody defines parameters for PostDAGAction.
type PostDAGActionJSONBody struct {
	// Action Action to be performed on the DAG. Possible values include:
	// - start: Start the DAG
	// - suspend: Suspend the DAG
	// - stop: Stop the DAG
	// - retry: Retry the last run
	// - mark-success: Mark the last run as successful
	// - mark-failed: Mark the last run as failed
	// - save: Save the current state of the DAG
	// - rename: Rename the DAG
	Action DAGAction `json:"action"`

	// Params Additional parameters for the action in JSON format
	Params *string `json:"params,omitempty"`

	// RequestId Unique request ID for the action
	RequestId *string `json:"requestId,omitempty"`

	// Step Step name if the action targets a specific step
	Step *string `json:"step,omitempty"`

	// Value Optional extra value for the action
	Value *string `json:"value,omitempty"`
}

// UpdateDAGSpecJSONBody defines parameters for UpdateDAGSpec.
type UpdateDAGSpecJSONBody struct {
	// Spec The new DAG spec
	Spec string `json:"spec"`
}

// CreateDAGJSONRequestBody defines body for CreateDAG for application/json ContentType.
type CreateDAGJSONRequestBody CreateDAGJSONBody

// PostDAGActionJSONRequestBody defines body for PostDAGAction for application/json ContentType.
type PostDAGActionJSONRequestBody PostDAGActionJSONBody

// UpdateDAGSpecJSONRequestBody defines body for UpdateDAGSpec for application/json ContentType.
type UpdateDAGSpecJSONRequestBody UpdateDAGSpecJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List DAGs
	// (GET /dags)
	ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams)
	// Create a new DAG
	// (POST /dags)
	CreateDAG(w http.ResponseWriter, r *http.Request)
	// Search DAGs
	// (GET /dags/search)
	SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams)
	// List all tags
	// (GET /dags/tags)
	ListTags(w http.ResponseWriter, r *http.Request)
	// Delete a DAG
	// (DELETE /dags/{name})
	DeleteDAG(w http.ResponseWriter, r *http.Request, name string)
	// Get DAG details
	// (GET /dags/{name})
	GetDAGDetails(w http.ResponseWriter, r *http.Request, name string, params GetDAGDetailsParams)
	// Perform an action on a DAG
	// (POST /dags/{name})
	PostDAGAction(w http.ResponseWriter, r *http.Request, name string)
	// Get history of DAG runs
	// (GET /dags/{name}/history)
	GetDAGRunHistory(w http.ResponseWriter, r *http.Request, name DAGName)
	// Get DAG Spec
	// (GET /dags/{name}/spec)
	GetDAGSpec(w http.ResponseWriter, r *http.Request, name DAGName)
	// Update DAG Spec
	// (PUT /dags/{name}/spec)
	UpdateDAGSpec(w http.ResponseWriter, r *http.Request, name DAGName)
	// Health check endpoint
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List DAGs
// (GET /dags)
func (_ Unimplemented) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new DAG
// (POST /dags)
func (_ Unimplemented) CreateDAG(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search DAGs
// (GET /dags/search)
func (_ Unimplemented) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all tags
// (GET /dags/tags)
func (_ Unimplemented) ListTags(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a DAG
// (DELETE /dags/{name})
func (_ Unimplemented) DeleteDAG(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get DAG details
// (GET /dags/{name})
func (_ Unimplemented) GetDAGDetails(w http.ResponseWriter, r *http.Request, name string, params GetDAGDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Perform an action on a DAG
// (POST /dags/{name})
func (_ Unimplemented) PostDAGAction(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get history of DAG runs
// (GET /dags/{name}/history)
func (_ Unimplemented) GetDAGRunHistory(w http.ResponseWriter, r *http.Request, name DAGName) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get DAG Spec
// (GET /dags/{name}/spec)
func (_ Unimplemented) GetDAGSpec(w http.ResponseWriter, r *http.Request, name DAGName) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update DAG Spec
// (PUT /dags/{name}/spec)
func (_ Unimplemented) UpdateDAGSpec(w http.ResponseWriter, r *http.Request, name DAGName) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check endpoint
// (GET /health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListDAGs operation middleware
func (siw *ServerInterfaceWrapper) ListDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDAGsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", r.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "perPage", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateDAG operation middleware
func (siw *ServerInterfaceWrapper) CreateDAG(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDAG(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchDAGs operation middleware
func (siw *ServerInterfaceWrapper) SearchDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchDAGsParams

	// ------------- Required query parameter "q" -------------

	if paramValue := r.URL.Query().Get("q"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "q"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTags(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteDAG operation middleware
func (siw *ServerInterfaceWrapper) DeleteDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDAG(w, r, name)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGDetailsParams

	// ------------- Optional query parameter "tab" -------------

	err = runtime.BindQueryParameter("form", true, false, "tab", r.URL.Query(), &params.Tab)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tab", Err: err})
		return
	}

	// ------------- Optional query parameter "requestId" -------------

	err = runtime.BindQueryParameter("form", true, false, "requestId", r.URL.Query(), &params.RequestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	// ------------- Optional query parameter "step" -------------

	err = runtime.BindQueryParameter("form", true, false, "step", r.URL.Query(), &params.Step)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGDetails(w, r, name, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PostDAGAction operation middleware
func (siw *ServerInterfaceWrapper) PostDAGAction(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDAGAction(w, r, name)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGRunHistory operation middleware
func (siw *ServerInterfaceWrapper) GetDAGRunHistory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGRunHistory(w, r, name)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGSpec operation middleware
func (siw *ServerInterfaceWrapper) GetDAGSpec(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGSpec(w, r, name)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDAGSpec operation middleware
func (siw *ServerInterfaceWrapper) UpdateDAGSpec(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDAGSpec(w, r, name)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags", wrapper.ListDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags", wrapper.CreateDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/search", wrapper.SearchDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/tags", wrapper.ListTags)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/dags/{name}", wrapper.DeleteDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{name}", wrapper.GetDAGDetails)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{name}", wrapper.PostDAGAction)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{name}/history", wrapper.GetDAGRunHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{name}/spec", wrapper.GetDAGSpec)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/dags/{name}/spec", wrapper.UpdateDAGSpec)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealth)
	})

	return r
}

type ListDAGsRequestObject struct {
	Params ListDAGsParams
}

type ListDAGsResponseObject interface {
	VisitListDAGsResponse(w http.ResponseWriter) error
}

type ListDAGs200JSONResponse struct {
	// Dags List of DAGs with their status and metadata
	Dags []DAGFile `json:"dags"`

	// Errors List of errors encountered during the request
	Errors     []string   `json:"errors"`
	Pagination Pagination `json:"pagination"`
}

func (response ListDAGs200JSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListDAGsdefaultJSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateDAGRequestObject struct {
	Body *CreateDAGJSONRequestBody
}

type CreateDAGResponseObject interface {
	VisitCreateDAGResponse(w http.ResponseWriter) error
}

type CreateDAG201JSONResponse struct {
	// Name Name of the newly created DAG
	Name string `json:"name"`
}

func (response CreateDAG201JSONResponse) VisitCreateDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateDAGdefaultJSONResponse) VisitCreateDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SearchDAGsRequestObject struct {
	Params SearchDAGsParams
}

type SearchDAGsResponseObject interface {
	VisitSearchDAGsResponse(w http.ResponseWriter) error
}

type SearchDAGs200JSONResponse struct {
	// Errors Errors encountered during the search
	Errors []string `json:"errors"`

	// Results Search results matching the query
	Results []SearchDAGsResultItem `json:"results"`
}

func (response SearchDAGs200JSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SearchDAGsdefaultJSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListTagsRequestObject struct {
}

type ListTagsResponseObject interface {
	VisitListTagsResponse(w http.ResponseWriter) error
}

type ListTags200JSONResponse ListTagResponse

func (response ListTags200JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTagsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListTagsdefaultJSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteDAGRequestObject struct {
	Name string `json:"name"`
}

type DeleteDAGResponseObject interface {
	VisitDeleteDAGResponse(w http.ResponseWriter) error
}

type DeleteDAG204Response struct {
}

func (response DeleteDAG204Response) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteDAG404JSONResponse Error

func (response DeleteDAG404JSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteDAGdefaultJSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGDetailsRequestObject struct {
	Name   string `json:"name"`
	Params GetDAGDetailsParams
}

type GetDAGDetailsResponseObject interface {
	VisitGetDAGDetailsResponse(w http.ResponseWriter) error
}

type GetDAGDetails200JSONResponse struct {
	// Dag Detailed status information for a DAG instance
	Dag DAGStatusFileDetails `json:"dag"`

	// Definition DAG definition
	Definition *string `json:"definition,omitempty"`

	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// HistoryData Historical run data for a DAG
	HistoryData *DAGHistoryData `json:"historyData,omitempty"`

	// LogUrl URL to access logs directly
	LogUrl *string `json:"logUrl,omitempty"`

	// ScLog Log information for the scheduler
	ScLog *SchedulerLog `json:"scLog,omitempty"`

	// StepLog Log information for a specific step
	StepLog *StepLog `json:"stepLog,omitempty"`

	// Title Title of the Page
	Title string `json:"title"`
}

func (response GetDAGDetails200JSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGDetailsdefaultJSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostDAGActionRequestObject struct {
	Name string `json:"name"`
	Body *PostDAGActionJSONRequestBody
}

type PostDAGActionResponseObject interface {
	VisitPostDAGActionResponse(w http.ResponseWriter) error
}

type PostDAGAction200JSONResponse PostDAGActionResponse

func (response PostDAGAction200JSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostDAGActiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PostDAGActiondefaultJSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGRunHistoryRequestObject struct {
	Name DAGName `json:"name"`
}

type GetDAGRunHistoryResponseObject interface {
	VisitGetDAGRunHistoryResponse(w http.ResponseWriter) error
}

type GetDAGRunHistory200JSONResponse DAGHistoryData

func (response GetDAGRunHistory200JSONResponse) VisitGetDAGRunHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunHistorydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGRunHistorydefaultJSONResponse) VisitGetDAGRunHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGSpecRequestObject struct {
	Name DAGName `json:"name"`
}

type GetDAGSpecResponseObject interface {
	VisitGetDAGSpecResponse(w http.ResponseWriter) error
}

type GetDAGSpec200JSONResponse struct {
	// Errors List of errors in the spec
	Errors []string `json:"errors"`

	// Spec The DAG spec
	Spec string `json:"spec"`
}

func (response GetDAGSpec200JSONResponse) VisitGetDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGSpecdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGSpecdefaultJSONResponse) VisitGetDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateDAGSpecRequestObject struct {
	Name DAGName `json:"name"`
	Body *UpdateDAGSpecJSONRequestBody
}

type UpdateDAGSpecResponseObject interface {
	VisitUpdateDAGSpecResponse(w http.ResponseWriter) error
}

type UpdateDAGSpec200Response struct {
}

func (response UpdateDAGSpec200Response) VisitUpdateDAGSpecResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateDAGSpec400JSONResponse struct {
	// Errors List of errors in the spec
	Errors []string `json:"errors"`
}

func (response UpdateDAGSpec400JSONResponse) VisitUpdateDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGSpecdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateDAGSpecdefaultJSONResponse) VisitUpdateDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse HealthResponse

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthdefaultResponse struct {
	StatusCode int
}

func (response GetHealthdefaultResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List DAGs
	// (GET /dags)
	ListDAGs(ctx context.Context, request ListDAGsRequestObject) (ListDAGsResponseObject, error)
	// Create a new DAG
	// (POST /dags)
	CreateDAG(ctx context.Context, request CreateDAGRequestObject) (CreateDAGResponseObject, error)
	// Search DAGs
	// (GET /dags/search)
	SearchDAGs(ctx context.Context, request SearchDAGsRequestObject) (SearchDAGsResponseObject, error)
	// List all tags
	// (GET /dags/tags)
	ListTags(ctx context.Context, request ListTagsRequestObject) (ListTagsResponseObject, error)
	// Delete a DAG
	// (DELETE /dags/{name})
	DeleteDAG(ctx context.Context, request DeleteDAGRequestObject) (DeleteDAGResponseObject, error)
	// Get DAG details
	// (GET /dags/{name})
	GetDAGDetails(ctx context.Context, request GetDAGDetailsRequestObject) (GetDAGDetailsResponseObject, error)
	// Perform an action on a DAG
	// (POST /dags/{name})
	PostDAGAction(ctx context.Context, request PostDAGActionRequestObject) (PostDAGActionResponseObject, error)
	// Get history of DAG runs
	// (GET /dags/{name}/history)
	GetDAGRunHistory(ctx context.Context, request GetDAGRunHistoryRequestObject) (GetDAGRunHistoryResponseObject, error)
	// Get DAG Spec
	// (GET /dags/{name}/spec)
	GetDAGSpec(ctx context.Context, request GetDAGSpecRequestObject) (GetDAGSpecResponseObject, error)
	// Update DAG Spec
	// (PUT /dags/{name}/spec)
	UpdateDAGSpec(ctx context.Context, request UpdateDAGSpecRequestObject) (UpdateDAGSpecResponseObject, error)
	// Health check endpoint
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListDAGs operation middleware
func (sh *strictHandler) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	var request ListDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListDAGs(ctx, request.(ListDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListDAGsResponseObject); ok {
		if err := validResponse.VisitListDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateDAG operation middleware
func (sh *strictHandler) CreateDAG(w http.ResponseWriter, r *http.Request) {
	var request CreateDAGRequestObject

	var body CreateDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDAG(ctx, request.(CreateDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateDAGResponseObject); ok {
		if err := validResponse.VisitCreateDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchDAGs operation middleware
func (sh *strictHandler) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	var request SearchDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchDAGs(ctx, request.(SearchDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchDAGsResponseObject); ok {
		if err := validResponse.VisitSearchDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTags operation middleware
func (sh *strictHandler) ListTags(w http.ResponseWriter, r *http.Request) {
	var request ListTagsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTags(ctx, request.(ListTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTagsResponseObject); ok {
		if err := validResponse.VisitListTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDAG operation middleware
func (sh *strictHandler) DeleteDAG(w http.ResponseWriter, r *http.Request, name string) {
	var request DeleteDAGRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDAG(ctx, request.(DeleteDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDAGResponseObject); ok {
		if err := validResponse.VisitDeleteDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGDetails operation middleware
func (sh *strictHandler) GetDAGDetails(w http.ResponseWriter, r *http.Request, name string, params GetDAGDetailsParams) {
	var request GetDAGDetailsRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGDetails(ctx, request.(GetDAGDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostDAGAction operation middleware
func (sh *strictHandler) PostDAGAction(w http.ResponseWriter, r *http.Request, name string) {
	var request PostDAGActionRequestObject

	request.Name = name

	var body PostDAGActionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostDAGAction(ctx, request.(PostDAGActionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDAGAction")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostDAGActionResponseObject); ok {
		if err := validResponse.VisitPostDAGActionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGRunHistory operation middleware
func (sh *strictHandler) GetDAGRunHistory(w http.ResponseWriter, r *http.Request, name DAGName) {
	var request GetDAGRunHistoryRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGRunHistory(ctx, request.(GetDAGRunHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGRunHistory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGRunHistoryResponseObject); ok {
		if err := validResponse.VisitGetDAGRunHistoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGSpec operation middleware
func (sh *strictHandler) GetDAGSpec(w http.ResponseWriter, r *http.Request, name DAGName) {
	var request GetDAGSpecRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGSpec(ctx, request.(GetDAGSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGSpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGSpecResponseObject); ok {
		if err := validResponse.VisitGetDAGSpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDAGSpec operation middleware
func (sh *strictHandler) UpdateDAGSpec(w http.ResponseWriter, r *http.Request, name DAGName) {
	var request UpdateDAGSpecRequestObject

	request.Name = name

	var body UpdateDAGSpecJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDAGSpec(ctx, request.(UpdateDAGSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDAGSpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDAGSpecResponseObject); ok {
		if err := validResponse.VisitUpdateDAGSpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(w http.ResponseWriter, r *http.Request) {
	var request GetHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"oiA3Z1nn4fbh/wMAAP//uqozNkJfAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
