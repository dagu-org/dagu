// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	ApiTokenScopes  = "apiToken.Scopes"
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for ErrorCode.
const (
	ErrorCodeAlreadyExists   ErrorCode = "already_exists"
	ErrorCodeAlreadyRunning  ErrorCode = "already_running"
	ErrorCodeBadGateway      ErrorCode = "bad_gateway"
	ErrorCodeBadRequest      ErrorCode = "bad_request"
	ErrorCodeInternalError   ErrorCode = "internal_error"
	ErrorCodeNotFound        ErrorCode = "not_found"
	ErrorCodeNotRunning      ErrorCode = "not_running"
	ErrorCodeRemoteNodeError ErrorCode = "remote_node_error"
	ErrorCodeUnauthorized    ErrorCode = "unauthorized"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusHealthy   HealthResponseStatus = "healthy"
	HealthResponseStatusUnhealthy HealthResponseStatus = "unhealthy"
)

// Defines values for NodeStatus.
const (
	NodeStatusCancelled  NodeStatus = 3
	NodeStatusFailed     NodeStatus = 2
	NodeStatusNotStarted NodeStatus = 0
	NodeStatusRunning    NodeStatus = 1
	NodeStatusSkipped    NodeStatus = 5
	NodeStatusSuccess    NodeStatus = 4
)

// Defines values for NodeStatusText.
const (
	NodeStatusTextCanceled   NodeStatusText = "canceled"
	NodeStatusTextFailed     NodeStatusText = "failed"
	NodeStatusTextFinished   NodeStatusText = "finished"
	NodeStatusTextNotStarted NodeStatusText = "not started"
	NodeStatusTextRunning    NodeStatusText = "running"
	NodeStatusTextSkipped    NodeStatusText = "skipped"
)

// Defines values for Status.
const (
	StatusCancelled  Status = 3
	StatusFailed     Status = 2
	StatusNotStarted Status = 0
	StatusRunning    Status = 1
	StatusSuccess    Status = 4
)

// Defines values for StatusText.
const (
	StatusTextCancelled  StatusText = "cancelled"
	StatusTextFailed     StatusText = "failed"
	StatusTextFinished   StatusText = "finished"
	StatusTextNotStarted StatusText = "not started"
	StatusTextRunning    StatusText = "running"
)

// DAG Core DAG configuration containing workflow definition and metadata
type DAG struct {
	// DefaultParams Default parameter values in JSON format if not specified at runtime
	DefaultParams *string `json:"defaultParams,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description *string `json:"description,omitempty"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"group,omitempty"`

	// Name Logical name of the DAG
	Name string `json:"name"`

	// Params List of parameter names that can be passed to the DAG at runtime
	Params *[]string `json:"params,omitempty"`

	// Schedule List of scheduling expressions defining when the DAG should run
	Schedule *[]Schedule `json:"schedule,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"tags,omitempty"`
}

// DAGDetails Detailed DAG configuration information
type DAGDetails struct {
	// DefaultParams Default parameter values in JSON format if not specified at runtime
	DefaultParams *string `json:"defaultParams,omitempty"`

	// Delay Time in seconds to wait before starting the DAG
	Delay *int `json:"delay,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description *string `json:"description,omitempty"`

	// Env List of environment variables to set before executing
	Env *[]string `json:"env,omitempty"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"group,omitempty"`

	// HandlerOn Configuration for event handlers in a DAG
	HandlerOn *HandlerOn `json:"handlerOn,omitempty"`

	// HistRetentionDays Number of days to retain historical logs
	HistRetentionDays *int `json:"histRetentionDays,omitempty"`

	// LogDir Directory path for storing log files
	LogDir *string `json:"logDir,omitempty"`

	// MaxActiveRuns Maximum number of concurrent steps to run
	MaxActiveRuns *int `json:"maxActiveRuns,omitempty"`

	// Name Unique identifier for the DAG within its group
	Name string `json:"name"`

	// Params List of parameter names that can be passed to the DAG at runtime
	Params *[]string `json:"params,omitempty"`

	// Preconditions Conditions that must be met before the DAG can start
	Preconditions *[]Precondition `json:"preconditions,omitempty"`

	// Schedule List of scheduling expressions defining when the DAG should run
	Schedule *[]Schedule `json:"schedule,omitempty"`

	// Steps List of steps to execute in the DAG
	Steps *[]Step `json:"steps,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"tags,omitempty"`
}

// DAGFile DAG file with its status information
type DAGFile struct {
	// Dag Core DAG configuration containing workflow definition and metadata
	Dag DAG `json:"dag"`

	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// FileId File ID of the DAG file
	FileId string `json:"fileId"`

	// LatestRun Current status of a DAG run
	LatestRun RunSummary `json:"latestRun"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"suspended"`
}

// DAGFileId location of the DAG file
type DAGFileId = string

// DAGGridItem Grid item for log visualization
type DAGGridItem struct {
	// History Status of the step ordered by time
	History []NodeStatus `json:"history"`

	// Name Name of the step
	Name string `json:"name"`
}

// DAGName Name of the DAG
type DAGName = string

// Error Generic error response object
type Error struct {
	// Code Error code indicating the type of error
	Code ErrorCode `json:"code"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Short error message
	Message string `json:"message"`
}

// ErrorCode Error code indicating the type of error
type ErrorCode string

// HandlerOn Configuration for event handlers in a DAG
type HandlerOn struct {
	// Cancel Individual task within a DAG that performs a specific operation
	Cancel *Step `json:"cancel,omitempty"`

	// Exit Individual task within a DAG that performs a specific operation
	Exit *Step `json:"exit,omitempty"`

	// Failure Individual task within a DAG that performs a specific operation
	Failure *Step `json:"failure,omitempty"`

	// Success Individual task within a DAG that performs a specific operation
	Success *Step `json:"success,omitempty"`
}

// HealthResponse Response object for the health check endpoint
type HealthResponse struct {
	// Status Overall health status of the server
	Status HealthResponseStatus `json:"status"`

	// Timestamp Current server time
	Timestamp string `json:"timestamp"`

	// Uptime Server uptime in seconds
	Uptime int `json:"uptime"`

	// Version Current version of the server
	Version string `json:"version"`
}

// HealthResponseStatus Overall health status of the server
type HealthResponseStatus string

// ListTagResponse Response object for listing all tags
type ListTagResponse struct {
	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// Tags List of unique tags
	Tags []string `json:"tags"`
}

// Log Log information for the scheduler
type Log struct {
	// Content Log content
	Content string `json:"content"`
}

// Node Status of an individual step within a DAG run
type Node struct {
	// DoneCount Number of successful completions for repeating steps
	DoneCount int `json:"doneCount"`

	// Error Error message if the step failed
	Error *string `json:"error,omitempty"`

	// FinishedAt RFC3339 timestamp when the step finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to step-specific log file
	Log string `json:"log"`

	// RetryCount Number of retry attempts made for this step
	RetryCount int `json:"retryCount"`

	// StartedAt RFC3339 timestamp when the step started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current node state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Skipped"
	Status NodeStatus `json:"status"`

	// StatusText Human-readable status description for the node
	StatusText NodeStatusText `json:"statusText"`

	// Step Individual task within a DAG that performs a specific operation
	Step Step `json:"step"`
}

// NodeStatus Numeric status code indicating current node state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
// 5: "Skipped"
type NodeStatus int

// NodeStatusText Human-readable status description for the node
type NodeStatusText string

// Pagination defines model for Pagination.
type Pagination struct {
	// CurrentPage current page number
	CurrentPage int `json:"currentPage"`

	// NextPage next page number
	NextPage int `json:"nextPage"`

	// PrevPage previous page number
	PrevPage int `json:"prevPage"`

	// TotalPages total number of pages
	TotalPages int `json:"totalPages"`

	// TotalRecords total number of records
	TotalRecords int `json:"totalRecords"`
}

// Precondition Precondition that must be satisfied before running a step or DAG
type Precondition struct {
	// Condition Expression or check to evaluate
	Condition *string `json:"condition,omitempty"`

	// Expected Expected result of the condition evaluation
	Expected *string `json:"expected,omitempty"`
}

// RepeatPolicy Configuration for step retry behavior
type RepeatPolicy struct {
	// Interval Time in seconds to wait between retry attempts
	Interval *int `json:"interval,omitempty"`

	// Repeat Whether the step should be retried on failure
	Repeat *bool `json:"repeat,omitempty"`
}

// RequestId Unique identifier for the request
type RequestId = string

// RunDetails defines model for RunDetails.
type RunDetails struct {
	// FinishedAt RFC 3339 timestamp when the DAG run finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to the log file
	Log string `json:"log"`

	// Name Name of the DAG
	Name DAGName `json:"name"`

	// Nodes Status of individual steps within the DAG
	Nodes []Node `json:"nodes"`

	// OnCancel Status of an individual step within a DAG run
	OnCancel *Node `json:"onCancel,omitempty"`

	// OnExit Status of an individual step within a DAG run
	OnExit *Node `json:"onExit,omitempty"`

	// OnFailure Status of an individual step within a DAG run
	OnFailure *Node `json:"onFailure,omitempty"`

	// OnSuccess Status of an individual step within a DAG run
	OnSuccess *Node `json:"onSuccess,omitempty"`

	// Params Runtime parameters passed to the DAG in JSON format
	Params *string `json:"params,omitempty"`

	// Pid Process ID of the DAG run
	Pid *int `json:"pid,omitempty"`

	// RequestId Unique identifier for the request
	RequestId RequestId `json:"requestId"`

	// StartedAt RFC 3339 timestamp when the DAG run started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current run state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	Status Status `json:"status"`

	// StatusText Human-readable status description for the DAG run
	StatusText StatusText `json:"statusText"`
}

// RunSummary Current status of a DAG run
type RunSummary struct {
	// FinishedAt RFC 3339 timestamp when the DAG run finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to the log file
	Log string `json:"log"`

	// Name Name of the DAG
	Name DAGName `json:"name"`

	// Params Runtime parameters passed to the DAG in JSON format
	Params *string `json:"params,omitempty"`

	// Pid Process ID of the DAG run
	Pid *int `json:"pid,omitempty"`

	// RequestId Unique identifier for the request
	RequestId RequestId `json:"requestId"`

	// StartedAt RFC 3339 timestamp when the DAG run started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current run state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	Status Status `json:"status"`

	// StatusText Human-readable status description for the DAG run
	StatusText StatusText `json:"statusText"`
}

// Schedule Schedule configuration for DAG run
type Schedule struct {
	// Expression Cron expression or schedule pattern
	Expression string `json:"expression"`
}

// SearchDAGsMatchItem Details of a search match within a DAG
type SearchDAGsMatchItem struct {
	// Line Matching line content
	Line string `json:"line"`

	// LineNumber Line number where match was found
	LineNumber int `json:"lineNumber"`

	// StartLine Start line for context
	StartLine int `json:"startLine"`
}

// SearchResultItem Individual search result item for a DAG
type SearchResultItem struct {
	// Dag Core DAG configuration containing workflow definition and metadata
	Dag DAG `json:"dag"`

	// Matches Details of where matches were found
	Matches []SearchDAGsMatchItem `json:"matches"`

	// Name Name of the matching DAG
	Name string `json:"name"`
}

// Status Numeric status code indicating current run state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
type Status int

// StatusText Human-readable status description for the DAG run
type StatusText string

// Step Individual task within a DAG that performs a specific operation
type Step struct {
	// Args List of arguments to pass to the command
	Args *[]string `json:"args,omitempty"`

	// CmdWithArgs Complete command string including arguments to execute
	CmdWithArgs *string `json:"cmdWithArgs,omitempty"`

	// Command Base command to execute without arguments
	Command *string `json:"command,omitempty"`

	// Depends List of step names that must complete before this step can start
	Depends *[]string `json:"depends,omitempty"`

	// Description Human-readable description of what the step does
	Description *string `json:"description,omitempty"`

	// Dir Working directory for executing the step's command
	Dir *string `json:"dir,omitempty"`

	// MailOnError Whether to send email notifications on step failure
	MailOnError *bool `json:"mailOnError,omitempty"`

	// Name Unique identifier for the step within the DAG
	Name string `json:"name"`

	// Output Variable name to store the step's output
	Output *string `json:"output,omitempty"`

	// Params Parameters to pass to the sub DAG in JSON format
	Params *string `json:"params,omitempty"`

	// Preconditions Conditions that must be met before the step can start
	Preconditions *[]Precondition `json:"preconditions,omitempty"`

	// RepeatPolicy Configuration for step retry behavior
	RepeatPolicy *RepeatPolicy `json:"repeatPolicy,omitempty"`

	// Run The name of the DAG to run as a sub-DAG
	Run *string `json:"run,omitempty"`

	// Script Script content if the step executes a script file
	Script *string `json:"script,omitempty"`

	// Stderr File path for capturing standard error
	Stderr *string `json:"stderr,omitempty"`

	// Stdout File path for capturing standard output
	Stdout *string `json:"stdout,omitempty"`
}

// Page defines model for Page.
type Page = int

// PerPage defines model for PerPage.
type PerPage = int

// RemoteNode defines model for RemoteNode.
type RemoteNode = string

// StepName defines model for StepName.
type StepName = string

// ListAllDAGsParams defines parameters for ListAllDAGs.
type ListAllDAGsParams struct {
	// Page page number of items to fetch (default is 1)
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage number of items per page (default is 30, max is 100)
	PerPage *PerPage `form:"perPage,omitempty" json:"perPage,omitempty"`

	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Name Filter DAGs by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Tag Filter DAGs by tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`
}

// CreateNewDAGJSONBody defines parameters for CreateNewDAG.
type CreateNewDAGJSONBody struct {
	// Name Name of the DAG
	Name DAGName `json:"name"`
}

// CreateNewDAGParams defines parameters for CreateNewDAG.
type CreateNewDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// SearchDAGDefinitionsParams defines parameters for SearchDAGDefinitions.
type SearchDAGDefinitionsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Q A search query string
	Q string `form:"q" json:"q"`
}

// GetAllDAGTagsParams defines parameters for GetAllDAGTags.
type GetAllDAGTagsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// DeleteDAGByFileIdParams defines parameters for DeleteDAGByFileId.
type DeleteDAGByFileIdParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGDetailsParams defines parameters for GetDAGDetails.
type GetDAGDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// RenameDAGJSONBody defines parameters for RenameDAG.
type RenameDAGJSONBody struct {
	// NewFileId New file ID for the DAG
	NewFileId string `json:"newFileId"`
}

// RenameDAGParams defines parameters for RenameDAG.
type RenameDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// RetryDAGExecutionJSONBody defines parameters for RetryDAGExecution.
type RetryDAGExecutionJSONBody struct {
	// RequestId Request ID of the DAG run to retry
	RequestId string `json:"requestId"`
}

// RetryDAGExecutionParams defines parameters for RetryDAGExecution.
type RetryDAGExecutionParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGExecutionHistoryParams defines parameters for GetDAGExecutionHistory.
type GetDAGExecutionHistoryParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGRunDetailsParams defines parameters for GetDAGRunDetails.
type GetDAGRunDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGDefinitionParams defines parameters for GetDAGDefinition.
type GetDAGDefinitionParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// UpdateDAGDefinitionJSONBody defines parameters for UpdateDAGDefinition.
type UpdateDAGDefinitionJSONBody struct {
	// Spec The new DAG spec
	Spec string `json:"spec"`
}

// UpdateDAGDefinitionParams defines parameters for UpdateDAGDefinition.
type UpdateDAGDefinitionParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// ExecuteDAGJSONBody defines parameters for ExecuteDAG.
type ExecuteDAGJSONBody struct {
	// Params Parameters to pass to the DAG in JSON format
	Params *string `json:"params,omitempty"`
}

// ExecuteDAGParams defines parameters for ExecuteDAG.
type ExecuteDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// TerminateDAGExecutionParams defines parameters for TerminateDAGExecution.
type TerminateDAGExecutionParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// UpdateDAGSuspensionStateJSONBody defines parameters for UpdateDAGSuspensionState.
type UpdateDAGSuspensionStateJSONBody struct {
	// Suspend Suspend status to set for the DAG
	Suspend bool `json:"suspend"`
}

// UpdateDAGSuspensionStateParams defines parameters for UpdateDAGSuspensionState.
type UpdateDAGSuspensionStateParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGRunLogParams defines parameters for GetDAGRunLog.
type GetDAGRunLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGStepLogParams defines parameters for GetDAGStepLog.
type GetDAGStepLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// UpdateDAGStepStatusJSONBody defines parameters for UpdateDAGStepStatus.
type UpdateDAGStepStatusJSONBody struct {
	// Status Numeric status code indicating current node state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Skipped"
	Status NodeStatus `json:"status"`
}

// UpdateDAGStepStatusParams defines parameters for UpdateDAGStepStatus.
type UpdateDAGStepStatusParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// CreateNewDAGJSONRequestBody defines body for CreateNewDAG for application/json ContentType.
type CreateNewDAGJSONRequestBody CreateNewDAGJSONBody

// RenameDAGJSONRequestBody defines body for RenameDAG for application/json ContentType.
type RenameDAGJSONRequestBody RenameDAGJSONBody

// RetryDAGExecutionJSONRequestBody defines body for RetryDAGExecution for application/json ContentType.
type RetryDAGExecutionJSONRequestBody RetryDAGExecutionJSONBody

// UpdateDAGDefinitionJSONRequestBody defines body for UpdateDAGDefinition for application/json ContentType.
type UpdateDAGDefinitionJSONRequestBody UpdateDAGDefinitionJSONBody

// ExecuteDAGJSONRequestBody defines body for ExecuteDAG for application/json ContentType.
type ExecuteDAGJSONRequestBody ExecuteDAGJSONBody

// UpdateDAGSuspensionStateJSONRequestBody defines body for UpdateDAGSuspensionState for application/json ContentType.
type UpdateDAGSuspensionStateJSONRequestBody UpdateDAGSuspensionStateJSONBody

// UpdateDAGStepStatusJSONRequestBody defines body for UpdateDAGStepStatus for application/json ContentType.
type UpdateDAGStepStatusJSONRequestBody UpdateDAGStepStatusJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all available DAGs
	// (GET /dags)
	ListAllDAGs(w http.ResponseWriter, r *http.Request, params ListAllDAGsParams)
	// Create a new DAG definition
	// (POST /dags)
	CreateNewDAG(w http.ResponseWriter, r *http.Request, params CreateNewDAGParams)
	// Search across all DAG definitions
	// (GET /dags/search)
	SearchDAGDefinitions(w http.ResponseWriter, r *http.Request, params SearchDAGDefinitionsParams)
	// List all available DAG tags
	// (GET /dags/tags)
	GetAllDAGTags(w http.ResponseWriter, r *http.Request, params GetAllDAGTagsParams)
	// Delete an existing DAG
	// (DELETE /dags/{fileId})
	DeleteDAGByFileId(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params DeleteDAGByFileIdParams)
	// Retrieve comprehensive DAG information
	// (GET /dags/{fileId})
	GetDAGDetails(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params GetDAGDetailsParams)
	// Change DAG file ID
	// (POST /dags/{fileId}/rename)
	RenameDAG(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params RenameDAGParams)
	// Retry DAG execution
	// (POST /dags/{fileId}/retry)
	RetryDAGExecution(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params RetryDAGExecutionParams)
	// Retrieve execution history of a DAG
	// (GET /dags/{fileId}/runs)
	GetDAGExecutionHistory(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params GetDAGExecutionHistoryParams)
	// Get detailed status of a specific DAG run
	// (GET /dags/{fileId}/runs/{requestId})
	GetDAGRunDetails(w http.ResponseWriter, r *http.Request, fileId DAGFileId, requestId RequestId, params GetDAGRunDetailsParams)
	// Retrieve DAG definition
	// (GET /dags/{fileId}/spec)
	GetDAGDefinition(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params GetDAGDefinitionParams)
	// Update DAG definition
	// (PUT /dags/{fileId}/spec)
	UpdateDAGDefinition(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params UpdateDAGDefinitionParams)
	// Initiate DAG execution
	// (POST /dags/{fileId}/start)
	ExecuteDAG(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params ExecuteDAGParams)
	// Terminate running DAG execution
	// (POST /dags/{fileId}/stop)
	TerminateDAGExecution(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params TerminateDAGExecutionParams)
	// Toggle DAG suspension state
	// (POST /dags/{fileId}/suspend)
	UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params UpdateDAGSuspensionStateParams)
	// Check server health status
	// (GET /health)
	GetHealthStatus(w http.ResponseWriter, r *http.Request)
	// Retrieve full execution log of a DAG run
	// (GET /runs/{dagName}/{requestId}/log)
	GetDAGRunLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, params GetDAGRunLogParams)
	// Retrieve log for a specific step in a DAG run
	// (GET /runs/{dagName}/{requestId}/steps/{stepName}/log)
	GetDAGStepLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, stepName StepName, params GetDAGStepLogParams)
	// Manually update a step's execution status
	// (PATCH /runs/{dagName}/{requestId}/steps/{stepName}/status)
	UpdateDAGStepStatus(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, stepName StepName, params UpdateDAGStepStatusParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all available DAGs
// (GET /dags)
func (_ Unimplemented) ListAllDAGs(w http.ResponseWriter, r *http.Request, params ListAllDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new DAG definition
// (POST /dags)
func (_ Unimplemented) CreateNewDAG(w http.ResponseWriter, r *http.Request, params CreateNewDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search across all DAG definitions
// (GET /dags/search)
func (_ Unimplemented) SearchDAGDefinitions(w http.ResponseWriter, r *http.Request, params SearchDAGDefinitionsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all available DAG tags
// (GET /dags/tags)
func (_ Unimplemented) GetAllDAGTags(w http.ResponseWriter, r *http.Request, params GetAllDAGTagsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an existing DAG
// (DELETE /dags/{fileId})
func (_ Unimplemented) DeleteDAGByFileId(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params DeleteDAGByFileIdParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve comprehensive DAG information
// (GET /dags/{fileId})
func (_ Unimplemented) GetDAGDetails(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params GetDAGDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change DAG file ID
// (POST /dags/{fileId}/rename)
func (_ Unimplemented) RenameDAG(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params RenameDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retry DAG execution
// (POST /dags/{fileId}/retry)
func (_ Unimplemented) RetryDAGExecution(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params RetryDAGExecutionParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve execution history of a DAG
// (GET /dags/{fileId}/runs)
func (_ Unimplemented) GetDAGExecutionHistory(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params GetDAGExecutionHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get detailed status of a specific DAG run
// (GET /dags/{fileId}/runs/{requestId})
func (_ Unimplemented) GetDAGRunDetails(w http.ResponseWriter, r *http.Request, fileId DAGFileId, requestId RequestId, params GetDAGRunDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve DAG definition
// (GET /dags/{fileId}/spec)
func (_ Unimplemented) GetDAGDefinition(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params GetDAGDefinitionParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update DAG definition
// (PUT /dags/{fileId}/spec)
func (_ Unimplemented) UpdateDAGDefinition(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params UpdateDAGDefinitionParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Initiate DAG execution
// (POST /dags/{fileId}/start)
func (_ Unimplemented) ExecuteDAG(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params ExecuteDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Terminate running DAG execution
// (POST /dags/{fileId}/stop)
func (_ Unimplemented) TerminateDAGExecution(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params TerminateDAGExecutionParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Toggle DAG suspension state
// (POST /dags/{fileId}/suspend)
func (_ Unimplemented) UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params UpdateDAGSuspensionStateParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Check server health status
// (GET /health)
func (_ Unimplemented) GetHealthStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve full execution log of a DAG run
// (GET /runs/{dagName}/{requestId}/log)
func (_ Unimplemented) GetDAGRunLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, params GetDAGRunLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve log for a specific step in a DAG run
// (GET /runs/{dagName}/{requestId}/steps/{stepName}/log)
func (_ Unimplemented) GetDAGStepLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, stepName StepName, params GetDAGStepLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Manually update a step's execution status
// (PATCH /runs/{dagName}/{requestId}/steps/{stepName}/status)
func (_ Unimplemented) UpdateDAGStepStatus(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, stepName StepName, params UpdateDAGStepStatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAllDAGs operation middleware
func (siw *ServerInterfaceWrapper) ListAllDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAllDAGsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", r.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "perPage", Err: err})
		return
	}

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAllDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateNewDAG operation middleware
func (siw *ServerInterfaceWrapper) CreateNewDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateNewDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNewDAG(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchDAGDefinitions operation middleware
func (siw *ServerInterfaceWrapper) SearchDAGDefinitions(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchDAGDefinitionsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Required query parameter "q" -------------

	if paramValue := r.URL.Query().Get("q"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "q"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchDAGDefinitions(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllDAGTags operation middleware
func (siw *ServerInterfaceWrapper) GetAllDAGTags(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllDAGTagsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllDAGTags(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteDAGByFileId operation middleware
func (siw *ServerInterfaceWrapper) DeleteDAGByFileId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId DAGFileId

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", chi.URLParam(r, "fileId"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteDAGByFileIdParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDAGByFileId(w, r, fileId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId DAGFileId

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", chi.URLParam(r, "fileId"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGDetails(w, r, fileId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RenameDAG operation middleware
func (siw *ServerInterfaceWrapper) RenameDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId DAGFileId

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", chi.URLParam(r, "fileId"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params RenameDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RenameDAG(w, r, fileId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RetryDAGExecution operation middleware
func (siw *ServerInterfaceWrapper) RetryDAGExecution(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId DAGFileId

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", chi.URLParam(r, "fileId"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params RetryDAGExecutionParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetryDAGExecution(w, r, fileId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGExecutionHistory operation middleware
func (siw *ServerInterfaceWrapper) GetDAGExecutionHistory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId DAGFileId

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", chi.URLParam(r, "fileId"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGExecutionHistoryParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGExecutionHistory(w, r, fileId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGRunDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGRunDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId DAGFileId

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", chi.URLParam(r, "fileId"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	// ------------- Path parameter "requestId" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithOptions("simple", "requestId", chi.URLParam(r, "requestId"), &requestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGRunDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGRunDetails(w, r, fileId, requestId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGDefinition operation middleware
func (siw *ServerInterfaceWrapper) GetDAGDefinition(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId DAGFileId

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", chi.URLParam(r, "fileId"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGDefinitionParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGDefinition(w, r, fileId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDAGDefinition operation middleware
func (siw *ServerInterfaceWrapper) UpdateDAGDefinition(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId DAGFileId

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", chi.URLParam(r, "fileId"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateDAGDefinitionParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDAGDefinition(w, r, fileId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ExecuteDAG operation middleware
func (siw *ServerInterfaceWrapper) ExecuteDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId DAGFileId

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", chi.URLParam(r, "fileId"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ExecuteDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExecuteDAG(w, r, fileId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// TerminateDAGExecution operation middleware
func (siw *ServerInterfaceWrapper) TerminateDAGExecution(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId DAGFileId

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", chi.URLParam(r, "fileId"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params TerminateDAGExecutionParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TerminateDAGExecution(w, r, fileId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDAGSuspensionState operation middleware
func (siw *ServerInterfaceWrapper) UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId DAGFileId

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", chi.URLParam(r, "fileId"), &fileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateDAGSuspensionStateParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDAGSuspensionState(w, r, fileId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealthStatus operation middleware
func (siw *ServerInterfaceWrapper) GetHealthStatus(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealthStatus(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGRunLog operation middleware
func (siw *ServerInterfaceWrapper) GetDAGRunLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagName" -------------
	var dagName DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "dagName", chi.URLParam(r, "dagName"), &dagName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagName", Err: err})
		return
	}

	// ------------- Path parameter "requestId" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithOptions("simple", "requestId", chi.URLParam(r, "requestId"), &requestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGRunLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGRunLog(w, r, dagName, requestId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGStepLog operation middleware
func (siw *ServerInterfaceWrapper) GetDAGStepLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagName" -------------
	var dagName DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "dagName", chi.URLParam(r, "dagName"), &dagName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagName", Err: err})
		return
	}

	// ------------- Path parameter "requestId" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithOptions("simple", "requestId", chi.URLParam(r, "requestId"), &requestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGStepLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGStepLog(w, r, dagName, requestId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDAGStepStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateDAGStepStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "dagName" -------------
	var dagName DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "dagName", chi.URLParam(r, "dagName"), &dagName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagName", Err: err})
		return
	}

	// ------------- Path parameter "requestId" -------------
	var requestId RequestId

	err = runtime.BindStyledParameterWithOptions("simple", "requestId", chi.URLParam(r, "requestId"), &requestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateDAGStepStatusParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDAGStepStatus(w, r, dagName, requestId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags", wrapper.ListAllDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags", wrapper.CreateNewDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/search", wrapper.SearchDAGDefinitions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/tags", wrapper.GetAllDAGTags)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/dags/{fileId}", wrapper.DeleteDAGByFileId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileId}", wrapper.GetDAGDetails)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileId}/rename", wrapper.RenameDAG)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileId}/retry", wrapper.RetryDAGExecution)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileId}/runs", wrapper.GetDAGExecutionHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileId}/runs/{requestId}", wrapper.GetDAGRunDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileId}/spec", wrapper.GetDAGDefinition)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/dags/{fileId}/spec", wrapper.UpdateDAGDefinition)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileId}/start", wrapper.ExecuteDAG)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileId}/stop", wrapper.TerminateDAGExecution)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileId}/suspend", wrapper.UpdateDAGSuspensionState)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealthStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/runs/{dagName}/{requestId}/log", wrapper.GetDAGRunLog)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/runs/{dagName}/{requestId}/steps/{stepName}/log", wrapper.GetDAGStepLog)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/runs/{dagName}/{requestId}/steps/{stepName}/status", wrapper.UpdateDAGStepStatus)
	})

	return r
}

type ListAllDAGsRequestObject struct {
	Params ListAllDAGsParams
}

type ListAllDAGsResponseObject interface {
	VisitListAllDAGsResponse(w http.ResponseWriter) error
}

type ListAllDAGs200JSONResponse struct {
	// Dags List of DAGs with their status and metadata
	Dags []DAGFile `json:"dags"`

	// Errors List of errors encountered during the request
	Errors     []string   `json:"errors"`
	Pagination Pagination `json:"pagination"`
}

func (response ListAllDAGs200JSONResponse) VisitListAllDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAllDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListAllDAGsdefaultJSONResponse) VisitListAllDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateNewDAGRequestObject struct {
	Params CreateNewDAGParams
	Body   *CreateNewDAGJSONRequestBody
}

type CreateNewDAGResponseObject interface {
	VisitCreateNewDAGResponse(w http.ResponseWriter) error
}

type CreateNewDAG201JSONResponse struct {
	// Name Name of the newly created DAG
	Name string `json:"name"`
}

func (response CreateNewDAG201JSONResponse) VisitCreateNewDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateNewDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateNewDAGdefaultJSONResponse) VisitCreateNewDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SearchDAGDefinitionsRequestObject struct {
	Params SearchDAGDefinitionsParams
}

type SearchDAGDefinitionsResponseObject interface {
	VisitSearchDAGDefinitionsResponse(w http.ResponseWriter) error
}

type SearchDAGDefinitions200JSONResponse struct {
	// Errors Errors encountered during the search
	Errors []string `json:"errors"`

	// Results Search results matching the query
	Results []SearchResultItem `json:"results"`
}

func (response SearchDAGDefinitions200JSONResponse) VisitSearchDAGDefinitionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchDAGDefinitionsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SearchDAGDefinitionsdefaultJSONResponse) VisitSearchDAGDefinitionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAllDAGTagsRequestObject struct {
	Params GetAllDAGTagsParams
}

type GetAllDAGTagsResponseObject interface {
	VisitGetAllDAGTagsResponse(w http.ResponseWriter) error
}

type GetAllDAGTags200JSONResponse ListTagResponse

func (response GetAllDAGTags200JSONResponse) VisitGetAllDAGTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllDAGTagsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetAllDAGTagsdefaultJSONResponse) VisitGetAllDAGTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteDAGByFileIdRequestObject struct {
	FileId DAGFileId `json:"fileId"`
	Params DeleteDAGByFileIdParams
}

type DeleteDAGByFileIdResponseObject interface {
	VisitDeleteDAGByFileIdResponse(w http.ResponseWriter) error
}

type DeleteDAGByFileId204Response struct {
}

func (response DeleteDAGByFileId204Response) VisitDeleteDAGByFileIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteDAGByFileId404JSONResponse Error

func (response DeleteDAGByFileId404JSONResponse) VisitDeleteDAGByFileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDAGByFileIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteDAGByFileIddefaultJSONResponse) VisitDeleteDAGByFileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGDetailsRequestObject struct {
	FileId DAGFileId `json:"fileId"`
	Params GetDAGDetailsParams
}

type GetDAGDetailsResponseObject interface {
	VisitGetDAGDetailsResponse(w http.ResponseWriter) error
}

type GetDAGDetails200JSONResponse struct {
	// Dag Detailed DAG configuration information
	Dag *DAGDetails `json:"dag,omitempty"`

	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// LatestRun Detailed status of a DAG run including child nodes
	LatestRun RunDetails `json:"latestRun"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"suspended"`
}

func (response GetDAGDetails200JSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGDetailsdefaultJSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RenameDAGRequestObject struct {
	FileId DAGFileId `json:"fileId"`
	Params RenameDAGParams
	Body   *RenameDAGJSONRequestBody
}

type RenameDAGResponseObject interface {
	VisitRenameDAGResponse(w http.ResponseWriter) error
}

type RenameDAG200Response struct {
}

func (response RenameDAG200Response) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RenameDAG400JSONResponse Error

func (response RenameDAG400JSONResponse) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RenameDAG404JSONResponse Error

func (response RenameDAG404JSONResponse) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RenameDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RenameDAGdefaultJSONResponse) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetryDAGExecutionRequestObject struct {
	FileId DAGFileId `json:"fileId"`
	Params RetryDAGExecutionParams
	Body   *RetryDAGExecutionJSONRequestBody
}

type RetryDAGExecutionResponseObject interface {
	VisitRetryDAGExecutionResponse(w http.ResponseWriter) error
}

type RetryDAGExecution200Response struct {
}

func (response RetryDAGExecution200Response) VisitRetryDAGExecutionResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RetryDAGExecutiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RetryDAGExecutiondefaultJSONResponse) VisitRetryDAGExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGExecutionHistoryRequestObject struct {
	FileId DAGFileId `json:"fileId"`
	Params GetDAGExecutionHistoryParams
}

type GetDAGExecutionHistoryResponseObject interface {
	VisitGetDAGExecutionHistoryResponse(w http.ResponseWriter) error
}

type GetDAGExecutionHistory200JSONResponse struct {
	// GridData Grid data for visualization
	GridData []DAGGridItem `json:"gridData"`

	// Runs List of historical runs for the DAG
	Runs []RunDetails `json:"runs"`
}

func (response GetDAGExecutionHistory200JSONResponse) VisitGetDAGExecutionHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGExecutionHistorydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGExecutionHistorydefaultJSONResponse) VisitGetDAGExecutionHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGRunDetailsRequestObject struct {
	FileId    DAGFileId `json:"fileId"`
	RequestId RequestId `json:"requestId"`
	Params    GetDAGRunDetailsParams
}

type GetDAGRunDetailsResponseObject interface {
	VisitGetDAGRunDetailsResponse(w http.ResponseWriter) error
}

type GetDAGRunDetails200JSONResponse struct {
	// Run Detailed status of a DAG run including child nodes
	Run RunDetails `json:"run"`
}

func (response GetDAGRunDetails200JSONResponse) VisitGetDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGRunDetailsdefaultJSONResponse) VisitGetDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGDefinitionRequestObject struct {
	FileId DAGFileId `json:"fileId"`
	Params GetDAGDefinitionParams
}

type GetDAGDefinitionResponseObject interface {
	VisitGetDAGDefinitionResponse(w http.ResponseWriter) error
}

type GetDAGDefinition200JSONResponse struct {
	// Dag Detailed DAG configuration information
	Dag *DAGDetails `json:"dag,omitempty"`

	// Errors List of errors in the spec
	Errors []string `json:"errors"`

	// Spec The DAG spec
	Spec string `json:"spec"`
}

func (response GetDAGDefinition200JSONResponse) VisitGetDAGDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDefinitiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGDefinitiondefaultJSONResponse) VisitGetDAGDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateDAGDefinitionRequestObject struct {
	FileId DAGFileId `json:"fileId"`
	Params UpdateDAGDefinitionParams
	Body   *UpdateDAGDefinitionJSONRequestBody
}

type UpdateDAGDefinitionResponseObject interface {
	VisitUpdateDAGDefinitionResponse(w http.ResponseWriter) error
}

type UpdateDAGDefinition200JSONResponse struct {
	// Errors List of errors in the spec
	Errors []string `json:"errors"`
}

func (response UpdateDAGDefinition200JSONResponse) VisitUpdateDAGDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGDefinitiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateDAGDefinitiondefaultJSONResponse) VisitUpdateDAGDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExecuteDAGRequestObject struct {
	FileId DAGFileId `json:"fileId"`
	Params ExecuteDAGParams
	Body   *ExecuteDAGJSONRequestBody
}

type ExecuteDAGResponseObject interface {
	VisitExecuteDAGResponse(w http.ResponseWriter) error
}

type ExecuteDAG200Response struct {
}

func (response ExecuteDAG200Response) VisitExecuteDAGResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ExecuteDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ExecuteDAGdefaultJSONResponse) VisitExecuteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TerminateDAGExecutionRequestObject struct {
	FileId DAGFileId `json:"fileId"`
	Params TerminateDAGExecutionParams
}

type TerminateDAGExecutionResponseObject interface {
	VisitTerminateDAGExecutionResponse(w http.ResponseWriter) error
}

type TerminateDAGExecution200Response struct {
}

func (response TerminateDAGExecution200Response) VisitTerminateDAGExecutionResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type TerminateDAGExecutiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response TerminateDAGExecutiondefaultJSONResponse) VisitTerminateDAGExecutionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateDAGSuspensionStateRequestObject struct {
	FileId DAGFileId `json:"fileId"`
	Params UpdateDAGSuspensionStateParams
	Body   *UpdateDAGSuspensionStateJSONRequestBody
}

type UpdateDAGSuspensionStateResponseObject interface {
	VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error
}

type UpdateDAGSuspensionState200Response struct {
}

func (response UpdateDAGSuspensionState200Response) VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateDAGSuspensionState404JSONResponse Error

func (response UpdateDAGSuspensionState404JSONResponse) VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGSuspensionStatedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateDAGSuspensionStatedefaultJSONResponse) VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealthStatusRequestObject struct {
}

type GetHealthStatusResponseObject interface {
	VisitGetHealthStatusResponse(w http.ResponseWriter) error
}

type GetHealthStatus200JSONResponse HealthResponse

func (response GetHealthStatus200JSONResponse) VisitGetHealthStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthStatusdefaultResponse struct {
	StatusCode int
}

func (response GetHealthStatusdefaultResponse) VisitGetHealthStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetDAGRunLogRequestObject struct {
	DagName   DAGName   `json:"dagName"`
	RequestId RequestId `json:"requestId"`
	Params    GetDAGRunLogParams
}

type GetDAGRunLogResponseObject interface {
	VisitGetDAGRunLogResponse(w http.ResponseWriter) error
}

type GetDAGRunLog200JSONResponse Log

func (response GetDAGRunLog200JSONResponse) VisitGetDAGRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunLog404JSONResponse Error

func (response GetDAGRunLog404JSONResponse) VisitGetDAGRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGRunLogdefaultJSONResponse) VisitGetDAGRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGStepLogRequestObject struct {
	DagName   DAGName   `json:"dagName"`
	RequestId RequestId `json:"requestId"`
	StepName  StepName  `json:"stepName"`
	Params    GetDAGStepLogParams
}

type GetDAGStepLogResponseObject interface {
	VisitGetDAGStepLogResponse(w http.ResponseWriter) error
}

type GetDAGStepLog200JSONResponse Log

func (response GetDAGStepLog200JSONResponse) VisitGetDAGStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGStepLog404JSONResponse Error

func (response GetDAGStepLog404JSONResponse) VisitGetDAGStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGStepLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGStepLogdefaultJSONResponse) VisitGetDAGStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateDAGStepStatusRequestObject struct {
	DagName   DAGName   `json:"dagName"`
	RequestId RequestId `json:"requestId"`
	StepName  StepName  `json:"stepName"`
	Params    UpdateDAGStepStatusParams
	Body      *UpdateDAGStepStatusJSONRequestBody
}

type UpdateDAGStepStatusResponseObject interface {
	VisitUpdateDAGStepStatusResponse(w http.ResponseWriter) error
}

type UpdateDAGStepStatus200Response struct {
}

func (response UpdateDAGStepStatus200Response) VisitUpdateDAGStepStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateDAGStepStatus400JSONResponse Error

func (response UpdateDAGStepStatus400JSONResponse) VisitUpdateDAGStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGStepStatus404JSONResponse Error

func (response UpdateDAGStepStatus404JSONResponse) VisitUpdateDAGStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGStepStatusdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateDAGStepStatusdefaultJSONResponse) VisitUpdateDAGStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all available DAGs
	// (GET /dags)
	ListAllDAGs(ctx context.Context, request ListAllDAGsRequestObject) (ListAllDAGsResponseObject, error)
	// Create a new DAG definition
	// (POST /dags)
	CreateNewDAG(ctx context.Context, request CreateNewDAGRequestObject) (CreateNewDAGResponseObject, error)
	// Search across all DAG definitions
	// (GET /dags/search)
	SearchDAGDefinitions(ctx context.Context, request SearchDAGDefinitionsRequestObject) (SearchDAGDefinitionsResponseObject, error)
	// List all available DAG tags
	// (GET /dags/tags)
	GetAllDAGTags(ctx context.Context, request GetAllDAGTagsRequestObject) (GetAllDAGTagsResponseObject, error)
	// Delete an existing DAG
	// (DELETE /dags/{fileId})
	DeleteDAGByFileId(ctx context.Context, request DeleteDAGByFileIdRequestObject) (DeleteDAGByFileIdResponseObject, error)
	// Retrieve comprehensive DAG information
	// (GET /dags/{fileId})
	GetDAGDetails(ctx context.Context, request GetDAGDetailsRequestObject) (GetDAGDetailsResponseObject, error)
	// Change DAG file ID
	// (POST /dags/{fileId}/rename)
	RenameDAG(ctx context.Context, request RenameDAGRequestObject) (RenameDAGResponseObject, error)
	// Retry DAG execution
	// (POST /dags/{fileId}/retry)
	RetryDAGExecution(ctx context.Context, request RetryDAGExecutionRequestObject) (RetryDAGExecutionResponseObject, error)
	// Retrieve execution history of a DAG
	// (GET /dags/{fileId}/runs)
	GetDAGExecutionHistory(ctx context.Context, request GetDAGExecutionHistoryRequestObject) (GetDAGExecutionHistoryResponseObject, error)
	// Get detailed status of a specific DAG run
	// (GET /dags/{fileId}/runs/{requestId})
	GetDAGRunDetails(ctx context.Context, request GetDAGRunDetailsRequestObject) (GetDAGRunDetailsResponseObject, error)
	// Retrieve DAG definition
	// (GET /dags/{fileId}/spec)
	GetDAGDefinition(ctx context.Context, request GetDAGDefinitionRequestObject) (GetDAGDefinitionResponseObject, error)
	// Update DAG definition
	// (PUT /dags/{fileId}/spec)
	UpdateDAGDefinition(ctx context.Context, request UpdateDAGDefinitionRequestObject) (UpdateDAGDefinitionResponseObject, error)
	// Initiate DAG execution
	// (POST /dags/{fileId}/start)
	ExecuteDAG(ctx context.Context, request ExecuteDAGRequestObject) (ExecuteDAGResponseObject, error)
	// Terminate running DAG execution
	// (POST /dags/{fileId}/stop)
	TerminateDAGExecution(ctx context.Context, request TerminateDAGExecutionRequestObject) (TerminateDAGExecutionResponseObject, error)
	// Toggle DAG suspension state
	// (POST /dags/{fileId}/suspend)
	UpdateDAGSuspensionState(ctx context.Context, request UpdateDAGSuspensionStateRequestObject) (UpdateDAGSuspensionStateResponseObject, error)
	// Check server health status
	// (GET /health)
	GetHealthStatus(ctx context.Context, request GetHealthStatusRequestObject) (GetHealthStatusResponseObject, error)
	// Retrieve full execution log of a DAG run
	// (GET /runs/{dagName}/{requestId}/log)
	GetDAGRunLog(ctx context.Context, request GetDAGRunLogRequestObject) (GetDAGRunLogResponseObject, error)
	// Retrieve log for a specific step in a DAG run
	// (GET /runs/{dagName}/{requestId}/steps/{stepName}/log)
	GetDAGStepLog(ctx context.Context, request GetDAGStepLogRequestObject) (GetDAGStepLogResponseObject, error)
	// Manually update a step's execution status
	// (PATCH /runs/{dagName}/{requestId}/steps/{stepName}/status)
	UpdateDAGStepStatus(ctx context.Context, request UpdateDAGStepStatusRequestObject) (UpdateDAGStepStatusResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListAllDAGs operation middleware
func (sh *strictHandler) ListAllDAGs(w http.ResponseWriter, r *http.Request, params ListAllDAGsParams) {
	var request ListAllDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAllDAGs(ctx, request.(ListAllDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAllDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAllDAGsResponseObject); ok {
		if err := validResponse.VisitListAllDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateNewDAG operation middleware
func (sh *strictHandler) CreateNewDAG(w http.ResponseWriter, r *http.Request, params CreateNewDAGParams) {
	var request CreateNewDAGRequestObject

	request.Params = params

	var body CreateNewDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateNewDAG(ctx, request.(CreateNewDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateNewDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateNewDAGResponseObject); ok {
		if err := validResponse.VisitCreateNewDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchDAGDefinitions operation middleware
func (sh *strictHandler) SearchDAGDefinitions(w http.ResponseWriter, r *http.Request, params SearchDAGDefinitionsParams) {
	var request SearchDAGDefinitionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchDAGDefinitions(ctx, request.(SearchDAGDefinitionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchDAGDefinitions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchDAGDefinitionsResponseObject); ok {
		if err := validResponse.VisitSearchDAGDefinitionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllDAGTags operation middleware
func (sh *strictHandler) GetAllDAGTags(w http.ResponseWriter, r *http.Request, params GetAllDAGTagsParams) {
	var request GetAllDAGTagsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllDAGTags(ctx, request.(GetAllDAGTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllDAGTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllDAGTagsResponseObject); ok {
		if err := validResponse.VisitGetAllDAGTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDAGByFileId operation middleware
func (sh *strictHandler) DeleteDAGByFileId(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params DeleteDAGByFileIdParams) {
	var request DeleteDAGByFileIdRequestObject

	request.FileId = fileId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDAGByFileId(ctx, request.(DeleteDAGByFileIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDAGByFileId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDAGByFileIdResponseObject); ok {
		if err := validResponse.VisitDeleteDAGByFileIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGDetails operation middleware
func (sh *strictHandler) GetDAGDetails(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params GetDAGDetailsParams) {
	var request GetDAGDetailsRequestObject

	request.FileId = fileId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGDetails(ctx, request.(GetDAGDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RenameDAG operation middleware
func (sh *strictHandler) RenameDAG(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params RenameDAGParams) {
	var request RenameDAGRequestObject

	request.FileId = fileId
	request.Params = params

	var body RenameDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RenameDAG(ctx, request.(RenameDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RenameDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RenameDAGResponseObject); ok {
		if err := validResponse.VisitRenameDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RetryDAGExecution operation middleware
func (sh *strictHandler) RetryDAGExecution(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params RetryDAGExecutionParams) {
	var request RetryDAGExecutionRequestObject

	request.FileId = fileId
	request.Params = params

	var body RetryDAGExecutionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RetryDAGExecution(ctx, request.(RetryDAGExecutionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RetryDAGExecution")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RetryDAGExecutionResponseObject); ok {
		if err := validResponse.VisitRetryDAGExecutionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGExecutionHistory operation middleware
func (sh *strictHandler) GetDAGExecutionHistory(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params GetDAGExecutionHistoryParams) {
	var request GetDAGExecutionHistoryRequestObject

	request.FileId = fileId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGExecutionHistory(ctx, request.(GetDAGExecutionHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGExecutionHistory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGExecutionHistoryResponseObject); ok {
		if err := validResponse.VisitGetDAGExecutionHistoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGRunDetails operation middleware
func (sh *strictHandler) GetDAGRunDetails(w http.ResponseWriter, r *http.Request, fileId DAGFileId, requestId RequestId, params GetDAGRunDetailsParams) {
	var request GetDAGRunDetailsRequestObject

	request.FileId = fileId
	request.RequestId = requestId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGRunDetails(ctx, request.(GetDAGRunDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGRunDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGRunDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGRunDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGDefinition operation middleware
func (sh *strictHandler) GetDAGDefinition(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params GetDAGDefinitionParams) {
	var request GetDAGDefinitionRequestObject

	request.FileId = fileId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGDefinition(ctx, request.(GetDAGDefinitionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGDefinition")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGDefinitionResponseObject); ok {
		if err := validResponse.VisitGetDAGDefinitionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDAGDefinition operation middleware
func (sh *strictHandler) UpdateDAGDefinition(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params UpdateDAGDefinitionParams) {
	var request UpdateDAGDefinitionRequestObject

	request.FileId = fileId
	request.Params = params

	var body UpdateDAGDefinitionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDAGDefinition(ctx, request.(UpdateDAGDefinitionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDAGDefinition")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDAGDefinitionResponseObject); ok {
		if err := validResponse.VisitUpdateDAGDefinitionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExecuteDAG operation middleware
func (sh *strictHandler) ExecuteDAG(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params ExecuteDAGParams) {
	var request ExecuteDAGRequestObject

	request.FileId = fileId
	request.Params = params

	var body ExecuteDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExecuteDAG(ctx, request.(ExecuteDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExecuteDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExecuteDAGResponseObject); ok {
		if err := validResponse.VisitExecuteDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TerminateDAGExecution operation middleware
func (sh *strictHandler) TerminateDAGExecution(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params TerminateDAGExecutionParams) {
	var request TerminateDAGExecutionRequestObject

	request.FileId = fileId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TerminateDAGExecution(ctx, request.(TerminateDAGExecutionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TerminateDAGExecution")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TerminateDAGExecutionResponseObject); ok {
		if err := validResponse.VisitTerminateDAGExecutionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDAGSuspensionState operation middleware
func (sh *strictHandler) UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request, fileId DAGFileId, params UpdateDAGSuspensionStateParams) {
	var request UpdateDAGSuspensionStateRequestObject

	request.FileId = fileId
	request.Params = params

	var body UpdateDAGSuspensionStateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDAGSuspensionState(ctx, request.(UpdateDAGSuspensionStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDAGSuspensionState")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDAGSuspensionStateResponseObject); ok {
		if err := validResponse.VisitUpdateDAGSuspensionStateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealthStatus operation middleware
func (sh *strictHandler) GetHealthStatus(w http.ResponseWriter, r *http.Request) {
	var request GetHealthStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealthStatus(ctx, request.(GetHealthStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealthStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthStatusResponseObject); ok {
		if err := validResponse.VisitGetHealthStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGRunLog operation middleware
func (sh *strictHandler) GetDAGRunLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, params GetDAGRunLogParams) {
	var request GetDAGRunLogRequestObject

	request.DagName = dagName
	request.RequestId = requestId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGRunLog(ctx, request.(GetDAGRunLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGRunLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGRunLogResponseObject); ok {
		if err := validResponse.VisitGetDAGRunLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGStepLog operation middleware
func (sh *strictHandler) GetDAGStepLog(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, stepName StepName, params GetDAGStepLogParams) {
	var request GetDAGStepLogRequestObject

	request.DagName = dagName
	request.RequestId = requestId
	request.StepName = stepName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGStepLog(ctx, request.(GetDAGStepLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGStepLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGStepLogResponseObject); ok {
		if err := validResponse.VisitGetDAGStepLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDAGStepStatus operation middleware
func (sh *strictHandler) UpdateDAGStepStatus(w http.ResponseWriter, r *http.Request, dagName DAGName, requestId RequestId, stepName StepName, params UpdateDAGStepStatusParams) {
	var request UpdateDAGStepStatusRequestObject

	request.DagName = dagName
	request.RequestId = requestId
	request.StepName = stepName
	request.Params = params

	var body UpdateDAGStepStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDAGStepStatus(ctx, request.(UpdateDAGStepStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDAGStepStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDAGStepStatusResponseObject); ok {
		if err := validResponse.VisitUpdateDAGStepStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
