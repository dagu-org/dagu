// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	ApiTokenScopes  = "apiToken.Scopes"
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for ErrorCode.
const (
	ErrorCodeAlreadyExists   ErrorCode = "already_exists"
	ErrorCodeAlreadyRunning  ErrorCode = "already_running"
	ErrorCodeBadGateway      ErrorCode = "bad_gateway"
	ErrorCodeBadRequest      ErrorCode = "bad_request"
	ErrorCodeForbidden       ErrorCode = "forbidden"
	ErrorCodeInternalError   ErrorCode = "internal_error"
	ErrorCodeNotFound        ErrorCode = "not_found"
	ErrorCodeNotRunning      ErrorCode = "not_running"
	ErrorCodeRemoteNodeError ErrorCode = "remote_node_error"
	ErrorCodeUnauthorized    ErrorCode = "unauthorized"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusHealthy   HealthResponseStatus = "healthy"
	HealthResponseStatusUnhealthy HealthResponseStatus = "unhealthy"
)

// Defines values for NodeStatus.
const (
	NodeStatusCancelled  NodeStatus = 3
	NodeStatusFailed     NodeStatus = 2
	NodeStatusNotStarted NodeStatus = 0
	NodeStatusRunning    NodeStatus = 1
	NodeStatusSkipped    NodeStatus = 5
	NodeStatusSuccess    NodeStatus = 4
)

// Defines values for NodeStatusLabel.
const (
	NodeStatusLabelCanceled   NodeStatusLabel = "canceled"
	NodeStatusLabelFailed     NodeStatusLabel = "failed"
	NodeStatusLabelFinished   NodeStatusLabel = "finished"
	NodeStatusLabelNotStarted NodeStatusLabel = "not started"
	NodeStatusLabelRunning    NodeStatusLabel = "running"
	NodeStatusLabelSkipped    NodeStatusLabel = "skipped"
)

// Defines values for RepeatPolicyRepeat.
const (
	RepeatPolicyRepeatEmpty RepeatPolicyRepeat = ""
	RepeatPolicyRepeatUntil RepeatPolicyRepeat = "until"
	RepeatPolicyRepeatWhile RepeatPolicyRepeat = "while"
)

// Defines values for Status.
const (
	StatusCancelled      Status = 3
	StatusFailed         Status = 2
	StatusNotStarted     Status = 0
	StatusPartialSuccess Status = 6
	StatusQueued         Status = 5
	StatusRunning        Status = 1
	StatusSuccess        Status = 4
)

// Defines values for StatusLabel.
const (
	StatusLabelCancelled      StatusLabel = "cancelled"
	StatusLabelFailed         StatusLabel = "failed"
	StatusLabelFinished       StatusLabel = "finished"
	StatusLabelNotStarted     StatusLabel = "not started"
	StatusLabelPartialSuccess StatusLabel = "partial success"
	StatusLabelQueued         StatusLabel = "queued"
	StatusLabelRunning        StatusLabel = "running"
)

// Defines values for Stream.
const (
	StreamStderr Stream = "stderr"
	StreamStdout Stream = "stdout"
)

// ChildDAGRun Metadata for a child DAG-run
type ChildDAGRun struct {
	// DagRunId Unique identifier for the DAG-run
	DagRunId DAGRunId `json:"dagRunId"`

	// Params Parameters passed to the child DAG-run in JSON format
	Params string `json:"params"`
}

// Condition Precondition that must be satisfied before running a step or DAG-run
type Condition struct {
	// Condition Expression or check to evaluate
	Condition string `json:"condition"`

	// Error Error message if the condition is not met
	Error *string `json:"error,omitempty"`

	// Expected Expected result of the condition evaluation
	Expected *string `json:"expected,omitempty"`

	// Matched Whether the condition was met
	Matched *bool `json:"matched,omitempty"`
}

// DAG Core DAG configuration containing definition and metadata
type DAG struct {
	// DefaultParams Default parameter values in JSON format if not specified at DAG-run creation
	DefaultParams *string `json:"defaultParams,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description *string `json:"description,omitempty"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"group,omitempty"`

	// Name Logical name of the DAG
	Name string `json:"name"`

	// Params List of parameter names that can be passed to DAG-runs created from this DAG
	Params *[]string `json:"params,omitempty"`

	// Schedule List of scheduling expressions defining when DAG-runs should be created from this DAG
	Schedule *[]Schedule `json:"schedule,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"tags,omitempty"`
}

// DAGDetails Detailed DAG configuration information
type DAGDetails struct {
	// DefaultParams Default parameter values in JSON format if not specified at DAG-run creation
	DefaultParams *string `json:"defaultParams,omitempty"`

	// Delay Time in seconds to wait before starting a DAG-run
	Delay *int `json:"delay,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description *string `json:"description,omitempty"`

	// Env List of environment variables to set before executing a DAG-run
	Env *[]string `json:"env,omitempty"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"group,omitempty"`

	// HandlerOn Configuration for event handlers in a DAG-run
	HandlerOn *HandlerOn `json:"handlerOn,omitempty"`

	// HistRetentionDays Number of days to retain historical logs
	HistRetentionDays *int `json:"histRetentionDays,omitempty"`

	// LogDir Directory path for storing log files
	LogDir *string `json:"logDir,omitempty"`

	// MaxActiveDAGRuns Maximum number of concurrent DAG-runs allowed from this DAG
	MaxActiveDAGRuns *int `json:"maxActiveDAGRuns,omitempty"`

	// MaxActiveSteps Maximum number of concurrent DAG-runs allowed from this DAG
	MaxActiveSteps *int `json:"maxActiveSteps,omitempty"`

	// Name Unique identifier for the DAG within its group
	Name string `json:"name"`

	// Params List of parameter names that can be passed to DAG-runs created from this DAG
	Params *[]string `json:"params,omitempty"`

	// Preconditions Conditions that must be met before a DAG-run can start
	Preconditions *[]Condition `json:"preconditions,omitempty"`

	// Schedule List of scheduling expressions defining when DAG-runs should be created from this DAG
	Schedule *[]Schedule `json:"schedule,omitempty"`

	// Steps List of steps to execute in DAG-runs created from this DAG
	Steps *[]Step `json:"steps,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"tags,omitempty"`
}

// DAGFile DAG file with its status information
type DAGFile struct {
	// Dag Core DAG configuration containing definition and metadata
	Dag DAG `json:"dag"`

	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// FileName File ID of the DAG file
	FileName string `json:"fileName"`

	// LatestDAGRun Current status of a DAG-run
	LatestDAGRun DAGRunSummary `json:"latestDAGRun"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"suspended"`
}

// DAGFileName Name of the DAG file
type DAGFileName = string

// DAGGridItem Grid item for visualizing DAG-run execution history
type DAGGridItem struct {
	// History Status of the step ordered by time
	History []NodeStatus `json:"history"`

	// Name Name of the step
	Name string `json:"name"`
}

// DAGName Name of the DAG
type DAGName = string

// DAGRunDetails defines model for DAGRunDetails.
type DAGRunDetails struct {
	// DagRunId Unique identifier for the DAG-run
	DagRunId DAGRunId `json:"dagRunId"`

	// FinishedAt RFC 3339 timestamp when the DAG-run finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to the log file
	Log string `json:"log"`

	// Name Name of the DAG
	Name DAGName `json:"name"`

	// Nodes Status of individual steps within the DAG-run
	Nodes []Node `json:"nodes"`

	// OnCancel Status of an individual step within a DAG-run
	OnCancel *Node `json:"onCancel,omitempty"`

	// OnExit Status of an individual step within a DAG-run
	OnExit *Node `json:"onExit,omitempty"`

	// OnFailure Status of an individual step within a DAG-run
	OnFailure *Node `json:"onFailure,omitempty"`

	// OnSuccess Status of an individual step within a DAG-run
	OnSuccess *Node `json:"onSuccess,omitempty"`

	// Params Runtime parameters passed to the DAG-run in JSON format
	Params *string `json:"params,omitempty"`

	// ParentDAGRunId ID of the parent DAG-run
	ParentDAGRunId *string `json:"parentDAGRunId,omitempty"`

	// ParentDAGRunName Name of the parent DAG-run
	ParentDAGRunName *string `json:"parentDAGRunName,omitempty"`

	// Preconditions List of preconditions that must be met before the DAG-run can start
	Preconditions *[]Condition `json:"preconditions,omitempty"`

	// QueuedAt RFC 3339 timestamp when the DAG-run was queued
	QueuedAt *string `json:"queuedAt,omitempty"`

	// RootDAGRunId ID of the root DAG-run
	RootDAGRunId string `json:"rootDAGRunId"`

	// RootDAGRunName Name of the root DAG-run
	RootDAGRunName string `json:"rootDAGRunName"`

	// StartedAt RFC 3339 timestamp when the DAG-run started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current DAG-run state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Queued"
	// 6: "Partial Success"
	Status Status `json:"status"`

	// StatusLabel Human-readable status description for the DAG-run
	StatusLabel StatusLabel `json:"statusLabel"`
}

// DAGRunId Unique identifier for the DAG-run
type DAGRunId = string

// DAGRunSummary Current status of a DAG-run
type DAGRunSummary struct {
	// DagRunId Unique identifier for the DAG-run
	DagRunId DAGRunId `json:"dagRunId"`

	// FinishedAt RFC 3339 timestamp when the DAG-run finished
	FinishedAt string `json:"finishedAt"`

	// Log Path to the log file
	Log string `json:"log"`

	// Name Name of the DAG
	Name DAGName `json:"name"`

	// Params Runtime parameters passed to the DAG-run in JSON format
	Params *string `json:"params,omitempty"`

	// ParentDAGRunId ID of the parent DAG-run
	ParentDAGRunId *string `json:"parentDAGRunId,omitempty"`

	// ParentDAGRunName Name of the parent DAG-run
	ParentDAGRunName *string `json:"parentDAGRunName,omitempty"`

	// QueuedAt RFC 3339 timestamp when the DAG-run was queued
	QueuedAt *string `json:"queuedAt,omitempty"`

	// RootDAGRunId ID of the root DAG-run
	RootDAGRunId string `json:"rootDAGRunId"`

	// RootDAGRunName Name of the root DAG-run
	RootDAGRunName string `json:"rootDAGRunName"`

	// StartedAt RFC 3339 timestamp when the DAG-run started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current DAG-run state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Queued"
	// 6: "Partial Success"
	Status Status `json:"status"`

	// StatusLabel Human-readable status description for the DAG-run
	StatusLabel StatusLabel `json:"statusLabel"`
}

// Error Generic error response object
type Error struct {
	// Code Error code indicating the type of error
	Code ErrorCode `json:"code"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Short error message
	Message string `json:"message"`
}

// ErrorCode Error code indicating the type of error
type ErrorCode string

// HandlerOn Configuration for event handlers in a DAG-run
type HandlerOn struct {
	// Cancel Individual task definition that performs a specific operation in a DAG-run
	Cancel *Step `json:"cancel,omitempty"`

	// Exit Individual task definition that performs a specific operation in a DAG-run
	Exit *Step `json:"exit,omitempty"`

	// Failure Individual task definition that performs a specific operation in a DAG-run
	Failure *Step `json:"failure,omitempty"`

	// Success Individual task definition that performs a specific operation in a DAG-run
	Success *Step `json:"success,omitempty"`
}

// HealthResponse Response object for the health check endpoint
type HealthResponse struct {
	// Status Overall health status of the server
	Status HealthResponseStatus `json:"status"`

	// Timestamp Current server time
	Timestamp string `json:"timestamp"`

	// Uptime Server uptime in seconds
	Uptime int `json:"uptime"`

	// Version Current version of the server
	Version string `json:"version"`
}

// HealthResponseStatus Overall health status of the server
type HealthResponseStatus string

// ListTagResponse Response object for listing all tags
type ListTagResponse struct {
	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// Tags List of unique tags
	Tags []string `json:"tags"`
}

// LocalDag defines model for LocalDag.
type LocalDag struct {
	// Dag Detailed DAG configuration information
	Dag *DAGDetails `json:"dag,omitempty"`

	// Errors List of errors encountered while processing the local DAG
	Errors []string `json:"errors"`

	// Name Name of the local DAG
	Name string `json:"name"`
}

// Log Log information for the execution
type Log struct {
	// Content Log content
	Content string `json:"content"`

	// HasMore Whether there are more lines available
	HasMore *bool `json:"hasMore,omitempty"`

	// IsEstimate Whether the line count is an estimate
	IsEstimate *bool `json:"isEstimate,omitempty"`

	// LineCount Number of lines returned
	LineCount *int `json:"lineCount,omitempty"`

	// TotalLines Total number of lines in the log file
	TotalLines *int `json:"totalLines,omitempty"`
}

// Node Status of an individual step within a DAG-run
type Node struct {
	// Children List of child DAG-runs associated with this step
	Children *[]ChildDAGRun `json:"children,omitempty"`

	// ChildrenRepeated List of repeated child DAG-runs when using repeatPolicy
	ChildrenRepeated *[]ChildDAGRun `json:"childrenRepeated,omitempty"`

	// DoneCount Number of successful completions for repeating steps
	DoneCount int `json:"doneCount"`

	// Error Error message if the step failed
	Error *string `json:"error,omitempty"`

	// FinishedAt RFC3339 timestamp when the step finished
	FinishedAt string `json:"finishedAt"`

	// RetryCount Number of retry attempts made for this step
	RetryCount int `json:"retryCount"`

	// StartedAt RFC3339 timestamp when the step started
	StartedAt string `json:"startedAt"`

	// Status Numeric status code indicating current node state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Skipped"
	Status NodeStatus `json:"status"`

	// StatusLabel Human-readable status description for the node
	StatusLabel NodeStatusLabel `json:"statusLabel"`

	// Stderr Path to the standard error log file for this step
	Stderr string `json:"stderr"`

	// Stdout Path to the standard output log file for this step
	Stdout string `json:"stdout"`

	// Step Individual task definition that performs a specific operation in a DAG-run
	Step Step `json:"step"`
}

// NodeStatus Numeric status code indicating current node state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
// 5: "Skipped"
type NodeStatus int

// NodeStatusLabel Human-readable status description for the node
type NodeStatusLabel string

// Pagination defines model for Pagination.
type Pagination struct {
	// CurrentPage current page number
	CurrentPage int `json:"currentPage"`

	// NextPage next page number
	NextPage int `json:"nextPage"`

	// PrevPage previous page number
	PrevPage int `json:"prevPage"`

	// TotalPages total number of pages
	TotalPages int `json:"totalPages"`

	// TotalRecords total number of records
	TotalRecords int `json:"totalRecords"`
}

// RepeatPolicy Configuration for step repeat behavior
type RepeatPolicy struct {
	// Condition Precondition that must be satisfied before running a step or DAG-run
	Condition *Condition `json:"condition,omitempty"`

	// ExitCode List of exit codes that trigger repeat behavior
	ExitCode *[]int `json:"exitCode,omitempty"`

	// Interval Time in seconds to wait between repeat attempts
	Interval *int `json:"interval,omitempty"`

	// Limit Maximum number of times to repeat the step
	Limit *int `json:"limit,omitempty"`

	// Repeat Repeat mode - 'while' repeats while condition is true, 'until' repeats until condition is true
	Repeat *RepeatPolicyRepeat `json:"repeat,omitempty"`
}

// RepeatPolicyRepeat Repeat mode - 'while' repeats while condition is true, 'until' repeats until condition is true
type RepeatPolicyRepeat string

// Schedule Schedule configuration for DAG-run creation
type Schedule struct {
	// Expression Cron expression or schedule pattern
	Expression string `json:"expression"`
}

// SearchDAGsMatchItem Details of a search match within a DAG definition
type SearchDAGsMatchItem struct {
	// Line Matching line content
	Line string `json:"line"`

	// LineNumber Line number where match was found
	LineNumber int `json:"lineNumber"`

	// StartLine Start line for context
	StartLine int `json:"startLine"`
}

// SearchResultItem Individual search result item for a DAG
type SearchResultItem struct {
	// Dag Core DAG configuration containing definition and metadata
	Dag DAG `json:"dag"`

	// Matches Details of where matches were found
	Matches []SearchDAGsMatchItem `json:"matches"`

	// Name Name of the matching DAG
	Name string `json:"name"`
}

// Status Numeric status code indicating current DAG-run state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
// 5: "Queued"
// 6: "Partial Success"
type Status int

// StatusLabel Human-readable status description for the DAG-run
type StatusLabel string

// Step Individual task definition that performs a specific operation in a DAG-run
type Step struct {
	// Args List of arguments to pass to the command
	Args *[]string `json:"args,omitempty"`

	// CmdWithArgs Complete command string including arguments to execute
	CmdWithArgs *string `json:"cmdWithArgs,omitempty"`

	// Command Base command to execute without arguments
	Command *string `json:"command,omitempty"`

	// Depends List of step names that must complete before this step can start
	Depends *[]string `json:"depends,omitempty"`

	// Description Human-readable description of what the step does
	Description *string `json:"description,omitempty"`

	// Dir Working directory for executing the step's command
	Dir *string `json:"dir,omitempty"`

	// Id Optional short identifier for the step. Can be used in variable references like ${id.stdout} to access step properties. Must be unique within the DAG if specified
	Id *string `json:"id,omitempty"`

	// MailOnError Whether to send email notifications on step failure
	MailOnError *bool `json:"mailOnError,omitempty"`

	// Name Unique identifier for the step within the DAG-run
	Name string `json:"name"`

	// Output Variable name to store the step's output
	Output *string `json:"output,omitempty"`

	// Params Parameters to pass to the child DAG-run in JSON format
	Params *string `json:"params,omitempty"`

	// Preconditions Conditions that must be met before the step can start
	Preconditions *[]Condition `json:"preconditions,omitempty"`

	// RepeatPolicy Configuration for step repeat behavior
	RepeatPolicy *RepeatPolicy `json:"repeatPolicy,omitempty"`

	// Run The name of the DAG to run as a child DAG-run
	Run *string `json:"run,omitempty"`

	// Script Script content if the step executes a script file
	Script *string `json:"script,omitempty"`

	// Stderr File path for capturing standard error
	Stderr *string `json:"stderr,omitempty"`

	// Stdout File path for capturing standard output
	Stdout *string `json:"stdout,omitempty"`
}

// Stream defines model for Stream.
type Stream string

// UnixTimestamp Unix timestamp in seconds
type UnixTimestamp = int64

// DAGRunIdSearch Unique identifier for the DAG-run
type DAGRunIdSearch = DAGRunId

// DAGRunName defines model for DAGRunName.
type DAGRunName = string

// DateTimeFrom Unix timestamp in seconds
type DateTimeFrom = UnixTimestamp

// DateTimeTo Unix timestamp in seconds
type DateTimeTo = UnixTimestamp

// Head defines model for Head.
type Head = int

// Limit defines model for Limit.
type Limit = int

// Offset defines model for Offset.
type Offset = int

// Page defines model for Page.
type Page = int

// PerPage defines model for PerPage.
type PerPage = int

// RemoteNode defines model for RemoteNode.
type RemoteNode = string

// StepName defines model for StepName.
type StepName = string

// Tail defines model for Tail.
type Tail = int

// ListDAGRunsParams defines parameters for ListDAGRuns.
type ListDAGRunsParams struct {
	// Status status of the DAG-run
	Status *Status `form:"status,omitempty" json:"status,omitempty"`

	// FromDate start datetime for filtering DAG-runs in ISO 8601 format with timezone
	FromDate *DateTimeFrom `form:"fromDate,omitempty" json:"fromDate,omitempty"`

	// ToDate end datetime for filtering DAG-runs in ISO 8601 format with timezone
	ToDate *DateTimeTo `form:"toDate,omitempty" json:"toDate,omitempty"`

	// DagRunId ID of the DAG-run or 'latest' to get the most recent DAG-run
	DagRunId *DAGRunIdSearch `form:"dagRunId,omitempty" json:"dagRunId,omitempty"`

	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Name Filter DAG-runs by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// ListDAGRunsByNameParams defines parameters for ListDAGRunsByName.
type ListDAGRunsByNameParams struct {
	// Status status of the DAG-run
	Status *Status `form:"status,omitempty" json:"status,omitempty"`

	// FromDate start datetime for filtering DAG-runs in ISO 8601 format with timezone
	FromDate *DateTimeFrom `form:"fromDate,omitempty" json:"fromDate,omitempty"`

	// ToDate end datetime for filtering DAG-runs in ISO 8601 format with timezone
	ToDate *DateTimeTo `form:"toDate,omitempty" json:"toDate,omitempty"`

	// DagRunId ID of the DAG-run or 'latest' to get the most recent DAG-run
	DagRunId *DAGRunIdSearch `form:"dagRunId,omitempty" json:"dagRunId,omitempty"`

	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGRunDetailsParams defines parameters for GetDAGRunDetails.
type GetDAGRunDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetChildDAGRunDetailsParams defines parameters for GetChildDAGRunDetails.
type GetChildDAGRunDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetChildDAGRunLogParams defines parameters for GetChildDAGRunLog.
type GetChildDAGRunLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Tail Number of lines to return from the end of the file
	Tail *Tail `form:"tail,omitempty" json:"tail,omitempty"`

	// Head Number of lines to return from the beginning of the file
	Head *Head `form:"head,omitempty" json:"head,omitempty"`

	// Offset Line number to start reading from (1-based)
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of lines to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetChildDAGRunStepLogParams defines parameters for GetChildDAGRunStepLog.
type GetChildDAGRunStepLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Tail Number of lines to return from the end of the file
	Tail *Tail `form:"tail,omitempty" json:"tail,omitempty"`

	// Head Number of lines to return from the beginning of the file
	Head *Head `form:"head,omitempty" json:"head,omitempty"`

	// Offset Line number to start reading from (1-based)
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of lines to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Stream Whether to return stdout or stderr logs
	Stream *Stream `form:"stream,omitempty" json:"stream,omitempty"`
}

// UpdateChildDAGRunStepStatusJSONBody defines parameters for UpdateChildDAGRunStepStatus.
type UpdateChildDAGRunStepStatusJSONBody struct {
	// Status Numeric status code indicating current node state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Skipped"
	Status NodeStatus `json:"status"`
}

// UpdateChildDAGRunStepStatusParams defines parameters for UpdateChildDAGRunStepStatus.
type UpdateChildDAGRunStepStatusParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// DequeueDAGRunParams defines parameters for DequeueDAGRun.
type DequeueDAGRunParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGRunLogParams defines parameters for GetDAGRunLog.
type GetDAGRunLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Tail Number of lines to return from the end of the file
	Tail *Tail `form:"tail,omitempty" json:"tail,omitempty"`

	// Head Number of lines to return from the beginning of the file
	Head *Head `form:"head,omitempty" json:"head,omitempty"`

	// Offset Line number to start reading from (1-based)
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of lines to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// RetryDAGRunJSONBody defines parameters for RetryDAGRun.
type RetryDAGRunJSONBody struct {
	// DagRunId ID of the DAG-run to retry
	DagRunId string `json:"dagRunId"`

	// StepName Optional. If provided, only this step will be retried.
	StepName *string `json:"stepName,omitempty"`
}

// RetryDAGRunParams defines parameters for RetryDAGRun.
type RetryDAGRunParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGRunStepLogParams defines parameters for GetDAGRunStepLog.
type GetDAGRunStepLogParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Tail Number of lines to return from the end of the file
	Tail *Tail `form:"tail,omitempty" json:"tail,omitempty"`

	// Head Number of lines to return from the beginning of the file
	Head *Head `form:"head,omitempty" json:"head,omitempty"`

	// Offset Line number to start reading from (1-based)
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Maximum number of lines to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Stream Whether to return stdout or stderr logs
	Stream *Stream `form:"stream,omitempty" json:"stream,omitempty"`
}

// UpdateDAGRunStepStatusJSONBody defines parameters for UpdateDAGRunStepStatus.
type UpdateDAGRunStepStatusJSONBody struct {
	// Status Numeric status code indicating current node state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Skipped"
	Status NodeStatus `json:"status"`
}

// UpdateDAGRunStepStatusParams defines parameters for UpdateDAGRunStepStatus.
type UpdateDAGRunStepStatusParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// TerminateDAGRunParams defines parameters for TerminateDAGRun.
type TerminateDAGRunParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// ListDAGsParams defines parameters for ListDAGs.
type ListDAGsParams struct {
	// Page page number of items to fetch (default is 1)
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage number of items per page (default is 30, max is 100)
	PerPage *PerPage `form:"perPage,omitempty" json:"perPage,omitempty"`

	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Name Filter DAGs by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Tag Filter DAGs by tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`
}

// CreateNewDAGJSONBody defines parameters for CreateNewDAG.
type CreateNewDAGJSONBody struct {
	// Name Name of the DAG
	Name DAGName `json:"name"`
}

// CreateNewDAGParams defines parameters for CreateNewDAG.
type CreateNewDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// SearchDAGsParams defines parameters for SearchDAGs.
type SearchDAGsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`

	// Q A search query string
	Q string `form:"q" json:"q"`
}

// GetAllDAGTagsParams defines parameters for GetAllDAGTags.
type GetAllDAGTagsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// DeleteDAGParams defines parameters for DeleteDAG.
type DeleteDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGDetailsParams defines parameters for GetDAGDetails.
type GetDAGDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGDAGRunHistoryParams defines parameters for GetDAGDAGRunHistory.
type GetDAGDAGRunHistoryParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGDAGRunDetailsParams defines parameters for GetDAGDAGRunDetails.
type GetDAGDAGRunDetailsParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// EnqueueDAGDAGRunJSONBody defines parameters for EnqueueDAGDAGRun.
type EnqueueDAGDAGRunJSONBody struct {
	// DagRunId Optional ID for the DAG-run, if not provided a new one will be generated
	DagRunId *string `json:"dagRunId,omitempty"`

	// Params Parameters to pass to the DAG-run in JSON format
	Params *string `json:"params,omitempty"`
}

// EnqueueDAGDAGRunParams defines parameters for EnqueueDAGDAGRun.
type EnqueueDAGDAGRunParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// RenameDAGJSONBody defines parameters for RenameDAG.
type RenameDAGJSONBody struct {
	// NewFileName New file name for the DAG
	NewFileName string `json:"newFileName"`
}

// RenameDAGParams defines parameters for RenameDAG.
type RenameDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// GetDAGSpecParams defines parameters for GetDAGSpec.
type GetDAGSpecParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// UpdateDAGSpecJSONBody defines parameters for UpdateDAGSpec.
type UpdateDAGSpecJSONBody struct {
	// Spec The new DAG spec in YAML format
	Spec string `json:"spec"`
}

// UpdateDAGSpecParams defines parameters for UpdateDAGSpec.
type UpdateDAGSpecParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// ExecuteDAGJSONBody defines parameters for ExecuteDAG.
type ExecuteDAGJSONBody struct {
	// DagRunId Optional ID for the DAG-run, if not provided a new one will be generated
	DagRunId *string `json:"dagRunId,omitempty"`

	// Params Parameters to pass to the DAG-run in JSON format
	Params *string `json:"params,omitempty"`
}

// ExecuteDAGParams defines parameters for ExecuteDAG.
type ExecuteDAGParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// UpdateDAGSuspensionStateJSONBody defines parameters for UpdateDAGSuspensionState.
type UpdateDAGSuspensionStateJSONBody struct {
	// Suspend Suspend status to set for the DAG
	Suspend bool `json:"suspend"`
}

// UpdateDAGSuspensionStateParams defines parameters for UpdateDAGSuspensionState.
type UpdateDAGSuspensionStateParams struct {
	// RemoteNode name of the remote node
	RemoteNode *RemoteNode `form:"remoteNode,omitempty" json:"remoteNode,omitempty"`
}

// UpdateChildDAGRunStepStatusJSONRequestBody defines body for UpdateChildDAGRunStepStatus for application/json ContentType.
type UpdateChildDAGRunStepStatusJSONRequestBody UpdateChildDAGRunStepStatusJSONBody

// RetryDAGRunJSONRequestBody defines body for RetryDAGRun for application/json ContentType.
type RetryDAGRunJSONRequestBody RetryDAGRunJSONBody

// UpdateDAGRunStepStatusJSONRequestBody defines body for UpdateDAGRunStepStatus for application/json ContentType.
type UpdateDAGRunStepStatusJSONRequestBody UpdateDAGRunStepStatusJSONBody

// CreateNewDAGJSONRequestBody defines body for CreateNewDAG for application/json ContentType.
type CreateNewDAGJSONRequestBody CreateNewDAGJSONBody

// EnqueueDAGDAGRunJSONRequestBody defines body for EnqueueDAGDAGRun for application/json ContentType.
type EnqueueDAGDAGRunJSONRequestBody EnqueueDAGDAGRunJSONBody

// RenameDAGJSONRequestBody defines body for RenameDAG for application/json ContentType.
type RenameDAGJSONRequestBody RenameDAGJSONBody

// UpdateDAGSpecJSONRequestBody defines body for UpdateDAGSpec for application/json ContentType.
type UpdateDAGSpecJSONRequestBody UpdateDAGSpecJSONBody

// ExecuteDAGJSONRequestBody defines body for ExecuteDAG for application/json ContentType.
type ExecuteDAGJSONRequestBody ExecuteDAGJSONBody

// UpdateDAGSuspensionStateJSONRequestBody defines body for UpdateDAGSuspensionState for application/json ContentType.
type UpdateDAGSuspensionStateJSONRequestBody UpdateDAGSuspensionStateJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all DAG-runs
	// (GET /dag-runs)
	ListDAGRuns(w http.ResponseWriter, r *http.Request, params ListDAGRunsParams)
	// List all DAG-runs with a specific name
	// (GET /dag-runs/{name})
	ListDAGRunsByName(w http.ResponseWriter, r *http.Request, name DAGRunName, params ListDAGRunsByNameParams)
	// Retrieve detailed status of a DAG-run
	// (GET /dag-runs/{name}/{dagRunId})
	GetDAGRunDetails(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params GetDAGRunDetailsParams)
	// Retrieve detailed status of a child DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId})
	GetChildDAGRunDetails(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, params GetChildDAGRunDetailsParams)
	// Retrieve log for a specific child DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/log)
	GetChildDAGRunLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, params GetChildDAGRunLogParams)
	// Retrieve log for a specific step in a child DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/log)
	GetChildDAGRunStepLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, stepName StepName, params GetChildDAGRunStepLogParams)
	// Manually update a step's execution status in a child DAG-run
	// (PATCH /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/status)
	UpdateChildDAGRunStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, stepName StepName, params UpdateChildDAGRunStepStatusParams)
	// Dequeue a queued DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/dequeue)
	DequeueDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params DequeueDAGRunParams)
	// Retrieve full execution log of a DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/log)
	GetDAGRunLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params GetDAGRunLogParams)
	// Retry DAG-run execution
	// (POST /dag-runs/{name}/{dagRunId}/retry)
	RetryDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params RetryDAGRunParams)
	// Retrieve log for a specific step in a DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/steps/{stepName}/log)
	GetDAGRunStepLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, stepName StepName, params GetDAGRunStepLogParams)
	// Manually update a step's execution status
	// (PATCH /dag-runs/{name}/{dagRunId}/steps/{stepName}/status)
	UpdateDAGRunStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, stepName StepName, params UpdateDAGRunStepStatusParams)
	// Terminate a running DAG-run
	// (POST /dag-runs/{name}/{dagRunId}/stop)
	TerminateDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params TerminateDAGRunParams)
	// List all available DAGs
	// (GET /dags)
	ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams)
	// Create a new DAG definition
	// (POST /dags)
	CreateNewDAG(w http.ResponseWriter, r *http.Request, params CreateNewDAGParams)
	// Search DAGs
	// (GET /dags/search)
	SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams)
	// List all available DAG tags
	// (GET /dags/tags)
	GetAllDAGTags(w http.ResponseWriter, r *http.Request, params GetAllDAGTagsParams)
	// Delete an existing DAG
	// (DELETE /dags/{fileName})
	DeleteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params DeleteDAGParams)
	// Retrieve comprehensive DAG information
	// (GET /dags/{fileName})
	GetDAGDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDetailsParams)
	// Retrieve execution history of a DAG
	// (GET /dags/{fileName}/dag-runs)
	GetDAGDAGRunHistory(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDAGRunHistoryParams)
	// Get detailed status of a specific DAG-run
	// (GET /dags/{fileName}/dag-runs/{dagRunId})
	GetDAGDAGRunDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, dagRunId DAGRunId, params GetDAGDAGRunDetailsParams)
	// Enqueue a DAG-run from DAG
	// (POST /dags/{fileName}/enqueue)
	EnqueueDAGDAGRun(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params EnqueueDAGDAGRunParams)
	// Change DAG file ID
	// (POST /dags/{fileName}/rename)
	RenameDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RenameDAGParams)
	// Retrieve DAG specification
	// (GET /dags/{fileName}/spec)
	GetDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGSpecParams)
	// Update DAG spec
	// (PUT /dags/{fileName}/spec)
	UpdateDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSpecParams)
	// Create and execute a DAG-run from DAG
	// (POST /dags/{fileName}/start)
	ExecuteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params ExecuteDAGParams)
	// Toggle DAG suspension state
	// (POST /dags/{fileName}/suspend)
	UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSuspensionStateParams)
	// Check server health status
	// (GET /health)
	GetHealthStatus(w http.ResponseWriter, r *http.Request)
	// Get Prometheus metrics
	// (GET /metrics)
	GetMetrics(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all DAG-runs
// (GET /dag-runs)
func (_ Unimplemented) ListDAGRuns(w http.ResponseWriter, r *http.Request, params ListDAGRunsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all DAG-runs with a specific name
// (GET /dag-runs/{name})
func (_ Unimplemented) ListDAGRunsByName(w http.ResponseWriter, r *http.Request, name DAGRunName, params ListDAGRunsByNameParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve detailed status of a DAG-run
// (GET /dag-runs/{name}/{dagRunId})
func (_ Unimplemented) GetDAGRunDetails(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params GetDAGRunDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve detailed status of a child DAG-run
// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId})
func (_ Unimplemented) GetChildDAGRunDetails(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, params GetChildDAGRunDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve log for a specific child DAG-run
// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/log)
func (_ Unimplemented) GetChildDAGRunLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, params GetChildDAGRunLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve log for a specific step in a child DAG-run
// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/log)
func (_ Unimplemented) GetChildDAGRunStepLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, stepName StepName, params GetChildDAGRunStepLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Manually update a step's execution status in a child DAG-run
// (PATCH /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/status)
func (_ Unimplemented) UpdateChildDAGRunStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, stepName StepName, params UpdateChildDAGRunStepStatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Dequeue a queued DAG-run
// (GET /dag-runs/{name}/{dagRunId}/dequeue)
func (_ Unimplemented) DequeueDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params DequeueDAGRunParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve full execution log of a DAG-run
// (GET /dag-runs/{name}/{dagRunId}/log)
func (_ Unimplemented) GetDAGRunLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params GetDAGRunLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retry DAG-run execution
// (POST /dag-runs/{name}/{dagRunId}/retry)
func (_ Unimplemented) RetryDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params RetryDAGRunParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve log for a specific step in a DAG-run
// (GET /dag-runs/{name}/{dagRunId}/steps/{stepName}/log)
func (_ Unimplemented) GetDAGRunStepLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, stepName StepName, params GetDAGRunStepLogParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Manually update a step's execution status
// (PATCH /dag-runs/{name}/{dagRunId}/steps/{stepName}/status)
func (_ Unimplemented) UpdateDAGRunStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, stepName StepName, params UpdateDAGRunStepStatusParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Terminate a running DAG-run
// (POST /dag-runs/{name}/{dagRunId}/stop)
func (_ Unimplemented) TerminateDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params TerminateDAGRunParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all available DAGs
// (GET /dags)
func (_ Unimplemented) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new DAG definition
// (POST /dags)
func (_ Unimplemented) CreateNewDAG(w http.ResponseWriter, r *http.Request, params CreateNewDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search DAGs
// (GET /dags/search)
func (_ Unimplemented) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all available DAG tags
// (GET /dags/tags)
func (_ Unimplemented) GetAllDAGTags(w http.ResponseWriter, r *http.Request, params GetAllDAGTagsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete an existing DAG
// (DELETE /dags/{fileName})
func (_ Unimplemented) DeleteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params DeleteDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve comprehensive DAG information
// (GET /dags/{fileName})
func (_ Unimplemented) GetDAGDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve execution history of a DAG
// (GET /dags/{fileName}/dag-runs)
func (_ Unimplemented) GetDAGDAGRunHistory(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDAGRunHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get detailed status of a specific DAG-run
// (GET /dags/{fileName}/dag-runs/{dagRunId})
func (_ Unimplemented) GetDAGDAGRunDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, dagRunId DAGRunId, params GetDAGDAGRunDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Enqueue a DAG-run from DAG
// (POST /dags/{fileName}/enqueue)
func (_ Unimplemented) EnqueueDAGDAGRun(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params EnqueueDAGDAGRunParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Change DAG file ID
// (POST /dags/{fileName}/rename)
func (_ Unimplemented) RenameDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RenameDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Retrieve DAG specification
// (GET /dags/{fileName}/spec)
func (_ Unimplemented) GetDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGSpecParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update DAG spec
// (PUT /dags/{fileName}/spec)
func (_ Unimplemented) UpdateDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSpecParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create and execute a DAG-run from DAG
// (POST /dags/{fileName}/start)
func (_ Unimplemented) ExecuteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params ExecuteDAGParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Toggle DAG suspension state
// (POST /dags/{fileName}/suspend)
func (_ Unimplemented) UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSuspensionStateParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Check server health status
// (GET /health)
func (_ Unimplemented) GetHealthStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Prometheus metrics
// (GET /metrics)
func (_ Unimplemented) GetMetrics(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListDAGRuns operation middleware
func (siw *ServerInterfaceWrapper) ListDAGRuns(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDAGRunsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "fromDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromDate", r.URL.Query(), &params.FromDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fromDate", Err: err})
		return
	}

	// ------------- Optional query parameter "toDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "toDate", r.URL.Query(), &params.ToDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toDate", Err: err})
		return
	}

	// ------------- Optional query parameter "dagRunId" -------------

	err = runtime.BindQueryParameter("form", true, false, "dagRunId", r.URL.Query(), &params.DagRunId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDAGRuns(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListDAGRunsByName operation middleware
func (siw *ServerInterfaceWrapper) ListDAGRunsByName(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGRunName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDAGRunsByNameParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "fromDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "fromDate", r.URL.Query(), &params.FromDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fromDate", Err: err})
		return
	}

	// ------------- Optional query parameter "toDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "toDate", r.URL.Query(), &params.ToDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "toDate", Err: err})
		return
	}

	// ------------- Optional query parameter "dagRunId" -------------

	err = runtime.BindQueryParameter("form", true, false, "dagRunId", r.URL.Query(), &params.DagRunId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDAGRunsByName(w, r, name, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGRunDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGRunDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGRunDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGRunDetails(w, r, name, dagRunId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetChildDAGRunDetails operation middleware
func (siw *ServerInterfaceWrapper) GetChildDAGRunDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	// ------------- Path parameter "childDAGRunId" -------------
	var childDAGRunId string

	err = runtime.BindStyledParameterWithOptions("simple", "childDAGRunId", chi.URLParam(r, "childDAGRunId"), &childDAGRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "childDAGRunId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChildDAGRunDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChildDAGRunDetails(w, r, name, dagRunId, childDAGRunId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetChildDAGRunLog operation middleware
func (siw *ServerInterfaceWrapper) GetChildDAGRunLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	// ------------- Path parameter "childDAGRunId" -------------
	var childDAGRunId string

	err = runtime.BindStyledParameterWithOptions("simple", "childDAGRunId", chi.URLParam(r, "childDAGRunId"), &childDAGRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "childDAGRunId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChildDAGRunLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", r.URL.Query(), &params.Tail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tail", Err: err})
		return
	}

	// ------------- Optional query parameter "head" -------------

	err = runtime.BindQueryParameter("form", true, false, "head", r.URL.Query(), &params.Head)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "head", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChildDAGRunLog(w, r, name, dagRunId, childDAGRunId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetChildDAGRunStepLog operation middleware
func (siw *ServerInterfaceWrapper) GetChildDAGRunStepLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	// ------------- Path parameter "childDAGRunId" -------------
	var childDAGRunId string

	err = runtime.BindStyledParameterWithOptions("simple", "childDAGRunId", chi.URLParam(r, "childDAGRunId"), &childDAGRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "childDAGRunId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChildDAGRunStepLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", r.URL.Query(), &params.Tail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tail", Err: err})
		return
	}

	// ------------- Optional query parameter "head" -------------

	err = runtime.BindQueryParameter("form", true, false, "head", r.URL.Query(), &params.Head)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "head", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "stream" -------------

	err = runtime.BindQueryParameter("form", true, false, "stream", r.URL.Query(), &params.Stream)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stream", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChildDAGRunStepLog(w, r, name, dagRunId, childDAGRunId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateChildDAGRunStepStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateChildDAGRunStepStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	// ------------- Path parameter "childDAGRunId" -------------
	var childDAGRunId string

	err = runtime.BindStyledParameterWithOptions("simple", "childDAGRunId", chi.URLParam(r, "childDAGRunId"), &childDAGRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "childDAGRunId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateChildDAGRunStepStatusParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateChildDAGRunStepStatus(w, r, name, dagRunId, childDAGRunId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DequeueDAGRun operation middleware
func (siw *ServerInterfaceWrapper) DequeueDAGRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DequeueDAGRunParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DequeueDAGRun(w, r, name, dagRunId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGRunLog operation middleware
func (siw *ServerInterfaceWrapper) GetDAGRunLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGRunLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", r.URL.Query(), &params.Tail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tail", Err: err})
		return
	}

	// ------------- Optional query parameter "head" -------------

	err = runtime.BindQueryParameter("form", true, false, "head", r.URL.Query(), &params.Head)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "head", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGRunLog(w, r, name, dagRunId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RetryDAGRun operation middleware
func (siw *ServerInterfaceWrapper) RetryDAGRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params RetryDAGRunParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetryDAGRun(w, r, name, dagRunId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGRunStepLog operation middleware
func (siw *ServerInterfaceWrapper) GetDAGRunStepLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGRunStepLogParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "tail" -------------

	err = runtime.BindQueryParameter("form", true, false, "tail", r.URL.Query(), &params.Tail)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tail", Err: err})
		return
	}

	// ------------- Optional query parameter "head" -------------

	err = runtime.BindQueryParameter("form", true, false, "head", r.URL.Query(), &params.Head)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "head", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "stream" -------------

	err = runtime.BindQueryParameter("form", true, false, "stream", r.URL.Query(), &params.Stream)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stream", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGRunStepLog(w, r, name, dagRunId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDAGRunStepStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateDAGRunStepStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	// ------------- Path parameter "stepName" -------------
	var stepName StepName

	err = runtime.BindStyledParameterWithOptions("simple", "stepName", chi.URLParam(r, "stepName"), &stepName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateDAGRunStepStatusParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDAGRunStepStatus(w, r, name, dagRunId, stepName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// TerminateDAGRun operation middleware
func (siw *ServerInterfaceWrapper) TerminateDAGRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name DAGName

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params TerminateDAGRunParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TerminateDAGRun(w, r, name, dagRunId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListDAGs operation middleware
func (siw *ServerInterfaceWrapper) ListDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDAGsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", r.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "perPage", Err: err})
		return
	}

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", r.URL.Query(), &params.Tag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tag", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateNewDAG operation middleware
func (siw *ServerInterfaceWrapper) CreateNewDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateNewDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNewDAG(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchDAGs operation middleware
func (siw *ServerInterfaceWrapper) SearchDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchDAGsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	// ------------- Required query parameter "q" -------------

	if paramValue := r.URL.Query().Get("q"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "q"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAllDAGTags operation middleware
func (siw *ServerInterfaceWrapper) GetAllDAGTags(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllDAGTagsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllDAGTags(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteDAG operation middleware
func (siw *ServerInterfaceWrapper) DeleteDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDAG(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGDetails(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGDAGRunHistory operation middleware
func (siw *ServerInterfaceWrapper) GetDAGDAGRunHistory(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGDAGRunHistoryParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGDAGRunHistory(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGDAGRunDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGDAGRunDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	// ------------- Path parameter "dagRunId" -------------
	var dagRunId DAGRunId

	err = runtime.BindStyledParameterWithOptions("simple", "dagRunId", chi.URLParam(r, "dagRunId"), &dagRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "dagRunId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGDAGRunDetailsParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGDAGRunDetails(w, r, fileName, dagRunId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// EnqueueDAGDAGRun operation middleware
func (siw *ServerInterfaceWrapper) EnqueueDAGDAGRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params EnqueueDAGDAGRunParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EnqueueDAGDAGRun(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RenameDAG operation middleware
func (siw *ServerInterfaceWrapper) RenameDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params RenameDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RenameDAG(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGSpec operation middleware
func (siw *ServerInterfaceWrapper) GetDAGSpec(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGSpecParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGSpec(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDAGSpec operation middleware
func (siw *ServerInterfaceWrapper) UpdateDAGSpec(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateDAGSpecParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDAGSpec(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ExecuteDAG operation middleware
func (siw *ServerInterfaceWrapper) ExecuteDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ExecuteDAGParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExecuteDAG(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateDAGSuspensionState operation middleware
func (siw *ServerInterfaceWrapper) UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "fileName" -------------
	var fileName DAGFileName

	err = runtime.BindStyledParameterWithOptions("simple", "fileName", chi.URLParam(r, "fileName"), &fileName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fileName", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateDAGSuspensionStateParams

	// ------------- Optional query parameter "remoteNode" -------------

	err = runtime.BindQueryParameter("form", true, false, "remoteNode", r.URL.Query(), &params.RemoteNode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "remoteNode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateDAGSuspensionState(w, r, fileName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealthStatus operation middleware
func (siw *ServerInterfaceWrapper) GetHealthStatus(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealthStatus(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetMetrics(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMetrics(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs", wrapper.ListDAGRuns)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs/{name}", wrapper.ListDAGRunsByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs/{name}/{dagRunId}", wrapper.GetDAGRunDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs/{name}/{dagRunId}/children/{childDAGRunId}", wrapper.GetChildDAGRunDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/log", wrapper.GetChildDAGRunLog)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/log", wrapper.GetChildDAGRunStepLog)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/status", wrapper.UpdateChildDAGRunStepStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs/{name}/{dagRunId}/dequeue", wrapper.DequeueDAGRun)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs/{name}/{dagRunId}/log", wrapper.GetDAGRunLog)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dag-runs/{name}/{dagRunId}/retry", wrapper.RetryDAGRun)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dag-runs/{name}/{dagRunId}/steps/{stepName}/log", wrapper.GetDAGRunStepLog)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/dag-runs/{name}/{dagRunId}/steps/{stepName}/status", wrapper.UpdateDAGRunStepStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dag-runs/{name}/{dagRunId}/stop", wrapper.TerminateDAGRun)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags", wrapper.ListDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags", wrapper.CreateNewDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/search", wrapper.SearchDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/tags", wrapper.GetAllDAGTags)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/dags/{fileName}", wrapper.DeleteDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileName}", wrapper.GetDAGDetails)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileName}/dag-runs", wrapper.GetDAGDAGRunHistory)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileName}/dag-runs/{dagRunId}", wrapper.GetDAGDAGRunDetails)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/enqueue", wrapper.EnqueueDAGDAGRun)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/rename", wrapper.RenameDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{fileName}/spec", wrapper.GetDAGSpec)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/dags/{fileName}/spec", wrapper.UpdateDAGSpec)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/start", wrapper.ExecuteDAG)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{fileName}/suspend", wrapper.UpdateDAGSuspensionState)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealthStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/metrics", wrapper.GetMetrics)
	})

	return r
}

type ListDAGRunsRequestObject struct {
	Params ListDAGRunsParams
}

type ListDAGRunsResponseObject interface {
	VisitListDAGRunsResponse(w http.ResponseWriter) error
}

type ListDAGRuns200JSONResponse struct {
	// DagRuns List of DAG-runs with their status and metadata
	DagRuns []DAGRunSummary `json:"dagRuns"`
}

func (response ListDAGRuns200JSONResponse) VisitListDAGRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGRunsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListDAGRunsdefaultJSONResponse) VisitListDAGRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListDAGRunsByNameRequestObject struct {
	Name   DAGRunName `json:"name"`
	Params ListDAGRunsByNameParams
}

type ListDAGRunsByNameResponseObject interface {
	VisitListDAGRunsByNameResponse(w http.ResponseWriter) error
}

type ListDAGRunsByName200JSONResponse struct {
	// DagRuns List of DAG-runs with their status and metadata
	DagRuns []DAGRunSummary `json:"dagRuns"`
}

func (response ListDAGRunsByName200JSONResponse) VisitListDAGRunsByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGRunsByNamedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListDAGRunsByNamedefaultJSONResponse) VisitListDAGRunsByNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGRunDetailsRequestObject struct {
	Name     DAGName  `json:"name"`
	DagRunId DAGRunId `json:"dagRunId"`
	Params   GetDAGRunDetailsParams
}

type GetDAGRunDetailsResponseObject interface {
	VisitGetDAGRunDetailsResponse(w http.ResponseWriter) error
}

type GetDAGRunDetails200JSONResponse struct {
	// DagRunDetails Detailed status of a DAG-run including child DAG-run nodes
	DagRunDetails DAGRunDetails `json:"dagRunDetails"`
}

func (response GetDAGRunDetails200JSONResponse) VisitGetDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunDetails404JSONResponse Error

func (response GetDAGRunDetails404JSONResponse) VisitGetDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGRunDetailsdefaultJSONResponse) VisitGetDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetChildDAGRunDetailsRequestObject struct {
	Name          DAGName  `json:"name"`
	DagRunId      DAGRunId `json:"dagRunId"`
	ChildDAGRunId string   `json:"childDAGRunId"`
	Params        GetChildDAGRunDetailsParams
}

type GetChildDAGRunDetailsResponseObject interface {
	VisitGetChildDAGRunDetailsResponse(w http.ResponseWriter) error
}

type GetChildDAGRunDetails200JSONResponse struct {
	// DagRunDetails Detailed status of a DAG-run including child DAG-run nodes
	DagRunDetails DAGRunDetails `json:"dagRunDetails"`
}

func (response GetChildDAGRunDetails200JSONResponse) VisitGetChildDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChildDAGRunDetails404JSONResponse Error

func (response GetChildDAGRunDetails404JSONResponse) VisitGetChildDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetChildDAGRunDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetChildDAGRunDetailsdefaultJSONResponse) VisitGetChildDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetChildDAGRunLogRequestObject struct {
	Name          DAGName  `json:"name"`
	DagRunId      DAGRunId `json:"dagRunId"`
	ChildDAGRunId string   `json:"childDAGRunId"`
	Params        GetChildDAGRunLogParams
}

type GetChildDAGRunLogResponseObject interface {
	VisitGetChildDAGRunLogResponse(w http.ResponseWriter) error
}

type GetChildDAGRunLog200JSONResponse Log

func (response GetChildDAGRunLog200JSONResponse) VisitGetChildDAGRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChildDAGRunLog404JSONResponse Error

func (response GetChildDAGRunLog404JSONResponse) VisitGetChildDAGRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetChildDAGRunLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetChildDAGRunLogdefaultJSONResponse) VisitGetChildDAGRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetChildDAGRunStepLogRequestObject struct {
	Name          DAGName  `json:"name"`
	DagRunId      DAGRunId `json:"dagRunId"`
	ChildDAGRunId string   `json:"childDAGRunId"`
	StepName      StepName `json:"stepName"`
	Params        GetChildDAGRunStepLogParams
}

type GetChildDAGRunStepLogResponseObject interface {
	VisitGetChildDAGRunStepLogResponse(w http.ResponseWriter) error
}

type GetChildDAGRunStepLog200JSONResponse Log

func (response GetChildDAGRunStepLog200JSONResponse) VisitGetChildDAGRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChildDAGRunStepLog404JSONResponse Error

func (response GetChildDAGRunStepLog404JSONResponse) VisitGetChildDAGRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetChildDAGRunStepLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetChildDAGRunStepLogdefaultJSONResponse) VisitGetChildDAGRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateChildDAGRunStepStatusRequestObject struct {
	Name          DAGName  `json:"name"`
	DagRunId      DAGRunId `json:"dagRunId"`
	ChildDAGRunId string   `json:"childDAGRunId"`
	StepName      StepName `json:"stepName"`
	Params        UpdateChildDAGRunStepStatusParams
	Body          *UpdateChildDAGRunStepStatusJSONRequestBody
}

type UpdateChildDAGRunStepStatusResponseObject interface {
	VisitUpdateChildDAGRunStepStatusResponse(w http.ResponseWriter) error
}

type UpdateChildDAGRunStepStatus200Response struct {
}

func (response UpdateChildDAGRunStepStatus200Response) VisitUpdateChildDAGRunStepStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateChildDAGRunStepStatus400JSONResponse Error

func (response UpdateChildDAGRunStepStatus400JSONResponse) VisitUpdateChildDAGRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChildDAGRunStepStatus404JSONResponse Error

func (response UpdateChildDAGRunStepStatus404JSONResponse) VisitUpdateChildDAGRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateChildDAGRunStepStatusdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateChildDAGRunStepStatusdefaultJSONResponse) VisitUpdateChildDAGRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DequeueDAGRunRequestObject struct {
	Name     DAGName  `json:"name"`
	DagRunId DAGRunId `json:"dagRunId"`
	Params   DequeueDAGRunParams
}

type DequeueDAGRunResponseObject interface {
	VisitDequeueDAGRunResponse(w http.ResponseWriter) error
}

type DequeueDAGRun200Response struct {
}

func (response DequeueDAGRun200Response) VisitDequeueDAGRunResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DequeueDAGRun404JSONResponse Error

func (response DequeueDAGRun404JSONResponse) VisitDequeueDAGRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DequeueDAGRundefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DequeueDAGRundefaultJSONResponse) VisitDequeueDAGRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGRunLogRequestObject struct {
	Name     DAGName  `json:"name"`
	DagRunId DAGRunId `json:"dagRunId"`
	Params   GetDAGRunLogParams
}

type GetDAGRunLogResponseObject interface {
	VisitGetDAGRunLogResponse(w http.ResponseWriter) error
}

type GetDAGRunLog200JSONResponse Log

func (response GetDAGRunLog200JSONResponse) VisitGetDAGRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunLog404JSONResponse Error

func (response GetDAGRunLog404JSONResponse) VisitGetDAGRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGRunLogdefaultJSONResponse) VisitGetDAGRunLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RetryDAGRunRequestObject struct {
	Name     DAGName  `json:"name"`
	DagRunId DAGRunId `json:"dagRunId"`
	Params   RetryDAGRunParams
	Body     *RetryDAGRunJSONRequestBody
}

type RetryDAGRunResponseObject interface {
	VisitRetryDAGRunResponse(w http.ResponseWriter) error
}

type RetryDAGRun200Response struct {
}

func (response RetryDAGRun200Response) VisitRetryDAGRunResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RetryDAGRundefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RetryDAGRundefaultJSONResponse) VisitRetryDAGRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGRunStepLogRequestObject struct {
	Name     DAGName  `json:"name"`
	DagRunId DAGRunId `json:"dagRunId"`
	StepName StepName `json:"stepName"`
	Params   GetDAGRunStepLogParams
}

type GetDAGRunStepLogResponseObject interface {
	VisitGetDAGRunStepLogResponse(w http.ResponseWriter) error
}

type GetDAGRunStepLog200JSONResponse Log

func (response GetDAGRunStepLog200JSONResponse) VisitGetDAGRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunStepLog404JSONResponse Error

func (response GetDAGRunStepLog404JSONResponse) VisitGetDAGRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGRunStepLogdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGRunStepLogdefaultJSONResponse) VisitGetDAGRunStepLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateDAGRunStepStatusRequestObject struct {
	Name     DAGName  `json:"name"`
	DagRunId DAGRunId `json:"dagRunId"`
	StepName StepName `json:"stepName"`
	Params   UpdateDAGRunStepStatusParams
	Body     *UpdateDAGRunStepStatusJSONRequestBody
}

type UpdateDAGRunStepStatusResponseObject interface {
	VisitUpdateDAGRunStepStatusResponse(w http.ResponseWriter) error
}

type UpdateDAGRunStepStatus200Response struct {
}

func (response UpdateDAGRunStepStatus200Response) VisitUpdateDAGRunStepStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateDAGRunStepStatus400JSONResponse Error

func (response UpdateDAGRunStepStatus400JSONResponse) VisitUpdateDAGRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGRunStepStatus404JSONResponse Error

func (response UpdateDAGRunStepStatus404JSONResponse) VisitUpdateDAGRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGRunStepStatusdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateDAGRunStepStatusdefaultJSONResponse) VisitUpdateDAGRunStepStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TerminateDAGRunRequestObject struct {
	Name     DAGName  `json:"name"`
	DagRunId DAGRunId `json:"dagRunId"`
	Params   TerminateDAGRunParams
}

type TerminateDAGRunResponseObject interface {
	VisitTerminateDAGRunResponse(w http.ResponseWriter) error
}

type TerminateDAGRun200Response struct {
}

func (response TerminateDAGRun200Response) VisitTerminateDAGRunResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type TerminateDAGRundefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response TerminateDAGRundefaultJSONResponse) VisitTerminateDAGRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListDAGsRequestObject struct {
	Params ListDAGsParams
}

type ListDAGsResponseObject interface {
	VisitListDAGsResponse(w http.ResponseWriter) error
}

type ListDAGs200JSONResponse struct {
	// Dags List of DAG definitions with their status and metadata
	Dags []DAGFile `json:"dags"`

	// Errors List of errors encountered during the request
	Errors     []string   `json:"errors"`
	Pagination Pagination `json:"pagination"`
}

func (response ListDAGs200JSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListDAGsdefaultJSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateNewDAGRequestObject struct {
	Params CreateNewDAGParams
	Body   *CreateNewDAGJSONRequestBody
}

type CreateNewDAGResponseObject interface {
	VisitCreateNewDAGResponse(w http.ResponseWriter) error
}

type CreateNewDAG201JSONResponse struct {
	// Name Name of the newly created DAG
	Name string `json:"name"`
}

func (response CreateNewDAG201JSONResponse) VisitCreateNewDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateNewDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateNewDAGdefaultJSONResponse) VisitCreateNewDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SearchDAGsRequestObject struct {
	Params SearchDAGsParams
}

type SearchDAGsResponseObject interface {
	VisitSearchDAGsResponse(w http.ResponseWriter) error
}

type SearchDAGs200JSONResponse struct {
	// Errors Errors encountered during the search
	Errors []string `json:"errors"`

	// Results Search results matching the query
	Results []SearchResultItem `json:"results"`
}

func (response SearchDAGs200JSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SearchDAGsdefaultJSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAllDAGTagsRequestObject struct {
	Params GetAllDAGTagsParams
}

type GetAllDAGTagsResponseObject interface {
	VisitGetAllDAGTagsResponse(w http.ResponseWriter) error
}

type GetAllDAGTags200JSONResponse ListTagResponse

func (response GetAllDAGTags200JSONResponse) VisitGetAllDAGTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllDAGTagsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetAllDAGTagsdefaultJSONResponse) VisitGetAllDAGTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteDAGRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   DeleteDAGParams
}

type DeleteDAGResponseObject interface {
	VisitDeleteDAGResponse(w http.ResponseWriter) error
}

type DeleteDAG204Response struct {
}

func (response DeleteDAG204Response) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteDAG404JSONResponse Error

func (response DeleteDAG404JSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteDAGdefaultJSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGDetailsRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   GetDAGDetailsParams
}

type GetDAGDetailsResponseObject interface {
	VisitGetDAGDetailsResponse(w http.ResponseWriter) error
}

type GetDAGDetails200JSONResponse struct {
	// Dag Detailed DAG configuration information
	Dag *DAGDetails `json:"dag,omitempty"`

	// Errors List of errors encountered during the request
	Errors []string `json:"errors"`

	// LatestDAGRun Detailed status of a DAG-run including child DAG-run nodes
	LatestDAGRun DAGRunDetails `json:"latestDAGRun"`

	// LocalDags List of local DAGs that are part of this DAG
	LocalDags []LocalDag `json:"localDags"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"suspended"`
}

func (response GetDAGDetails200JSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGDetailsdefaultJSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGDAGRunHistoryRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   GetDAGDAGRunHistoryParams
}

type GetDAGDAGRunHistoryResponseObject interface {
	VisitGetDAGDAGRunHistoryResponse(w http.ResponseWriter) error
}

type GetDAGDAGRunHistory200JSONResponse struct {
	// DagRuns List of historical DAG-runs created from this DAG
	DagRuns []DAGRunDetails `json:"dagRuns"`

	// GridData Grid data for visualization
	GridData []DAGGridItem `json:"gridData"`
}

func (response GetDAGDAGRunHistory200JSONResponse) VisitGetDAGDAGRunHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDAGRunHistorydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGDAGRunHistorydefaultJSONResponse) VisitGetDAGDAGRunHistoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGDAGRunDetailsRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	DagRunId DAGRunId    `json:"dagRunId"`
	Params   GetDAGDAGRunDetailsParams
}

type GetDAGDAGRunDetailsResponseObject interface {
	VisitGetDAGDAGRunDetailsResponse(w http.ResponseWriter) error
}

type GetDAGDAGRunDetails200JSONResponse struct {
	// DagRun Detailed status of a DAG-run including child DAG-run nodes
	DagRun DAGRunDetails `json:"dagRun"`
}

func (response GetDAGDAGRunDetails200JSONResponse) VisitGetDAGDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDAGRunDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGDAGRunDetailsdefaultJSONResponse) VisitGetDAGDAGRunDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type EnqueueDAGDAGRunRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   EnqueueDAGDAGRunParams
	Body     *EnqueueDAGDAGRunJSONRequestBody
}

type EnqueueDAGDAGRunResponseObject interface {
	VisitEnqueueDAGDAGRunResponse(w http.ResponseWriter) error
}

type EnqueueDAGDAGRun200JSONResponse struct {
	// DagRunId ID of the created DAG-run
	DagRunId string `json:"dagRunId"`
}

func (response EnqueueDAGDAGRun200JSONResponse) VisitEnqueueDAGDAGRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EnqueueDAGDAGRundefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response EnqueueDAGDAGRundefaultJSONResponse) VisitEnqueueDAGDAGRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RenameDAGRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   RenameDAGParams
	Body     *RenameDAGJSONRequestBody
}

type RenameDAGResponseObject interface {
	VisitRenameDAGResponse(w http.ResponseWriter) error
}

type RenameDAG200Response struct {
}

func (response RenameDAG200Response) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type RenameDAG400JSONResponse Error

func (response RenameDAG400JSONResponse) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RenameDAG404JSONResponse Error

func (response RenameDAG404JSONResponse) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RenameDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response RenameDAGdefaultJSONResponse) VisitRenameDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGSpecRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   GetDAGSpecParams
}

type GetDAGSpecResponseObject interface {
	VisitGetDAGSpecResponse(w http.ResponseWriter) error
}

type GetDAGSpec200JSONResponse struct {
	// Dag Detailed DAG configuration information
	Dag *DAGDetails `json:"dag,omitempty"`

	// Errors List of errors in the spec
	Errors []string `json:"errors"`

	// Spec The DAG spec in YAML format
	Spec string `json:"spec"`
}

func (response GetDAGSpec200JSONResponse) VisitGetDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGSpecdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGSpecdefaultJSONResponse) VisitGetDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateDAGSpecRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   UpdateDAGSpecParams
	Body     *UpdateDAGSpecJSONRequestBody
}

type UpdateDAGSpecResponseObject interface {
	VisitUpdateDAGSpecResponse(w http.ResponseWriter) error
}

type UpdateDAGSpec200JSONResponse struct {
	// Errors List of errors in the spec
	Errors []string `json:"errors"`
}

func (response UpdateDAGSpec200JSONResponse) VisitUpdateDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGSpecdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateDAGSpecdefaultJSONResponse) VisitUpdateDAGSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExecuteDAGRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   ExecuteDAGParams
	Body     *ExecuteDAGJSONRequestBody
}

type ExecuteDAGResponseObject interface {
	VisitExecuteDAGResponse(w http.ResponseWriter) error
}

type ExecuteDAG200JSONResponse struct {
	// DagRunId ID of the created DAG-run
	DagRunId string `json:"dagRunId"`
}

func (response ExecuteDAG200JSONResponse) VisitExecuteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ExecuteDAGdefaultJSONResponse) VisitExecuteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateDAGSuspensionStateRequestObject struct {
	FileName DAGFileName `json:"fileName"`
	Params   UpdateDAGSuspensionStateParams
	Body     *UpdateDAGSuspensionStateJSONRequestBody
}

type UpdateDAGSuspensionStateResponseObject interface {
	VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error
}

type UpdateDAGSuspensionState200Response struct {
}

func (response UpdateDAGSuspensionState200Response) VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateDAGSuspensionState404JSONResponse Error

func (response UpdateDAGSuspensionState404JSONResponse) VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateDAGSuspensionStatedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateDAGSuspensionStatedefaultJSONResponse) VisitUpdateDAGSuspensionStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealthStatusRequestObject struct {
}

type GetHealthStatusResponseObject interface {
	VisitGetHealthStatusResponse(w http.ResponseWriter) error
}

type GetHealthStatus200JSONResponse HealthResponse

func (response GetHealthStatus200JSONResponse) VisitGetHealthStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthStatusdefaultResponse struct {
	StatusCode int
}

func (response GetHealthStatusdefaultResponse) VisitGetHealthStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(response.StatusCode)
	return nil
}

type GetMetricsRequestObject struct {
}

type GetMetricsResponseObject interface {
	VisitGetMetricsResponse(w http.ResponseWriter) error
}

type GetMetrics200TextResponse string

func (response GetMetrics200TextResponse) VisitGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type GetMetricsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetMetricsdefaultJSONResponse) VisitGetMetricsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all DAG-runs
	// (GET /dag-runs)
	ListDAGRuns(ctx context.Context, request ListDAGRunsRequestObject) (ListDAGRunsResponseObject, error)
	// List all DAG-runs with a specific name
	// (GET /dag-runs/{name})
	ListDAGRunsByName(ctx context.Context, request ListDAGRunsByNameRequestObject) (ListDAGRunsByNameResponseObject, error)
	// Retrieve detailed status of a DAG-run
	// (GET /dag-runs/{name}/{dagRunId})
	GetDAGRunDetails(ctx context.Context, request GetDAGRunDetailsRequestObject) (GetDAGRunDetailsResponseObject, error)
	// Retrieve detailed status of a child DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId})
	GetChildDAGRunDetails(ctx context.Context, request GetChildDAGRunDetailsRequestObject) (GetChildDAGRunDetailsResponseObject, error)
	// Retrieve log for a specific child DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/log)
	GetChildDAGRunLog(ctx context.Context, request GetChildDAGRunLogRequestObject) (GetChildDAGRunLogResponseObject, error)
	// Retrieve log for a specific step in a child DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/log)
	GetChildDAGRunStepLog(ctx context.Context, request GetChildDAGRunStepLogRequestObject) (GetChildDAGRunStepLogResponseObject, error)
	// Manually update a step's execution status in a child DAG-run
	// (PATCH /dag-runs/{name}/{dagRunId}/children/{childDAGRunId}/steps/{stepName}/status)
	UpdateChildDAGRunStepStatus(ctx context.Context, request UpdateChildDAGRunStepStatusRequestObject) (UpdateChildDAGRunStepStatusResponseObject, error)
	// Dequeue a queued DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/dequeue)
	DequeueDAGRun(ctx context.Context, request DequeueDAGRunRequestObject) (DequeueDAGRunResponseObject, error)
	// Retrieve full execution log of a DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/log)
	GetDAGRunLog(ctx context.Context, request GetDAGRunLogRequestObject) (GetDAGRunLogResponseObject, error)
	// Retry DAG-run execution
	// (POST /dag-runs/{name}/{dagRunId}/retry)
	RetryDAGRun(ctx context.Context, request RetryDAGRunRequestObject) (RetryDAGRunResponseObject, error)
	// Retrieve log for a specific step in a DAG-run
	// (GET /dag-runs/{name}/{dagRunId}/steps/{stepName}/log)
	GetDAGRunStepLog(ctx context.Context, request GetDAGRunStepLogRequestObject) (GetDAGRunStepLogResponseObject, error)
	// Manually update a step's execution status
	// (PATCH /dag-runs/{name}/{dagRunId}/steps/{stepName}/status)
	UpdateDAGRunStepStatus(ctx context.Context, request UpdateDAGRunStepStatusRequestObject) (UpdateDAGRunStepStatusResponseObject, error)
	// Terminate a running DAG-run
	// (POST /dag-runs/{name}/{dagRunId}/stop)
	TerminateDAGRun(ctx context.Context, request TerminateDAGRunRequestObject) (TerminateDAGRunResponseObject, error)
	// List all available DAGs
	// (GET /dags)
	ListDAGs(ctx context.Context, request ListDAGsRequestObject) (ListDAGsResponseObject, error)
	// Create a new DAG definition
	// (POST /dags)
	CreateNewDAG(ctx context.Context, request CreateNewDAGRequestObject) (CreateNewDAGResponseObject, error)
	// Search DAGs
	// (GET /dags/search)
	SearchDAGs(ctx context.Context, request SearchDAGsRequestObject) (SearchDAGsResponseObject, error)
	// List all available DAG tags
	// (GET /dags/tags)
	GetAllDAGTags(ctx context.Context, request GetAllDAGTagsRequestObject) (GetAllDAGTagsResponseObject, error)
	// Delete an existing DAG
	// (DELETE /dags/{fileName})
	DeleteDAG(ctx context.Context, request DeleteDAGRequestObject) (DeleteDAGResponseObject, error)
	// Retrieve comprehensive DAG information
	// (GET /dags/{fileName})
	GetDAGDetails(ctx context.Context, request GetDAGDetailsRequestObject) (GetDAGDetailsResponseObject, error)
	// Retrieve execution history of a DAG
	// (GET /dags/{fileName}/dag-runs)
	GetDAGDAGRunHistory(ctx context.Context, request GetDAGDAGRunHistoryRequestObject) (GetDAGDAGRunHistoryResponseObject, error)
	// Get detailed status of a specific DAG-run
	// (GET /dags/{fileName}/dag-runs/{dagRunId})
	GetDAGDAGRunDetails(ctx context.Context, request GetDAGDAGRunDetailsRequestObject) (GetDAGDAGRunDetailsResponseObject, error)
	// Enqueue a DAG-run from DAG
	// (POST /dags/{fileName}/enqueue)
	EnqueueDAGDAGRun(ctx context.Context, request EnqueueDAGDAGRunRequestObject) (EnqueueDAGDAGRunResponseObject, error)
	// Change DAG file ID
	// (POST /dags/{fileName}/rename)
	RenameDAG(ctx context.Context, request RenameDAGRequestObject) (RenameDAGResponseObject, error)
	// Retrieve DAG specification
	// (GET /dags/{fileName}/spec)
	GetDAGSpec(ctx context.Context, request GetDAGSpecRequestObject) (GetDAGSpecResponseObject, error)
	// Update DAG spec
	// (PUT /dags/{fileName}/spec)
	UpdateDAGSpec(ctx context.Context, request UpdateDAGSpecRequestObject) (UpdateDAGSpecResponseObject, error)
	// Create and execute a DAG-run from DAG
	// (POST /dags/{fileName}/start)
	ExecuteDAG(ctx context.Context, request ExecuteDAGRequestObject) (ExecuteDAGResponseObject, error)
	// Toggle DAG suspension state
	// (POST /dags/{fileName}/suspend)
	UpdateDAGSuspensionState(ctx context.Context, request UpdateDAGSuspensionStateRequestObject) (UpdateDAGSuspensionStateResponseObject, error)
	// Check server health status
	// (GET /health)
	GetHealthStatus(ctx context.Context, request GetHealthStatusRequestObject) (GetHealthStatusResponseObject, error)
	// Get Prometheus metrics
	// (GET /metrics)
	GetMetrics(ctx context.Context, request GetMetricsRequestObject) (GetMetricsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListDAGRuns operation middleware
func (sh *strictHandler) ListDAGRuns(w http.ResponseWriter, r *http.Request, params ListDAGRunsParams) {
	var request ListDAGRunsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListDAGRuns(ctx, request.(ListDAGRunsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDAGRuns")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListDAGRunsResponseObject); ok {
		if err := validResponse.VisitListDAGRunsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListDAGRunsByName operation middleware
func (sh *strictHandler) ListDAGRunsByName(w http.ResponseWriter, r *http.Request, name DAGRunName, params ListDAGRunsByNameParams) {
	var request ListDAGRunsByNameRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListDAGRunsByName(ctx, request.(ListDAGRunsByNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDAGRunsByName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListDAGRunsByNameResponseObject); ok {
		if err := validResponse.VisitListDAGRunsByNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGRunDetails operation middleware
func (sh *strictHandler) GetDAGRunDetails(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params GetDAGRunDetailsParams) {
	var request GetDAGRunDetailsRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGRunDetails(ctx, request.(GetDAGRunDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGRunDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGRunDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGRunDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChildDAGRunDetails operation middleware
func (sh *strictHandler) GetChildDAGRunDetails(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, params GetChildDAGRunDetailsParams) {
	var request GetChildDAGRunDetailsRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.ChildDAGRunId = childDAGRunId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetChildDAGRunDetails(ctx, request.(GetChildDAGRunDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChildDAGRunDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetChildDAGRunDetailsResponseObject); ok {
		if err := validResponse.VisitGetChildDAGRunDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChildDAGRunLog operation middleware
func (sh *strictHandler) GetChildDAGRunLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, params GetChildDAGRunLogParams) {
	var request GetChildDAGRunLogRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.ChildDAGRunId = childDAGRunId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetChildDAGRunLog(ctx, request.(GetChildDAGRunLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChildDAGRunLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetChildDAGRunLogResponseObject); ok {
		if err := validResponse.VisitGetChildDAGRunLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChildDAGRunStepLog operation middleware
func (sh *strictHandler) GetChildDAGRunStepLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, stepName StepName, params GetChildDAGRunStepLogParams) {
	var request GetChildDAGRunStepLogRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.ChildDAGRunId = childDAGRunId
	request.StepName = stepName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetChildDAGRunStepLog(ctx, request.(GetChildDAGRunStepLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChildDAGRunStepLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetChildDAGRunStepLogResponseObject); ok {
		if err := validResponse.VisitGetChildDAGRunStepLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateChildDAGRunStepStatus operation middleware
func (sh *strictHandler) UpdateChildDAGRunStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, childDAGRunId string, stepName StepName, params UpdateChildDAGRunStepStatusParams) {
	var request UpdateChildDAGRunStepStatusRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.ChildDAGRunId = childDAGRunId
	request.StepName = stepName
	request.Params = params

	var body UpdateChildDAGRunStepStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateChildDAGRunStepStatus(ctx, request.(UpdateChildDAGRunStepStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateChildDAGRunStepStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateChildDAGRunStepStatusResponseObject); ok {
		if err := validResponse.VisitUpdateChildDAGRunStepStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DequeueDAGRun operation middleware
func (sh *strictHandler) DequeueDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params DequeueDAGRunParams) {
	var request DequeueDAGRunRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DequeueDAGRun(ctx, request.(DequeueDAGRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DequeueDAGRun")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DequeueDAGRunResponseObject); ok {
		if err := validResponse.VisitDequeueDAGRunResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGRunLog operation middleware
func (sh *strictHandler) GetDAGRunLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params GetDAGRunLogParams) {
	var request GetDAGRunLogRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGRunLog(ctx, request.(GetDAGRunLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGRunLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGRunLogResponseObject); ok {
		if err := validResponse.VisitGetDAGRunLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RetryDAGRun operation middleware
func (sh *strictHandler) RetryDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params RetryDAGRunParams) {
	var request RetryDAGRunRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.Params = params

	var body RetryDAGRunJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RetryDAGRun(ctx, request.(RetryDAGRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RetryDAGRun")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RetryDAGRunResponseObject); ok {
		if err := validResponse.VisitRetryDAGRunResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGRunStepLog operation middleware
func (sh *strictHandler) GetDAGRunStepLog(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, stepName StepName, params GetDAGRunStepLogParams) {
	var request GetDAGRunStepLogRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.StepName = stepName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGRunStepLog(ctx, request.(GetDAGRunStepLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGRunStepLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGRunStepLogResponseObject); ok {
		if err := validResponse.VisitGetDAGRunStepLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDAGRunStepStatus operation middleware
func (sh *strictHandler) UpdateDAGRunStepStatus(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, stepName StepName, params UpdateDAGRunStepStatusParams) {
	var request UpdateDAGRunStepStatusRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.StepName = stepName
	request.Params = params

	var body UpdateDAGRunStepStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDAGRunStepStatus(ctx, request.(UpdateDAGRunStepStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDAGRunStepStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDAGRunStepStatusResponseObject); ok {
		if err := validResponse.VisitUpdateDAGRunStepStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TerminateDAGRun operation middleware
func (sh *strictHandler) TerminateDAGRun(w http.ResponseWriter, r *http.Request, name DAGName, dagRunId DAGRunId, params TerminateDAGRunParams) {
	var request TerminateDAGRunRequestObject

	request.Name = name
	request.DagRunId = dagRunId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TerminateDAGRun(ctx, request.(TerminateDAGRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TerminateDAGRun")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TerminateDAGRunResponseObject); ok {
		if err := validResponse.VisitTerminateDAGRunResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListDAGs operation middleware
func (sh *strictHandler) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	var request ListDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListDAGs(ctx, request.(ListDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListDAGsResponseObject); ok {
		if err := validResponse.VisitListDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateNewDAG operation middleware
func (sh *strictHandler) CreateNewDAG(w http.ResponseWriter, r *http.Request, params CreateNewDAGParams) {
	var request CreateNewDAGRequestObject

	request.Params = params

	var body CreateNewDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateNewDAG(ctx, request.(CreateNewDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateNewDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateNewDAGResponseObject); ok {
		if err := validResponse.VisitCreateNewDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchDAGs operation middleware
func (sh *strictHandler) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	var request SearchDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchDAGs(ctx, request.(SearchDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchDAGsResponseObject); ok {
		if err := validResponse.VisitSearchDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAllDAGTags operation middleware
func (sh *strictHandler) GetAllDAGTags(w http.ResponseWriter, r *http.Request, params GetAllDAGTagsParams) {
	var request GetAllDAGTagsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllDAGTags(ctx, request.(GetAllDAGTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllDAGTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllDAGTagsResponseObject); ok {
		if err := validResponse.VisitGetAllDAGTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDAG operation middleware
func (sh *strictHandler) DeleteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params DeleteDAGParams) {
	var request DeleteDAGRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDAG(ctx, request.(DeleteDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDAGResponseObject); ok {
		if err := validResponse.VisitDeleteDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGDetails operation middleware
func (sh *strictHandler) GetDAGDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDetailsParams) {
	var request GetDAGDetailsRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGDetails(ctx, request.(GetDAGDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGDAGRunHistory operation middleware
func (sh *strictHandler) GetDAGDAGRunHistory(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGDAGRunHistoryParams) {
	var request GetDAGDAGRunHistoryRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGDAGRunHistory(ctx, request.(GetDAGDAGRunHistoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGDAGRunHistory")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGDAGRunHistoryResponseObject); ok {
		if err := validResponse.VisitGetDAGDAGRunHistoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGDAGRunDetails operation middleware
func (sh *strictHandler) GetDAGDAGRunDetails(w http.ResponseWriter, r *http.Request, fileName DAGFileName, dagRunId DAGRunId, params GetDAGDAGRunDetailsParams) {
	var request GetDAGDAGRunDetailsRequestObject

	request.FileName = fileName
	request.DagRunId = dagRunId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGDAGRunDetails(ctx, request.(GetDAGDAGRunDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGDAGRunDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGDAGRunDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGDAGRunDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// EnqueueDAGDAGRun operation middleware
func (sh *strictHandler) EnqueueDAGDAGRun(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params EnqueueDAGDAGRunParams) {
	var request EnqueueDAGDAGRunRequestObject

	request.FileName = fileName
	request.Params = params

	var body EnqueueDAGDAGRunJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.EnqueueDAGDAGRun(ctx, request.(EnqueueDAGDAGRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EnqueueDAGDAGRun")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(EnqueueDAGDAGRunResponseObject); ok {
		if err := validResponse.VisitEnqueueDAGDAGRunResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RenameDAG operation middleware
func (sh *strictHandler) RenameDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params RenameDAGParams) {
	var request RenameDAGRequestObject

	request.FileName = fileName
	request.Params = params

	var body RenameDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RenameDAG(ctx, request.(RenameDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RenameDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RenameDAGResponseObject); ok {
		if err := validResponse.VisitRenameDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGSpec operation middleware
func (sh *strictHandler) GetDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params GetDAGSpecParams) {
	var request GetDAGSpecRequestObject

	request.FileName = fileName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGSpec(ctx, request.(GetDAGSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGSpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGSpecResponseObject); ok {
		if err := validResponse.VisitGetDAGSpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDAGSpec operation middleware
func (sh *strictHandler) UpdateDAGSpec(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSpecParams) {
	var request UpdateDAGSpecRequestObject

	request.FileName = fileName
	request.Params = params

	var body UpdateDAGSpecJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDAGSpec(ctx, request.(UpdateDAGSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDAGSpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDAGSpecResponseObject); ok {
		if err := validResponse.VisitUpdateDAGSpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExecuteDAG operation middleware
func (sh *strictHandler) ExecuteDAG(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params ExecuteDAGParams) {
	var request ExecuteDAGRequestObject

	request.FileName = fileName
	request.Params = params

	var body ExecuteDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExecuteDAG(ctx, request.(ExecuteDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExecuteDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExecuteDAGResponseObject); ok {
		if err := validResponse.VisitExecuteDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateDAGSuspensionState operation middleware
func (sh *strictHandler) UpdateDAGSuspensionState(w http.ResponseWriter, r *http.Request, fileName DAGFileName, params UpdateDAGSuspensionStateParams) {
	var request UpdateDAGSuspensionStateRequestObject

	request.FileName = fileName
	request.Params = params

	var body UpdateDAGSuspensionStateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateDAGSuspensionState(ctx, request.(UpdateDAGSuspensionStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateDAGSuspensionState")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateDAGSuspensionStateResponseObject); ok {
		if err := validResponse.VisitUpdateDAGSuspensionStateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealthStatus operation middleware
func (sh *strictHandler) GetHealthStatus(w http.ResponseWriter, r *http.Request) {
	var request GetHealthStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealthStatus(ctx, request.(GetHealthStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealthStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthStatusResponseObject); ok {
		if err := validResponse.VisitGetHealthStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMetrics operation middleware
func (sh *strictHandler) GetMetrics(w http.ResponseWriter, r *http.Request) {
	var request GetMetricsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMetrics(ctx, request.(GetMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMetrics")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMetricsResponseObject); ok {
		if err := validResponse.VisitGetMetricsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
