syntax = "proto3";

package coordinator.v1;

// protolint:disable:next MAX_LINE_LENGTH
option go_package = "github.com/dagu-org/dagu/proto/coordinator/v1;coordinatorv1";


// Service definition for Coordinator Service.
service CoordinatorService {
  // Poll is called by workers to process a task.
  rpc Poll (PollRequest) returns (PollResponse);
  // Dispatch is called to dispatch a task to a worker.
  rpc Dispatch (DispatchRequest) returns (DispatchResponse);
  // GetWorkers returns the list of connected workers and their pollers.
  rpc GetWorkers (GetWorkersRequest) returns (GetWorkersResponse);
  // Heartbeat is called by workers to report their status.
  rpc Heartbeat (HeartbeatRequest) returns (HeartbeatResponse);
}

// Request message for polling a task.
message PollRequest {
  string worker_id = 1;
  string poller_id = 2; // Unique ID for this poll request
  map<string, string> labels = 3; // Worker labels for task matching
}

// Response message for polling a task.
message PollResponse {
  Task task = 1; // The task to process.
}

// Request message for dispatching a task.
message DispatchRequest {
  Task task = 1;
}

// Response message for dispatching a task.
message DispatchResponse {
  // No field
}

// Task to process.
message Task {
  Operation operation = 6;
  string root_dag_run_name = 1;
  string root_dag_run_id = 2;
  string parent_dag_run_name = 3;
  string parent_dag_run_id = 4;
  string dag_run_id = 5;
  string target = 7; // DAG name or path
  string params = 8; // Optional: parameters
  string step = 9;   // Optional: specific step (for RETRY)
  map<string, string> worker_selector = 10; // Required worker labels for execution
  string definition = 11; // Optional: DAG definition (YAML) for local DAGs
}

enum Operation {
  OPERATION_UNSPECIFIED = 0;
  OPERATION_START = 1;    // Start a new DAG run
  OPERATION_RETRY = 2;    // Retry an existing run
}

// Health status of a worker based on heartbeat recency.
enum WorkerHealthStatus {
  WORKER_HEALTH_STATUS_UNSPECIFIED = 0;
  WORKER_HEALTH_STATUS_HEALTHY = 1;      // Last heartbeat < 5 seconds
  WORKER_HEALTH_STATUS_WARNING = 2;      // Last heartbeat 5-15 seconds
  WORKER_HEALTH_STATUS_UNHEALTHY = 3;    // Last heartbeat > 15 seconds
}

// Request message for getting workers.
message GetWorkersRequest {
  // No fields needed for now
}

// Response message for getting workers.
message GetWorkersResponse {
  repeated WorkerInfo workers = 1;
}

// Information about a worker and its pollers.
message WorkerInfo {
  string worker_id = 1;
  string poller_id = 2;  // Deprecated: Only used for backward compatibility
  map<string, string> labels = 3;
  int64 connected_at = 4; // Unix timestamp in seconds
  // Aggregated stats from heartbeat
  int32 total_pollers = 5;
  int32 busy_pollers = 6;
  repeated RunningTask running_tasks = 7;
  int64 last_heartbeat_at = 8; // Unix timestamp of last heartbeat
  WorkerHealthStatus health_status = 9; // Health status based on heartbeat recency
}

// Request message for heartbeat.
message HeartbeatRequest {
  string worker_id = 1;
  map<string, string> labels = 2;
  WorkerStats stats = 3;
}

// Response message for heartbeat.
message HeartbeatResponse {
  // Empty for now
}

// Worker statistics reported via heartbeat.
message WorkerStats {
  int32 total_pollers = 1;      // Total number of pollers
  int32 busy_pollers = 2;       // Number currently processing tasks
  repeated RunningTask running_tasks = 3; // Details of running tasks
}

// Information about a running task.
message RunningTask {
  string dag_run_id = 1;
  string dag_name = 2;
  int64 started_at = 3;         // Unix timestamp in seconds
  string root_dag_run_name = 4;
  string root_dag_run_id = 5;
  string parent_dag_run_name = 6;
  string parent_dag_run_id = 7;
}
