// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListDagsResponse list dags response
//
// swagger:model listDagsResponse
type ListDagsResponse struct {

	// d a gs
	// Required: true
	DAGs []*DagListItem `json:"DAGs"`

	// errors
	// Required: true
	Errors []string `json:"Errors"`

	// has error
	// Required: true
	HasError *bool `json:"HasError"`

	// page count
	// Required: true
	PageCount *int64 `json:"PageCount"`
}

// Validate validates this list dags response
func (m *ListDagsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDAGs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListDagsResponse) validateDAGs(formats strfmt.Registry) error {

	if err := validate.Required("DAGs", "body", m.DAGs); err != nil {
		return err
	}

	for i := 0; i < len(m.DAGs); i++ {
		if swag.IsZero(m.DAGs[i]) { // not required
			continue
		}

		if m.DAGs[i] != nil {
			if err := m.DAGs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DAGs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("DAGs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ListDagsResponse) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("Errors", "body", m.Errors); err != nil {
		return err
	}

	return nil
}

func (m *ListDagsResponse) validateHasError(formats strfmt.Registry) error {

	if err := validate.Required("HasError", "body", m.HasError); err != nil {
		return err
	}

	return nil
}

func (m *ListDagsResponse) validatePageCount(formats strfmt.Registry) error {

	if err := validate.Required("PageCount", "body", m.PageCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list dags response based on the context it is used
func (m *ListDagsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDAGs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListDagsResponse) contextValidateDAGs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DAGs); i++ {

		if m.DAGs[i] != nil {

			if swag.IsZero(m.DAGs[i]) { // not required
				return nil
			}

			if err := m.DAGs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("DAGs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("DAGs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListDagsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListDagsResponse) UnmarshalBinary(b []byte) error {
	var res ListDagsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
