// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Error Generic error response object.
//
// swagger:model Error
type Error struct {

	// Error code indicating the type of error.
	// Required: true
	// Enum: [validation_error not_found internal_error unauthorized bad_gateway]
	Code *string `json:"code"`

	// Additional error details.
	Details interface{} `json:"details,omitempty"`

	// Short error message.
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this error
func (m *Error) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var errorTypeCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["validation_error","not_found","internal_error","unauthorized","bad_gateway"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		errorTypeCodePropEnum = append(errorTypeCodePropEnum, v)
	}
}

const (

	// ErrorCodeValidationError captures enum value "validation_error"
	ErrorCodeValidationError string = "validation_error"

	// ErrorCodeNotFound captures enum value "not_found"
	ErrorCodeNotFound string = "not_found"

	// ErrorCodeInternalError captures enum value "internal_error"
	ErrorCodeInternalError string = "internal_error"

	// ErrorCodeUnauthorized captures enum value "unauthorized"
	ErrorCodeUnauthorized string = "unauthorized"

	// ErrorCodeBadGateway captures enum value "bad_gateway"
	ErrorCodeBadGateway string = "bad_gateway"
)

// prop value enum
func (m *Error) validateCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, errorTypeCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Error) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	// value enum
	if err := m.validateCodeEnum("code", "body", *m.Code); err != nil {
		return err
	}

	return nil
}

func (m *Error) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this error based on context it is used
func (m *Error) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Error) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Error) UnmarshalBinary(b []byte) error {
	var res Error
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
