// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HealthResponse Response object for the health check endpoint.
//
// swagger:model HealthResponse
type HealthResponse struct {

	// Overall health status of the server
	// Required: true
	// Enum: [healthy unhealthy]
	Status *string `json:"status"`

	// Current server time
	// Required: true
	Timestamp *string `json:"timestamp"`

	// Server uptime in seconds
	// Required: true
	Uptime *int64 `json:"uptime"`

	// Current version of the server
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this health response
func (m *HealthResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUptime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var healthResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["healthy","unhealthy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		healthResponseTypeStatusPropEnum = append(healthResponseTypeStatusPropEnum, v)
	}
}

const (

	// HealthResponseStatusHealthy captures enum value "healthy"
	HealthResponseStatusHealthy string = "healthy"

	// HealthResponseStatusUnhealthy captures enum value "unhealthy"
	HealthResponseStatusUnhealthy string = "unhealthy"
)

// prop value enum
func (m *HealthResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, healthResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HealthResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *HealthResponse) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

func (m *HealthResponse) validateUptime(formats strfmt.Registry) error {

	if err := validate.Required("uptime", "body", m.Uptime); err != nil {
		return err
	}

	return nil
}

func (m *HealthResponse) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this health response based on context it is used
func (m *HealthResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HealthResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HealthResponse) UnmarshalBinary(b []byte) error {
	var res HealthResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
