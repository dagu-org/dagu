// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DAGStatus d a g status
//
// swagger:model DAGStatus
type DAGStatus struct {

	// Timestamp when the DAG finished.
	// Required: true
	FinishedAt *string `json:"FinishedAt"`

	// log
	// Required: true
	Log *string `json:"Log"`

	// name
	// Required: true
	Name *string `json:"Name"`

	// params
	// Required: true
	Params *string `json:"Params"`

	// pid
	// Required: true
	Pid *int64 `json:"Pid"`

	// request Id
	// Required: true
	RequestID *string `json:"RequestId"`

	// Timestamp when the DAG started.
	// Required: true
	StartedAt *string `json:"StartedAt"`

	// status
	// Required: true
	Status *int64 `json:"Status"`

	// status text
	// Required: true
	StatusText *string `json:"StatusText"`
}

// Validate validates this d a g status
func (m *DAGStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DAGStatus) validateFinishedAt(formats strfmt.Registry) error {

	if err := validate.Required("FinishedAt", "body", m.FinishedAt); err != nil {
		return err
	}

	return nil
}

func (m *DAGStatus) validateLog(formats strfmt.Registry) error {

	if err := validate.Required("Log", "body", m.Log); err != nil {
		return err
	}

	return nil
}

func (m *DAGStatus) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DAGStatus) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("Params", "body", m.Params); err != nil {
		return err
	}

	return nil
}

func (m *DAGStatus) validatePid(formats strfmt.Registry) error {

	if err := validate.Required("Pid", "body", m.Pid); err != nil {
		return err
	}

	return nil
}

func (m *DAGStatus) validateRequestID(formats strfmt.Registry) error {

	if err := validate.Required("RequestId", "body", m.RequestID); err != nil {
		return err
	}

	return nil
}

func (m *DAGStatus) validateStartedAt(formats strfmt.Registry) error {

	if err := validate.Required("StartedAt", "body", m.StartedAt); err != nil {
		return err
	}

	return nil
}

func (m *DAGStatus) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DAGStatus) validateStatusText(formats strfmt.Registry) error {

	if err := validate.Required("StatusText", "body", m.StatusText); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this d a g status based on context it is used
func (m *DAGStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DAGStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DAGStatus) UnmarshalBinary(b []byte) error {
	var res DAGStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
