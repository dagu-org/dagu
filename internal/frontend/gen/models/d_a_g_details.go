// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DAGDetails d a g details
//
// swagger:model DAGDetails
type DAGDetails struct {

	// Default parameter values in JSON format if not specified at runtime
	// Required: true
	DefaultParams *string `json:"DefaultParams"`

	// Time in seconds to wait before starting the DAG
	// Required: true
	Delay *int64 `json:"Delay"`

	// Human-readable description of the DAG's purpose and behavior
	// Required: true
	Description *string `json:"Description"`

	// List of environment variables to set before executing
	// Required: true
	Env []string `json:"Env"`

	// Logical grouping of related DAGs for organizational purposes
	// Required: true
	Group *string `json:"Group"`

	// handler on
	// Required: true
	HandlerOn *HandlerOn `json:"HandlerOn"`

	// Number of days to retain historical logs
	// Required: true
	HistRetentionDays *int64 `json:"HistRetentionDays"`

	// Path to the DAG file
	// Required: true
	Location *string `json:"Location"`

	// Directory path for storing log files
	// Required: true
	LogDir *string `json:"LogDir"`

	// Maximum number of concurrent steps to run
	// Required: true
	MaxActiveRuns *int64 `json:"MaxActiveRuns"`

	// Unique identifier for the DAG within its group
	// Required: true
	Name *string `json:"Name"`

	// List of parameter names that can be passed to the DAG at runtime
	// Required: true
	Params []string `json:"Params"`

	// Conditions that must be met before the DAG can start
	// Required: true
	Preconditions []*Precondition `json:"Preconditions"`

	// List of scheduling expressions defining when the DAG should run
	// Required: true
	Schedule []*Schedule `json:"Schedule"`

	// List of steps to execute in the DAG
	// Required: true
	Steps []*Step `json:"Steps"`

	// List of tags for categorizing and filtering DAGs
	// Required: true
	Tags []string `json:"Tags"`
}

// Validate validates this d a g details
func (m *DAGDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandlerOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHistRetentionDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogDir(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxActiveRuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreconditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSteps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DAGDetails) validateDefaultParams(formats strfmt.Registry) error {

	if err := validate.Required("DefaultParams", "body", m.DefaultParams); err != nil {
		return err
	}

	return nil
}

func (m *DAGDetails) validateDelay(formats strfmt.Registry) error {

	if err := validate.Required("Delay", "body", m.Delay); err != nil {
		return err
	}

	return nil
}

func (m *DAGDetails) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *DAGDetails) validateEnv(formats strfmt.Registry) error {

	if err := validate.Required("Env", "body", m.Env); err != nil {
		return err
	}

	return nil
}

func (m *DAGDetails) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("Group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

func (m *DAGDetails) validateHandlerOn(formats strfmt.Registry) error {

	if err := validate.Required("HandlerOn", "body", m.HandlerOn); err != nil {
		return err
	}

	if m.HandlerOn != nil {
		if err := m.HandlerOn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HandlerOn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("HandlerOn")
			}
			return err
		}
	}

	return nil
}

func (m *DAGDetails) validateHistRetentionDays(formats strfmt.Registry) error {

	if err := validate.Required("HistRetentionDays", "body", m.HistRetentionDays); err != nil {
		return err
	}

	return nil
}

func (m *DAGDetails) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("Location", "body", m.Location); err != nil {
		return err
	}

	return nil
}

func (m *DAGDetails) validateLogDir(formats strfmt.Registry) error {

	if err := validate.Required("LogDir", "body", m.LogDir); err != nil {
		return err
	}

	return nil
}

func (m *DAGDetails) validateMaxActiveRuns(formats strfmt.Registry) error {

	if err := validate.Required("MaxActiveRuns", "body", m.MaxActiveRuns); err != nil {
		return err
	}

	return nil
}

func (m *DAGDetails) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DAGDetails) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("Params", "body", m.Params); err != nil {
		return err
	}

	return nil
}

func (m *DAGDetails) validatePreconditions(formats strfmt.Registry) error {

	if err := validate.Required("Preconditions", "body", m.Preconditions); err != nil {
		return err
	}

	for i := 0; i < len(m.Preconditions); i++ {
		if swag.IsZero(m.Preconditions[i]) { // not required
			continue
		}

		if m.Preconditions[i] != nil {
			if err := m.Preconditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Preconditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Preconditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DAGDetails) validateSchedule(formats strfmt.Registry) error {

	if err := validate.Required("Schedule", "body", m.Schedule); err != nil {
		return err
	}

	for i := 0; i < len(m.Schedule); i++ {
		if swag.IsZero(m.Schedule[i]) { // not required
			continue
		}

		if m.Schedule[i] != nil {
			if err := m.Schedule[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Schedule" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Schedule" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DAGDetails) validateSteps(formats strfmt.Registry) error {

	if err := validate.Required("Steps", "body", m.Steps); err != nil {
		return err
	}

	for i := 0; i < len(m.Steps); i++ {
		if swag.IsZero(m.Steps[i]) { // not required
			continue
		}

		if m.Steps[i] != nil {
			if err := m.Steps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Steps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Steps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DAGDetails) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("Tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this d a g details based on the context it is used
func (m *DAGDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHandlerOn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreconditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSteps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DAGDetails) contextValidateHandlerOn(ctx context.Context, formats strfmt.Registry) error {

	if m.HandlerOn != nil {

		if err := m.HandlerOn.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HandlerOn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("HandlerOn")
			}
			return err
		}
	}

	return nil
}

func (m *DAGDetails) contextValidatePreconditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Preconditions); i++ {

		if m.Preconditions[i] != nil {

			if swag.IsZero(m.Preconditions[i]) { // not required
				return nil
			}

			if err := m.Preconditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Preconditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Preconditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DAGDetails) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Schedule); i++ {

		if m.Schedule[i] != nil {

			if swag.IsZero(m.Schedule[i]) { // not required
				return nil
			}

			if err := m.Schedule[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Schedule" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Schedule" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DAGDetails) contextValidateSteps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Steps); i++ {

		if m.Steps[i] != nil {

			if swag.IsZero(m.Steps[i]) { // not required
				return nil
			}

			if err := m.Steps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Steps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Steps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DAGDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DAGDetails) UnmarshalBinary(b []byte) error {
	var res DAGDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
