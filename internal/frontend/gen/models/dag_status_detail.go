// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DagStatusDetail dag status detail
//
// swagger:model dagStatusDetail
type DagStatusDetail struct {

	// Timestamp when the DAG finished.
	// Required: true
	FinishedAt *string `json:"FinishedAt"`

	// log
	// Required: true
	Log *string `json:"Log"`

	// name
	// Required: true
	Name *string `json:"Name"`

	// nodes
	// Required: true
	Nodes []*StatusNode `json:"Nodes"`

	// on cancel
	// Required: true
	OnCancel *StatusNode `json:"OnCancel"`

	// on exit
	// Required: true
	OnExit *StatusNode `json:"OnExit"`

	// on failure
	// Required: true
	OnFailure *StatusNode `json:"OnFailure"`

	// on success
	// Required: true
	OnSuccess *StatusNode `json:"OnSuccess"`

	// params
	// Required: true
	Params *string `json:"Params"`

	// pid
	// Required: true
	Pid *int64 `json:"Pid"`

	// request Id
	// Required: true
	RequestID *string `json:"RequestId"`

	// Timestamp when the DAG started.
	// Required: true
	StartedAt *string `json:"StartedAt"`

	// status
	// Required: true
	Status *int64 `json:"Status"`

	// status text
	// Required: true
	StatusText *string `json:"StatusText"`
}

// Validate validates this dag status detail
func (m *DagStatusDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnCancel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnExit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnFailure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnSuccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DagStatusDetail) validateFinishedAt(formats strfmt.Registry) error {

	if err := validate.Required("FinishedAt", "body", m.FinishedAt); err != nil {
		return err
	}

	return nil
}

func (m *DagStatusDetail) validateLog(formats strfmt.Registry) error {

	if err := validate.Required("Log", "body", m.Log); err != nil {
		return err
	}

	return nil
}

func (m *DagStatusDetail) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DagStatusDetail) validateNodes(formats strfmt.Registry) error {

	if err := validate.Required("Nodes", "body", m.Nodes); err != nil {
		return err
	}

	for i := 0; i < len(m.Nodes); i++ {
		if swag.IsZero(m.Nodes[i]) { // not required
			continue
		}

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DagStatusDetail) validateOnCancel(formats strfmt.Registry) error {

	if err := validate.Required("OnCancel", "body", m.OnCancel); err != nil {
		return err
	}

	if m.OnCancel != nil {
		if err := m.OnCancel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OnCancel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OnCancel")
			}
			return err
		}
	}

	return nil
}

func (m *DagStatusDetail) validateOnExit(formats strfmt.Registry) error {

	if err := validate.Required("OnExit", "body", m.OnExit); err != nil {
		return err
	}

	if m.OnExit != nil {
		if err := m.OnExit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OnExit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OnExit")
			}
			return err
		}
	}

	return nil
}

func (m *DagStatusDetail) validateOnFailure(formats strfmt.Registry) error {

	if err := validate.Required("OnFailure", "body", m.OnFailure); err != nil {
		return err
	}

	if m.OnFailure != nil {
		if err := m.OnFailure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OnFailure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OnFailure")
			}
			return err
		}
	}

	return nil
}

func (m *DagStatusDetail) validateOnSuccess(formats strfmt.Registry) error {

	if err := validate.Required("OnSuccess", "body", m.OnSuccess); err != nil {
		return err
	}

	if m.OnSuccess != nil {
		if err := m.OnSuccess.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OnSuccess")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OnSuccess")
			}
			return err
		}
	}

	return nil
}

func (m *DagStatusDetail) validateParams(formats strfmt.Registry) error {

	if err := validate.Required("Params", "body", m.Params); err != nil {
		return err
	}

	return nil
}

func (m *DagStatusDetail) validatePid(formats strfmt.Registry) error {

	if err := validate.Required("Pid", "body", m.Pid); err != nil {
		return err
	}

	return nil
}

func (m *DagStatusDetail) validateRequestID(formats strfmt.Registry) error {

	if err := validate.Required("RequestId", "body", m.RequestID); err != nil {
		return err
	}

	return nil
}

func (m *DagStatusDetail) validateStartedAt(formats strfmt.Registry) error {

	if err := validate.Required("StartedAt", "body", m.StartedAt); err != nil {
		return err
	}

	return nil
}

func (m *DagStatusDetail) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DagStatusDetail) validateStatusText(formats strfmt.Registry) error {

	if err := validate.Required("StatusText", "body", m.StatusText); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this dag status detail based on the context it is used
func (m *DagStatusDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOnCancel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOnExit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOnFailure(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOnSuccess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DagStatusDetail) contextValidateNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nodes); i++ {

		if m.Nodes[i] != nil {

			if swag.IsZero(m.Nodes[i]) { // not required
				return nil
			}

			if err := m.Nodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DagStatusDetail) contextValidateOnCancel(ctx context.Context, formats strfmt.Registry) error {

	if m.OnCancel != nil {

		if err := m.OnCancel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OnCancel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OnCancel")
			}
			return err
		}
	}

	return nil
}

func (m *DagStatusDetail) contextValidateOnExit(ctx context.Context, formats strfmt.Registry) error {

	if m.OnExit != nil {

		if err := m.OnExit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OnExit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OnExit")
			}
			return err
		}
	}

	return nil
}

func (m *DagStatusDetail) contextValidateOnFailure(ctx context.Context, formats strfmt.Registry) error {

	if m.OnFailure != nil {

		if err := m.OnFailure.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OnFailure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OnFailure")
			}
			return err
		}
	}

	return nil
}

func (m *DagStatusDetail) contextValidateOnSuccess(ctx context.Context, formats strfmt.Registry) error {

	if m.OnSuccess != nil {

		if err := m.OnSuccess.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OnSuccess")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OnSuccess")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DagStatusDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DagStatusDetail) UnmarshalBinary(b []byte) error {
	var res DagStatusDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
