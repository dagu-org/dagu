// Code generated by go-swagger; DO NOT EDIT.

package dags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostDagActionHandlerFunc turns a function with the right signature into a post dag action handler
type PostDagActionHandlerFunc func(PostDagActionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostDagActionHandlerFunc) Handle(params PostDagActionParams) middleware.Responder {
	return fn(params)
}

// PostDagActionHandler interface for that can handle valid post dag action params
type PostDagActionHandler interface {
	Handle(PostDagActionParams) middleware.Responder
}

// NewPostDagAction creates a new http.Handler for the post dag action operation
func NewPostDagAction(ctx *middleware.Context, handler PostDagActionHandler) *PostDagAction {
	return &PostDagAction{Context: ctx, Handler: handler}
}

/*
	PostDagAction swagger:route POST /dags/{dagId} dags postDagAction

# Perform an action on a DAG

Performs a specified action (e.g., start, stop) on the given DAG.
*/
type PostDagAction struct {
	Context *middleware.Context
	Handler PostDagActionHandler
}

func (o *PostDagAction) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostDagActionParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
