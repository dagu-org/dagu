// Code generated by go-swagger; DO NOT EDIT.

package dags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SearchDagsHandlerFunc turns a function with the right signature into a search dags handler
type SearchDagsHandlerFunc func(SearchDagsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchDagsHandlerFunc) Handle(params SearchDagsParams) middleware.Responder {
	return fn(params)
}

// SearchDagsHandler interface for that can handle valid search dags params
type SearchDagsHandler interface {
	Handle(SearchDagsParams) middleware.Responder
}

// NewSearchDags creates a new http.Handler for the search dags operation
func NewSearchDags(ctx *middleware.Context, handler SearchDagsHandler) *SearchDags {
	return &SearchDags{Context: ctx, Handler: handler}
}

/*
	SearchDags swagger:route GET /search dags searchDags

# Search DAGs

Searches for DAGs based on a query string.
*/
type SearchDags struct {
	Context *middleware.Context
	Handler SearchDagsHandler
}

func (o *SearchDags) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSearchDagsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
