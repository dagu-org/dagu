// Code generated by go-swagger; DO NOT EDIT.

package dags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListDAGsHandlerFunc turns a function with the right signature into a list d a gs handler
type ListDAGsHandlerFunc func(ListDAGsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListDAGsHandlerFunc) Handle(params ListDAGsParams) middleware.Responder {
	return fn(params)
}

// ListDAGsHandler interface for that can handle valid list d a gs params
type ListDAGsHandler interface {
	Handle(ListDAGsParams) middleware.Responder
}

// NewListDAGs creates a new http.Handler for the list d a gs operation
func NewListDAGs(ctx *middleware.Context, handler ListDAGsHandler) *ListDAGs {
	return &ListDAGs{Context: ctx, Handler: handler}
}

/*
	ListDAGs swagger:route GET /dags dags listDAGs

# List all DAGs

Returns a list of DAGs with optional pagination and search filters.
*/
type ListDAGs struct {
	Context *middleware.Context
	Handler ListDAGsHandler
}

func (o *ListDAGs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListDAGsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
