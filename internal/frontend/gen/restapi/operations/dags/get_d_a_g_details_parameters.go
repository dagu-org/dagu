// Code generated by go-swagger; DO NOT EDIT.

package dags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewGetDAGDetailsParams creates a new GetDAGDetailsParams object
//
// There are no default values defined in the spec.
func NewGetDAGDetailsParams() GetDAGDetailsParams {

	return GetDAGDetailsParams{}
}

// GetDAGDetailsParams contains all the bound params for the get d a g details operation
// typically these are obtained from a http.Request
//
// swagger:parameters getDAGDetails
type GetDAGDetailsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The ID of the DAG.
	  Required: true
	  In: path
	*/
	DagID string
	/*Specific file related to the DAG.
	  In: query
	*/
	File *string
	/*Step name within the DAG.
	  In: query
	*/
	Step *string
	/*Tab name for UI navigation.
	  In: query
	*/
	Tab *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetDAGDetailsParams() beforehand.
func (o *GetDAGDetailsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rDagID, rhkDagID, _ := route.Params.GetOK("dagId")
	if err := o.bindDagID(rDagID, rhkDagID, route.Formats); err != nil {
		res = append(res, err)
	}

	qFile, qhkFile, _ := qs.GetOK("file")
	if err := o.bindFile(qFile, qhkFile, route.Formats); err != nil {
		res = append(res, err)
	}

	qStep, qhkStep, _ := qs.GetOK("step")
	if err := o.bindStep(qStep, qhkStep, route.Formats); err != nil {
		res = append(res, err)
	}

	qTab, qhkTab, _ := qs.GetOK("tab")
	if err := o.bindTab(qTab, qhkTab, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDagID binds and validates parameter DagID from path.
func (o *GetDAGDetailsParams) bindDagID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.DagID = raw

	return nil
}

// bindFile binds and validates parameter File from query.
func (o *GetDAGDetailsParams) bindFile(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.File = &raw

	return nil
}

// bindStep binds and validates parameter Step from query.
func (o *GetDAGDetailsParams) bindStep(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Step = &raw

	return nil
}

// bindTab binds and validates parameter Tab from query.
func (o *GetDAGDetailsParams) bindTab(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Tab = &raw

	return nil
}
