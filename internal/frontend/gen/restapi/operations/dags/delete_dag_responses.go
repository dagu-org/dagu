// Code generated by go-swagger; DO NOT EDIT.

package dags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dagu-org/dagu/internal/frontend/gen/models"
)

// DeleteDagOKCode is the HTTP code returned for type DeleteDagOK
const DeleteDagOKCode int = 200

/*
DeleteDagOK A successful response.

swagger:response deleteDagOK
*/
type DeleteDagOK struct {
}

// NewDeleteDagOK creates DeleteDagOK with default headers values
func NewDeleteDagOK() *DeleteDagOK {

	return &DeleteDagOK{}
}

// WriteResponse to the client
func (o *DeleteDagOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

/*
DeleteDagDefault Generic error response.

swagger:response deleteDagDefault
*/
type DeleteDagDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.APIError `json:"body,omitempty"`
}

// NewDeleteDagDefault creates DeleteDagDefault with default headers values
func NewDeleteDagDefault(code int) *DeleteDagDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteDagDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete dag default response
func (o *DeleteDagDefault) WithStatusCode(code int) *DeleteDagDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete dag default response
func (o *DeleteDagDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete dag default response
func (o *DeleteDagDefault) WithPayload(payload *models.APIError) *DeleteDagDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete dag default response
func (o *DeleteDagDefault) SetPayload(payload *models.APIError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteDagDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
